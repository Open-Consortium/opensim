using System;using Tools;
namespace OpenSim.Region.ScriptEngine.Shared.CodeTools {
//%+LSLProgramRoot+96
public class LSLProgramRoot : SYMBOL{
 public  LSLProgramRoot (Parser yyp, States  s ):base(((LSLSyntax
)yyp)){ while (0< s . kids . Count ) kids . Add ( s . kids . Pop ());
}
 public  LSLProgramRoot (Parser yyp, GlobalDefinitions  gd , States  s ):base(((LSLSyntax
)yyp)){ while (0< gd . kids . Count ) kids . Add ( gd . kids . Pop ());
 while (0< s . kids . Count ) kids . Add ( s . kids . Pop ());
}

public override string yyname { get { return "LSLProgramRoot"; }}
public override int yynum { get { return 96; }}
public LSLProgramRoot(Parser yyp):base(yyp){}}
//%+GlobalDefinitions+97
public class GlobalDefinitions : SYMBOL{
 public  GlobalDefinitions (Parser yyp, GlobalVariableDeclaration  gvd ):base(((LSLSyntax
)yyp)){ kids . Add ( gvd );
}
 public  GlobalDefinitions (Parser yyp, GlobalDefinitions  gd , GlobalVariableDeclaration  gvd ):base(((LSLSyntax
)yyp)){ while (0< gd . kids . Count ) kids . Add ( gd . kids . Pop ());
 kids . Add ( gvd );
}
 public  GlobalDefinitions (Parser yyp, GlobalFunctionDefinition  gfd ):base(((LSLSyntax
)yyp)){ kids . Add ( gfd );
}
 public  GlobalDefinitions (Parser yyp, GlobalDefinitions  gd , GlobalFunctionDefinition  gfd ):base(((LSLSyntax
)yyp)){ while (0< gd . kids . Count ) kids . Add ( gd . kids . Pop ());
 kids . Add ( gfd );
}

public override string yyname { get { return "GlobalDefinitions"; }}
public override int yynum { get { return 97; }}
public GlobalDefinitions(Parser yyp):base(yyp){}}
//%+GlobalVariableDeclaration+98
public class GlobalVariableDeclaration : SYMBOL{
 public  GlobalVariableDeclaration (Parser yyp, Declaration  d ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
}
 public  GlobalVariableDeclaration (Parser yyp, Assignment  a ):base(((LSLSyntax
)yyp)){ kids . Add ( a );
}

public override string yyname { get { return "GlobalVariableDeclaration"; }}
public override int yynum { get { return 98; }}
public GlobalVariableDeclaration(Parser yyp):base(yyp){}}
//%+GlobalFunctionDefinition+99
public class GlobalFunctionDefinition : SYMBOL{
 private  string  m_returnType ;
 private  string  m_name ;
 public  GlobalFunctionDefinition (Parser yyp, string  returnType , string  name , ArgumentDeclarationList  adl , CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ m_returnType = returnType ;
 m_name = name ;
 kids . Add ( adl );
 kids . Add ( cs );
}
 public  string  ReturnType { get { return  m_returnType ;
}
 set { m_returnType = value ;
}
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "GlobalFunctionDefinition"; }}
public override int yynum { get { return 99; }}
public GlobalFunctionDefinition(Parser yyp):base(yyp){}}
//%+States+100
public class States : SYMBOL{
 public  States (Parser yyp, State  ds ):base(((LSLSyntax
)yyp)){ kids . Add ( ds );
}
 public  States (Parser yyp, States  s , State  us ):base(((LSLSyntax
)yyp)){ while (0< s . kids . Count ) kids . Add ( s . kids . Pop ());
 kids . Add ( us );
}

public override string yyname { get { return "States"; }}
public override int yynum { get { return 100; }}
public States(Parser yyp):base(yyp){}}
//%+State+101
public class State : SYMBOL{
 private  string  m_name ;
 public  State (Parser yyp, string  name , StateBody  sb ):base(((LSLSyntax
)yyp)){ m_name = name ;
 while (0< sb . kids . Count ) kids . Add ( sb . kids . Pop ());
}
 public  override  string  ToString (){ return "STATE<"+ m_name +">";
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "State"; }}
public override int yynum { get { return 101; }}
public State(Parser yyp):base(yyp){}}
//%+StateBody+102
public class StateBody : SYMBOL{
 public  StateBody (Parser yyp, StateBody  sb , StateEvent  se ):base(((LSLSyntax
)yyp)){ while (0< sb . kids . Count ) kids . Add ( sb . kids . Pop ());
 kids . Add ( se );
}
 public  StateBody (Parser yyp, StateEvent  se ):base(((LSLSyntax
)yyp)){ kids . Add ( se );
}

public override string yyname { get { return "StateBody"; }}
public override int yynum { get { return 102; }}
public StateBody(Parser yyp):base(yyp){}}
//%+StateEvent+103
public class StateEvent : SYMBOL{
 private  string  m_name ;
 public  StateEvent (Parser yyp, string  name , CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ m_name = name ;
 kids . Add ( cs );
}
 public  StateEvent (Parser yyp, string  name , ArgumentDeclarationList  adl , CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ m_name = name ;
 if (0< adl . kids . Count ) kids . Add ( adl );
 kids . Add ( cs );
}
 public  override  string  ToString (){ return "EVENT<"+ m_name +">";
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "StateEvent"; }}
public override int yynum { get { return 103; }}
public StateEvent(Parser yyp):base(yyp){}}
//%+VoidArgStateEvent+104
public class VoidArgStateEvent : StateEvent{
 public  VoidArgStateEvent (Parser yyp, string  name , CompoundStatement  cs ):base(((LSLSyntax
)yyp), name , cs ){}

public override string yyname { get { return "VoidArgStateEvent"; }}
public override int yynum { get { return 104; }}
public VoidArgStateEvent(Parser yyp):base(yyp){}}
//%+IntArgStateEvent+105
public class IntArgStateEvent : StateEvent{
 public  IntArgStateEvent (Parser yyp, string  name , IntArgumentDeclarationList  adl , CompoundStatement  cs ):base(((LSLSyntax
)yyp), name , adl , cs ){}

public override string yyname { get { return "IntArgStateEvent"; }}
public override int yynum { get { return 105; }}
public IntArgStateEvent(Parser yyp):base(yyp){}}
//%+VectorArgStateEvent+106
public class VectorArgStateEvent : StateEvent{
 public  VectorArgStateEvent (Parser yyp, string  name , VectorArgumentDeclarationList  adl , CompoundStatement  cs ):base(((LSLSyntax
)yyp), name , adl , cs ){}

public override string yyname { get { return "VectorArgStateEvent"; }}
public override int yynum { get { return 106; }}
public VectorArgStateEvent(Parser yyp):base(yyp){}}
//%+ArgumentDeclarationList+107
public class ArgumentDeclarationList : SYMBOL{
 public  ArgumentDeclarationList (Parser yyp, Declaration  d ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
}
 public  ArgumentDeclarationList (Parser yyp, ArgumentDeclarationList  adl , Declaration  d ):base(((LSLSyntax
)yyp)){ while (0< adl . kids . Count ) kids . Add ( adl . kids . Pop ());
 kids . Add ( d );
}

public override string yyname { get { return "ArgumentDeclarationList"; }}
public override int yynum { get { return 107; }}
public ArgumentDeclarationList(Parser yyp):base(yyp){}}
//%+IntArgumentDeclarationList+108
public class IntArgumentDeclarationList : ArgumentDeclarationList{
 public  IntArgumentDeclarationList (Parser yyp, IntDeclaration  d ):base(((LSLSyntax
)yyp), d ){}

public override string yyname { get { return "IntArgumentDeclarationList"; }}
public override int yynum { get { return 108; }}
public IntArgumentDeclarationList(Parser yyp):base(yyp){}}
//%+VectorArgumentDeclarationList+109
public class VectorArgumentDeclarationList : ArgumentDeclarationList{
 public  VectorArgumentDeclarationList (Parser yyp, VectorDeclaration  d ):base(((LSLSyntax
)yyp), d ){}

public override string yyname { get { return "VectorArgumentDeclarationList"; }}
public override int yynum { get { return 109; }}
public VectorArgumentDeclarationList(Parser yyp):base(yyp){}}
//%+Declaration+110
public class Declaration : SYMBOL{
 private  string  m_datatype ;
 private  string  m_id ;
 public  Declaration (Parser yyp, string  type , string  id ):base(((LSLSyntax
)yyp)){ m_datatype = type ;
 m_id = id ;
}
 public  override  string  ToString (){ return "Declaration<"+ m_datatype +":"+ m_id +">";
}
 public  string  Datatype { get { return  m_datatype ;
}
 set { m_datatype = value ;
}
}
 public  string  Id { get { return  m_id ;
}
}

public override string yyname { get { return "Declaration"; }}
public override int yynum { get { return 110; }}
public Declaration(Parser yyp):base(yyp){}}
//%+IntDeclaration+111
public class IntDeclaration : Declaration{
 public  IntDeclaration (Parser yyp, string  type , string  id ):base(((LSLSyntax
)yyp), type , id ){}

public override string yyname { get { return "IntDeclaration"; }}
public override int yynum { get { return 111; }}
public IntDeclaration(Parser yyp):base(yyp){}}
//%+VectorDeclaration+112
public class VectorDeclaration : Declaration{
 public  VectorDeclaration (Parser yyp, string  type , string  id ):base(((LSLSyntax
)yyp), type , id ){}

public override string yyname { get { return "VectorDeclaration"; }}
public override int yynum { get { return 112; }}
public VectorDeclaration(Parser yyp):base(yyp){}}
//%+Typename+113
public class Typename : SYMBOL{
 public  string  yytext ;
 public  Typename (Parser yyp, string  text ):base(((LSLSyntax
)yyp)){ yytext = text ;
}

public override string yyname { get { return "Typename"; }}
public override int yynum { get { return 113; }}
public Typename(Parser yyp):base(yyp){}}
//%+Event+114
public class Event : SYMBOL{
 public  string  yytext ;
 public  Event (Parser yyp, string  text ):base(((LSLSyntax
)yyp)){ yytext = text ;
}

public override string yyname { get { return "Event"; }}
public override int yynum { get { return 114; }}
public Event(Parser yyp):base(yyp){}}
//%+VoidArgEvent+115
public class VoidArgEvent : Event{
 public  VoidArgEvent (Parser yyp, string  text ):base(((LSLSyntax
)yyp), text ){}

public override string yyname { get { return "VoidArgEvent"; }}
public override int yynum { get { return 115; }}
public VoidArgEvent(Parser yyp):base(yyp){}}
//%+IntArgEvent+116
public class IntArgEvent : Event{
 public  IntArgEvent (Parser yyp, string  text ):base(((LSLSyntax
)yyp), text ){}

public override string yyname { get { return "IntArgEvent"; }}
public override int yynum { get { return 116; }}
public IntArgEvent(Parser yyp):base(yyp){}}
//%+VectorArgEvent+117
public class VectorArgEvent : Event{
 public  VectorArgEvent (Parser yyp, string  text ):base(((LSLSyntax
)yyp), text ){}

public override string yyname { get { return "VectorArgEvent"; }}
public override int yynum { get { return 117; }}
public VectorArgEvent(Parser yyp):base(yyp){}}
//%+CompoundStatement+118
public class CompoundStatement : SYMBOL{
 public  CompoundStatement (Parser yyp):base(((LSLSyntax
)yyp)){}
 public  CompoundStatement (Parser yyp, StatementList  sl ):base(((LSLSyntax
)yyp)){ while (0< sl . kids . Count ) kids . Add ( sl . kids . Pop ());
}

public override string yyname { get { return "CompoundStatement"; }}
public override int yynum { get { return 118; }}
}
//%+StatementList+119
public class StatementList : SYMBOL{
 private  void  AddStatement ( Statement  s ){ if ( s . kids . Top  is  IfStatement || s . kids . Top  is  WhileStatement || s . kids . Top  is  DoWhileStatement || s . kids . Top  is  ForLoop ) kids . Add ( s . kids . Pop ());
 else  kids . Add ( s );
}
 public  StatementList (Parser yyp, Statement  s ):base(((LSLSyntax
)yyp)){ AddStatement ( s );
}
 public  StatementList (Parser yyp, StatementList  sl , Statement  s ):base(((LSLSyntax
)yyp)){ while (0< sl . kids . Count ) kids . Add ( sl . kids . Pop ());
 AddStatement ( s );
}

public override string yyname { get { return "StatementList"; }}
public override int yynum { get { return 119; }}
public StatementList(Parser yyp):base(yyp){}}
//%+Statement+120
public class Statement : SYMBOL{
 public  Statement (Parser yyp, Declaration  d ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
}
 public  Statement (Parser yyp, CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ kids . Add ( cs );
}
 public  Statement (Parser yyp, FunctionCall  fc ):base(((LSLSyntax
)yyp)){ kids . Add ( fc );
}
 public  Statement (Parser yyp, Assignment  a ):base(((LSLSyntax
)yyp)){ kids . Add ( a );
}
 public  Statement (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ kids . Add ( e );
}
 public  Statement (Parser yyp, ReturnStatement  rs ):base(((LSLSyntax
)yyp)){ kids . Add ( rs );
}
 public  Statement (Parser yyp, StateChange  sc ):base(((LSLSyntax
)yyp)){ kids . Add ( sc );
}
 public  Statement (Parser yyp, IfStatement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( ifs );
}
 public  Statement (Parser yyp, WhileStatement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( ifs );
}
 public  Statement (Parser yyp, DoWhileStatement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( ifs );
}
 public  Statement (Parser yyp, ForLoop  fl ):base(((LSLSyntax
)yyp)){ kids . Add ( fl );
}
 public  Statement (Parser yyp, JumpLabel  jl ):base(((LSLSyntax
)yyp)){ kids . Add ( jl );
}
 public  Statement (Parser yyp, JumpStatement  js ):base(((LSLSyntax
)yyp)){ kids . Add ( js );
}
 public  Statement (Parser yyp, EmptyStatement  es ):base(((LSLSyntax
)yyp)){ kids . Add ( es );
}

public override string yyname { get { return "Statement"; }}
public override int yynum { get { return 120; }}
public Statement(Parser yyp):base(yyp){}}
//%+EmptyStatement+121
public class EmptyStatement : SYMBOL{
 public  EmptyStatement (Parser yyp):base(((LSLSyntax
)yyp)){}
 public  override  string  ToString (){ return  base . ToString ();
}

public override string yyname { get { return "EmptyStatement"; }}
public override int yynum { get { return 121; }}
}
//%+Assignment+122
public class Assignment : SYMBOL{
 protected  string  m_assignmentType ;
 public  Assignment (Parser yyp, SYMBOL  lhs , SYMBOL  rhs , string  assignmentType ):base(((LSLSyntax
)yyp)){ m_assignmentType = assignmentType ;
 kids . Add ( lhs );
 if ( rhs  is  ConstantExpression ) while (0< rhs . kids . Count ) kids . Add ( rhs . kids . Pop ());
 else  kids . Add ( rhs );
}
 public  Assignment (Parser yyp, SimpleAssignment  sa ):base(((LSLSyntax
)yyp)){ m_assignmentType = sa . AssignmentType ;
 while (0< sa . kids . Count ) kids . Add ( sa . kids . Pop ());
}
 public  string  AssignmentType { get { return  m_assignmentType ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_assignmentType +">";
}

public override string yyname { get { return "Assignment"; }}
public override int yynum { get { return 122; }}
public Assignment(Parser yyp):base(yyp){}}
//%+SimpleAssignment+123
public class SimpleAssignment : Assignment{
 public  SimpleAssignment (Parser yyp, SYMBOL  lhs , SYMBOL  rhs , string  assignmentType ):base(((LSLSyntax
)yyp)){ m_assignmentType = assignmentType ;
 kids . Add ( lhs );
 if ( rhs  is  ConstantExpression ) while (0< rhs . kids . Count ) kids . Add ( rhs . kids . Pop ());
 else  kids . Add ( rhs );
}

public override string yyname { get { return "SimpleAssignment"; }}
public override int yynum { get { return 123; }}
public SimpleAssignment(Parser yyp):base(yyp){}}
//%+ReturnStatement+124
public class ReturnStatement : SYMBOL{
 public  ReturnStatement (Parser yyp):base(((LSLSyntax
)yyp)){}
 public  ReturnStatement (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ if ( e  is  ConstantExpression ) while (0< e . kids . Count ) kids . Add ( e . kids . Pop ());
 else  kids . Add ( e );
}

public override string yyname { get { return "ReturnStatement"; }}
public override int yynum { get { return 124; }}
}
//%+JumpLabel+125
public class JumpLabel : SYMBOL{
 private  string  m_labelName ;
 public  JumpLabel (Parser yyp, string  labelName ):base(((LSLSyntax
)yyp)){ m_labelName = labelName ;
}
 public  string  LabelName { get { return  m_labelName ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_labelName +">";
}

public override string yyname { get { return "JumpLabel"; }}
public override int yynum { get { return 125; }}
public JumpLabel(Parser yyp):base(yyp){}}
//%+JumpStatement+126
public class JumpStatement : SYMBOL{
 private  string  m_targetName ;
 public  JumpStatement (Parser yyp, string  targetName ):base(((LSLSyntax
)yyp)){ m_targetName = targetName ;
}
 public  string  TargetName { get { return  m_targetName ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_targetName +">";
}

public override string yyname { get { return "JumpStatement"; }}
public override int yynum { get { return 126; }}
public JumpStatement(Parser yyp):base(yyp){}}
//%+StateChange+127
public class StateChange : SYMBOL{
 private  string  m_newState ;
 public  StateChange (Parser yyp, string  newState ):base(((LSLSyntax
)yyp)){ m_newState = newState ;
}
 public  string  NewState { get { return  m_newState ;
}
}

public override string yyname { get { return "StateChange"; }}
public override int yynum { get { return 127; }}
public StateChange(Parser yyp):base(yyp){}}
//%+IfStatement+128
public class IfStatement : SYMBOL{
 private  void  AddStatement ( Statement  s ){ if (0< s . kids . Count && s . kids . Top  is  CompoundStatement ) kids . Add ( s . kids . Pop ());
 else  kids . Add ( s );
}
 public  IfStatement (Parser yyp, SYMBOL  s , Statement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( s );
 AddStatement ( ifs );
}
 public  IfStatement (Parser yyp, SYMBOL  s , Statement  ifs , Statement  es ):base(((LSLSyntax
)yyp)){ kids . Add ( s );
 AddStatement ( ifs );
 if (0< es . kids . Count && es . kids . Top  is  IfStatement ) kids . Add ( es . kids . Pop ());
 else  AddStatement ( es );
}

public override string yyname { get { return "IfStatement"; }}
public override int yynum { get { return 128; }}
public IfStatement(Parser yyp):base(yyp){}}
//%+WhileStatement+129
public class WhileStatement : SYMBOL{
 public  WhileStatement (Parser yyp, SYMBOL  s , Statement  st ):base(((LSLSyntax
)yyp)){ kids . Add ( s );
 if (0< st . kids . Count && st . kids . Top  is  CompoundStatement ) kids . Add ( st . kids . Pop ());
 else  kids . Add ( st );
}

public override string yyname { get { return "WhileStatement"; }}
public override int yynum { get { return 129; }}
public WhileStatement(Parser yyp):base(yyp){}}
//%+DoWhileStatement+130
public class DoWhileStatement : SYMBOL{
 public  DoWhileStatement (Parser yyp, SYMBOL  s , Statement  st ):base(((LSLSyntax
)yyp)){ if (0< st . kids . Count && st . kids . Top  is  CompoundStatement ) kids . Add ( st . kids . Pop ());
 else  kids . Add ( st );
 kids . Add ( s );
}

public override string yyname { get { return "DoWhileStatement"; }}
public override int yynum { get { return 130; }}
public DoWhileStatement(Parser yyp):base(yyp){}}
//%+ForLoop+131
public class ForLoop : SYMBOL{
 public  ForLoop (Parser yyp, ForLoopStatement  flsa , Expression  e , ForLoopStatement  flsb , Statement  s ):base(((LSLSyntax
)yyp)){ kids . Add ( flsa );
 kids . Add ( e );
 kids . Add ( flsb );
 if (0< s . kids . Count && s . kids . Top  is  CompoundStatement ) kids . Add ( s . kids . Pop ());
 else  kids . Add ( s );
}

public override string yyname { get { return "ForLoop"; }}
public override int yynum { get { return 131; }}
public ForLoop(Parser yyp):base(yyp){}}
//%+ForLoopStatement+132
public class ForLoopStatement : SYMBOL{
 public  ForLoopStatement (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ kids . Add ( e );
}
 public  ForLoopStatement (Parser yyp, SimpleAssignment  sa ):base(((LSLSyntax
)yyp)){ kids . Add ( sa );
}
 public  ForLoopStatement (Parser yyp, ForLoopStatement  fls , Expression  e ):base(((LSLSyntax
)yyp)){ while (0< fls . kids . Count ) kids . Add ( fls . kids . Pop ());
 kids . Add ( e );
}
 public  ForLoopStatement (Parser yyp, ForLoopStatement  fls , SimpleAssignment  sa ):base(((LSLSyntax
)yyp)){ while (0< fls . kids . Count ) kids . Add ( fls . kids . Pop ());
 kids . Add ( sa );
}

public override string yyname { get { return "ForLoopStatement"; }}
public override int yynum { get { return 132; }}
public ForLoopStatement(Parser yyp):base(yyp){}}
//%+FunctionCall+133
public class FunctionCall : SYMBOL{
 private  string  m_id ;
 public  FunctionCall (Parser yyp, string  id , ArgumentList  al ):base(((LSLSyntax
)yyp)){ m_id = id ;
 kids . Add ( al );
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_id +">";
}
 public  string  Id { get { return  m_id ;
}
}

public override string yyname { get { return "FunctionCall"; }}
public override int yynum { get { return 133; }}
public FunctionCall(Parser yyp):base(yyp){}}
//%+ArgumentList+134
public class ArgumentList : SYMBOL{
 public  ArgumentList (Parser yyp, Argument  a ):base(((LSLSyntax
)yyp)){ AddArgument ( a );
}
 public  ArgumentList (Parser yyp, ArgumentList  al , Argument  a ):base(((LSLSyntax
)yyp)){ while (0< al . kids . Count ) kids . Add ( al . kids . Pop ());
 AddArgument ( a );
}
 private  void  AddArgument ( Argument  a ){ if ( a  is  ExpressionArgument ) while (0< a . kids . Count ) kids . Add ( a . kids . Pop ());
 else  kids . Add ( a );
}

public override string yyname { get { return "ArgumentList"; }}
public override int yynum { get { return 134; }}
public ArgumentList(Parser yyp):base(yyp){}}
//%+Argument+135
public class Argument : SYMBOL{
public override string yyname { get { return "Argument"; }}
public override int yynum { get { return 135; }}
public Argument(Parser yyp):base(yyp){}}
//%+ExpressionArgument+136
public class ExpressionArgument : Argument{
 public  ExpressionArgument (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ if ( e  is  ConstantExpression ) while (0< e . kids . Count ) kids . Add ( e . kids . Pop ());
 else  kids . Add ( e );
}

public override string yyname { get { return "ExpressionArgument"; }}
public override int yynum { get { return 136; }}
public ExpressionArgument(Parser yyp):base(yyp){}}
//%+Constant+137
public class Constant : SYMBOL{
 private  string  m_type ;
 private  string  m_val ;
 public  Constant (Parser yyp, string  type , string  val ):base(((LSLSyntax
)yyp)){ m_type = type ;
 m_val = val ;
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_type +":"+ m_val +">";
}
 public  string  Value { get { return  m_val ;
}
 set { m_val = value ;
}
}
 public  string  Type { get { return  m_type ;
}
 set { m_type = value ;
}
}

public override string yyname { get { return "Constant"; }}
public override int yynum { get { return 137; }}
public Constant(Parser yyp):base(yyp){}}
//%+VectorConstant+138
public class VectorConstant : Constant{
 public  VectorConstant (Parser yyp, Expression  valX , Expression  valY , Expression  valZ ):base(((LSLSyntax
)yyp),"vector", null ){ kids . Add ( valX );
 kids . Add ( valY );
 kids . Add ( valZ );
}

public override string yyname { get { return "VectorConstant"; }}
public override int yynum { get { return 138; }}
public VectorConstant(Parser yyp):base(yyp){}}
//%+RotationConstant+139
public class RotationConstant : Constant{
 public  RotationConstant (Parser yyp, Expression  valX , Expression  valY , Expression  valZ , Expression  valS ):base(((LSLSyntax
)yyp),"rotation", null ){ kids . Add ( valX );
 kids . Add ( valY );
 kids . Add ( valZ );
 kids . Add ( valS );
}

public override string yyname { get { return "RotationConstant"; }}
public override int yynum { get { return 139; }}
public RotationConstant(Parser yyp):base(yyp){}}
//%+ListConstant+140
public class ListConstant : Constant{
 public  ListConstant (Parser yyp, ArgumentList  al ):base(((LSLSyntax
)yyp),"list", null ){ kids . Add ( al );
}

public override string yyname { get { return "ListConstant"; }}
public override int yynum { get { return 140; }}
public ListConstant(Parser yyp):base(yyp){}}
//%+Expression+141
public class Expression : SYMBOL{
 protected  void  AddExpression ( Expression  e ){ if ( e  is  ConstantExpression ) while (0< e . kids . Count ) kids . Add ( e . kids . Pop ());
 else  kids . Add ( e );
}

public override string yyname { get { return "Expression"; }}
public override int yynum { get { return 141; }}
public Expression(Parser yyp):base(yyp){}}
//%+ConstantExpression+142
public class ConstantExpression : Expression{
 public  ConstantExpression (Parser yyp, Constant  c ):base(((LSLSyntax
)yyp)){ kids . Add ( c );
}

public override string yyname { get { return "ConstantExpression"; }}
public override int yynum { get { return 142; }}
public ConstantExpression(Parser yyp):base(yyp){}}
//%+IdentExpression+143
public class IdentExpression : Expression{
 protected  string  m_name ;
 public  IdentExpression (Parser yyp, string  name ):base(((LSLSyntax
)yyp)){ m_name = name ;
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_name +">";
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "IdentExpression"; }}
public override int yynum { get { return 143; }}
public IdentExpression(Parser yyp):base(yyp){}}
//%+IdentDotExpression+144
public class IdentDotExpression : IdentExpression{
 private  string  m_member ;
 public  IdentDotExpression (Parser yyp, string  name , string  member ):base(((LSLSyntax
)yyp), name ){ m_member = member ;
}
 public  override  string  ToString (){ string  baseToString = base . ToString ();
 return  baseToString . Substring (0, baseToString . Length -1)+"."+ m_member +">";
}
 public  string  Member { get { return  m_member ;
}
}

public override string yyname { get { return "IdentDotExpression"; }}
public override int yynum { get { return 144; }}
public IdentDotExpression(Parser yyp):base(yyp){}}
//%+FunctionCallExpression+145
public class FunctionCallExpression : Expression{
 public  FunctionCallExpression (Parser yyp, FunctionCall  fc ):base(((LSLSyntax
)yyp)){ kids . Add ( fc );
}

public override string yyname { get { return "FunctionCallExpression"; }}
public override int yynum { get { return 145; }}
public FunctionCallExpression(Parser yyp):base(yyp){}}
//%+BinaryExpression+146
public class BinaryExpression : Expression{
 private  string  m_expressionSymbol ;
 public  BinaryExpression (Parser yyp, Expression  lhs , Expression  rhs , string  expressionSymbol ):base(((LSLSyntax
)yyp)){ m_expressionSymbol = expressionSymbol ;
 AddExpression ( lhs );
 AddExpression ( rhs );
}
 public  string  ExpressionSymbol { get { return  m_expressionSymbol ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_expressionSymbol +">";
}

public override string yyname { get { return "BinaryExpression"; }}
public override int yynum { get { return 146; }}
public BinaryExpression(Parser yyp):base(yyp){}}
//%+UnaryExpression+147
public class UnaryExpression : Expression{
 private  string  m_unarySymbol ;
 public  UnaryExpression (Parser yyp, string  unarySymbol , Expression  e ):base(((LSLSyntax
)yyp)){ m_unarySymbol = unarySymbol ;
 AddExpression ( e );
}
 public  string  UnarySymbol { get { return  m_unarySymbol ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_unarySymbol +">";
}

public override string yyname { get { return "UnaryExpression"; }}
public override int yynum { get { return 147; }}
public UnaryExpression(Parser yyp):base(yyp){}}
//%+TypecastExpression+148
public class TypecastExpression : Expression{
 private  string  m_typecastType ;
 public  TypecastExpression (Parser yyp, string  typecastType , SYMBOL  rhs ):base(((LSLSyntax
)yyp)){ m_typecastType = typecastType ;
 kids . Add ( rhs );
}
 public  string  TypecastType { get { return  m_typecastType ;
}
 set { m_typecastType = value ;
}
}

public override string yyname { get { return "TypecastExpression"; }}
public override int yynum { get { return 148; }}
public TypecastExpression(Parser yyp):base(yyp){}}
//%+ParenthesisExpression+149
public class ParenthesisExpression : Expression{
 public  ParenthesisExpression (Parser yyp, SYMBOL  s ):base(((LSLSyntax
)yyp)){ kids . Add ( s );
}

public override string yyname { get { return "ParenthesisExpression"; }}
public override int yynum { get { return 149; }}
public ParenthesisExpression(Parser yyp):base(yyp){}}
//%+IncrementDecrementExpression+150
public class IncrementDecrementExpression : Expression{
 private  string  m_name ;
 private  string  m_operation ;
 private  bool  m_postOperation ;
 public  IncrementDecrementExpression (Parser yyp, string  name , string  operation , bool  postOperation ):base(((LSLSyntax
)yyp)){ m_name = name ;
 m_operation = operation ;
 m_postOperation = postOperation ;
}
 public  IncrementDecrementExpression (Parser yyp, IdentDotExpression  ide , string  operation , bool  postOperation ):base(((LSLSyntax
)yyp)){ m_operation = operation ;
 m_postOperation = postOperation ;
 kids . Add ( ide );
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+( m_postOperation ? m_name + m_operation : m_operation + m_name )+">";
}
 public  string  Name { get { return  m_name ;
}
}
 public  string  Operation { get { return  m_operation ;
}
}
 public  bool  PostOperation { get { return  m_postOperation ;
}
}

public override string yyname { get { return "IncrementDecrementExpression"; }}
public override int yynum { get { return 150; }}
public IncrementDecrementExpression(Parser yyp):base(yyp){}}

public class LSLProgramRoot_1 : LSLProgramRoot {
  public LSLProgramRoot_1(Parser yyq):base(yyq,
	((GlobalDefinitions)(yyq.StackAt(1).m_value))
	, 
	((States)(yyq.StackAt(0).m_value))
	){}}

public class LSLProgramRoot_2 : LSLProgramRoot {
  public LSLProgramRoot_2(Parser yyq):base(yyq,
	((States)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_1 : GlobalDefinitions {
  public GlobalDefinitions_1(Parser yyq):base(yyq,
	((GlobalVariableDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_2 : GlobalDefinitions {
  public GlobalDefinitions_2(Parser yyq):base(yyq,
	((GlobalDefinitions)(yyq.StackAt(1).m_value))
	, 
	((GlobalVariableDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_3 : GlobalDefinitions {
  public GlobalDefinitions_3(Parser yyq):base(yyq,
	((GlobalFunctionDefinition)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_4 : GlobalDefinitions {
  public GlobalDefinitions_4(Parser yyq):base(yyq,
	((GlobalDefinitions)(yyq.StackAt(1).m_value))
	, 
	((GlobalFunctionDefinition)(yyq.StackAt(0).m_value))
	){}}

public class GlobalVariableDeclaration_1 : GlobalVariableDeclaration {
  public GlobalVariableDeclaration_1(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(1).m_value))
	){}}

public class GlobalVariableDeclaration_2 : GlobalVariableDeclaration {
  public GlobalVariableDeclaration_2(Parser yyq):base(yyq,new Assignment(((LSLSyntax
)yyq), 
	((Declaration)(yyq.StackAt(3).m_value))
	, 
	((Expression)(yyq.StackAt(1).m_value))
	, 
	((EQUALS)(yyq.StackAt(2).m_value))
	.yytext)){}}

public class GlobalFunctionDefinition_1 : GlobalFunctionDefinition {
  public GlobalFunctionDefinition_1(Parser yyq):base(yyq,"void", 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class GlobalFunctionDefinition_2 : GlobalFunctionDefinition {
  public GlobalFunctionDefinition_2(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(5).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class States_1 : States {
  public States_1(Parser yyq):base(yyq,
	((State)(yyq.StackAt(0).m_value))
	){}}

public class States_2 : States {
  public States_2(Parser yyq):base(yyq,
	((States)(yyq.StackAt(1).m_value))
	, 
	((State)(yyq.StackAt(0).m_value))
	){}}

public class State_1 : State {
  public State_1(Parser yyq):base(yyq,
	((DEFAULT_STATE)(yyq.StackAt(3).m_value))
	.yytext, 
	((StateBody)(yyq.StackAt(1).m_value))
	){}}

public class State_2 : State {
  public State_2(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((StateBody)(yyq.StackAt(1).m_value))
	){}}

public class StateBody_1 : StateBody {
  public StateBody_1(Parser yyq):base(yyq,
	((StateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_2 : StateBody {
  public StateBody_2(Parser yyq):base(yyq,
	((StateBody)(yyq.StackAt(1).m_value))
	, 
	((StateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_3 : StateBody {
  public StateBody_3(Parser yyq):base(yyq,
	((VoidArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_4 : StateBody {
  public StateBody_4(Parser yyq):base(yyq,
	((StateBody)(yyq.StackAt(1).m_value))
	, 
	((VoidArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_5 : StateBody {
  public StateBody_5(Parser yyq):base(yyq,
	((IntArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_6 : StateBody {
  public StateBody_6(Parser yyq):base(yyq,
	((StateBody)(yyq.StackAt(1).m_value))
	, 
	((IntArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_7 : StateBody {
  public StateBody_7(Parser yyq):base(yyq,
	((VectorArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_8 : StateBody {
  public StateBody_8(Parser yyq):base(yyq,
	((StateBody)(yyq.StackAt(1).m_value))
	, 
	((VectorArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateEvent_1 : StateEvent {
  public StateEvent_1(Parser yyq):base(yyq,
	((Event)(yyq.StackAt(4).m_value))
	.yytext, 
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class VoidArgStateEvent_1 : VoidArgStateEvent {
  public VoidArgStateEvent_1(Parser yyq):base(yyq,
	((VoidArgEvent)(yyq.StackAt(3).m_value))
	.yytext, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class IntArgStateEvent_1 : IntArgStateEvent {
  public IntArgStateEvent_1(Parser yyq):base(yyq,
	((IntArgEvent)(yyq.StackAt(4).m_value))
	.yytext, 
	((IntArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class VectorArgStateEvent_1 : VectorArgStateEvent {
  public VectorArgStateEvent_1(Parser yyq):base(yyq,
	((VectorArgEvent)(yyq.StackAt(4).m_value))
	.yytext, 
	((VectorArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class ArgumentDeclarationList_1 : ArgumentDeclarationList {
  public ArgumentDeclarationList_1(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(0).m_value))
	){}}

public class ArgumentDeclarationList_2 : ArgumentDeclarationList {
  public ArgumentDeclarationList_2(Parser yyq):base(yyq,
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((Declaration)(yyq.StackAt(0).m_value))
	){}}

public class IntArgumentDeclarationList_1 : IntArgumentDeclarationList {
  public IntArgumentDeclarationList_1(Parser yyq):base(yyq,
	((IntDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class VectorArgumentDeclarationList_1 : VectorArgumentDeclarationList {
  public VectorArgumentDeclarationList_1(Parser yyq):base(yyq,
	((VectorDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class Declaration_1 : Declaration {
  public Declaration_1(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(1).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntDeclaration_1 : IntDeclaration {
  public IntDeclaration_1(Parser yyq):base(yyq,
	((INTEGER_TYPE)(yyq.StackAt(1).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VectorDeclaration_1 : VectorDeclaration {
  public VectorDeclaration_1(Parser yyq):base(yyq,
	((VECTOR_TYPE)(yyq.StackAt(1).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class CompoundStatement_1 : CompoundStatement {
  public CompoundStatement_1(Parser yyq):base(yyq){}}

public class CompoundStatement_2 : CompoundStatement {
  public CompoundStatement_2(Parser yyq):base(yyq,
	((StatementList)(yyq.StackAt(1).m_value))
	){}}

public class StatementList_1 : StatementList {
  public StatementList_1(Parser yyq):base(yyq,
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class StatementList_2 : StatementList {
  public StatementList_2(Parser yyq):base(yyq,
	((StatementList)(yyq.StackAt(1).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class EmptyStatement_1 : EmptyStatement {
  public EmptyStatement_1(Parser yyq):base(yyq){}}

public class Statement_1 : Statement {
  public Statement_1(Parser yyq):base(yyq,
	((EmptyStatement)(yyq.StackAt(1).m_value))
	){}}

public class Statement_2 : Statement {
  public Statement_2(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(1).m_value))
	){}}

public class Statement_3 : Statement {
  public Statement_3(Parser yyq):base(yyq,
	((Assignment)(yyq.StackAt(1).m_value))
	){}}

public class Statement_4 : Statement {
  public Statement_4(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class Statement_5 : Statement {
  public Statement_5(Parser yyq):base(yyq,
	((ReturnStatement)(yyq.StackAt(1).m_value))
	){}}

public class Statement_6 : Statement {
  public Statement_6(Parser yyq):base(yyq,
	((JumpLabel)(yyq.StackAt(1).m_value))
	){}}

public class Statement_7 : Statement {
  public Statement_7(Parser yyq):base(yyq,
	((JumpStatement)(yyq.StackAt(1).m_value))
	){}}

public class Statement_8 : Statement {
  public Statement_8(Parser yyq):base(yyq,
	((StateChange)(yyq.StackAt(1).m_value))
	){}}

public class Statement_9 : Statement {
  public Statement_9(Parser yyq):base(yyq,
	((IfStatement)(yyq.StackAt(0).m_value))
	){}}

public class Statement_10 : Statement {
  public Statement_10(Parser yyq):base(yyq,
	((WhileStatement)(yyq.StackAt(0).m_value))
	){}}

public class Statement_11 : Statement {
  public Statement_11(Parser yyq):base(yyq,
	((DoWhileStatement)(yyq.StackAt(0).m_value))
	){}}

public class Statement_12 : Statement {
  public Statement_12(Parser yyq):base(yyq,
	((ForLoop)(yyq.StackAt(0).m_value))
	){}}

public class Statement_13 : Statement {
  public Statement_13(Parser yyq):base(yyq,
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class JumpLabel_1 : JumpLabel {
  public JumpLabel_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class JumpStatement_1 : JumpStatement {
  public JumpStatement_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class StateChange_1 : StateChange {
  public StateChange_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class StateChange_2 : StateChange {
  public StateChange_2(Parser yyq):base(yyq,
	((DEFAULT_STATE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IfStatement_1 : IfStatement {
  public IfStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class IfStatement_2 : IfStatement {
  public IfStatement_2(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(4).m_value))
	, 
	((Statement)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class IfStatement_3 : IfStatement {
  public IfStatement_3(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class IfStatement_4 : IfStatement {
  public IfStatement_4(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(4).m_value))
	, 
	((Statement)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class WhileStatement_1 : WhileStatement {
  public WhileStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class WhileStatement_2 : WhileStatement {
  public WhileStatement_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class DoWhileStatement_1 : DoWhileStatement {
  public DoWhileStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(5).m_value))
	){}}

public class DoWhileStatement_2 : DoWhileStatement {
  public DoWhileStatement_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(5).m_value))
	){}}

public class ForLoop_1 : ForLoop {
  public ForLoop_1(Parser yyq):base(yyq,
	((ForLoopStatement)(yyq.StackAt(6).m_value))
	, 
	((Expression)(yyq.StackAt(4).m_value))
	, 
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class ForLoop_2 : ForLoop {
  public ForLoop_2(Parser yyq):base(yyq,null, 
	((Expression)(yyq.StackAt(4).m_value))
	, 
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_1 : ForLoopStatement {
  public ForLoopStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_2 : ForLoopStatement {
  public ForLoopStatement_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_3 : ForLoopStatement {
  public ForLoopStatement_3(Parser yyq):base(yyq,
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_4 : ForLoopStatement {
  public ForLoopStatement_4(Parser yyq):base(yyq,
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	){}}

public class Assignment_1 : Assignment {
  public Assignment_1(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class Assignment_2 : Assignment {
  public Assignment_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	){}}

public class SimpleAssignment_1 : SimpleAssignment {
  public SimpleAssignment_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_2 : SimpleAssignment {
  public SimpleAssignment_2(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_3 : SimpleAssignment {
  public SimpleAssignment_3(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_4 : SimpleAssignment {
  public SimpleAssignment_4(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_5 : SimpleAssignment {
  public SimpleAssignment_5(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_6 : SimpleAssignment {
  public SimpleAssignment_6(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_7 : SimpleAssignment {
  public SimpleAssignment_7(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_8 : SimpleAssignment {
  public SimpleAssignment_8(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_9 : SimpleAssignment {
  public SimpleAssignment_9(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_10 : SimpleAssignment {
  public SimpleAssignment_10(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_11 : SimpleAssignment {
  public SimpleAssignment_11(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_12 : SimpleAssignment {
  public SimpleAssignment_12(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_13 : SimpleAssignment {
  public SimpleAssignment_13(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_14 : SimpleAssignment {
  public SimpleAssignment_14(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_15 : SimpleAssignment {
  public SimpleAssignment_15(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_16 : SimpleAssignment {
  public SimpleAssignment_16(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_17 : SimpleAssignment {
  public SimpleAssignment_17(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_18 : SimpleAssignment {
  public SimpleAssignment_18(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_19 : SimpleAssignment {
  public SimpleAssignment_19(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_20 : SimpleAssignment {
  public SimpleAssignment_20(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_21 : SimpleAssignment {
  public SimpleAssignment_21(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_22 : SimpleAssignment {
  public SimpleAssignment_22(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_23 : SimpleAssignment {
  public SimpleAssignment_23(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_24 : SimpleAssignment {
  public SimpleAssignment_24(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class ReturnStatement_1 : ReturnStatement {
  public ReturnStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ReturnStatement_2 : ReturnStatement {
  public ReturnStatement_2(Parser yyq):base(yyq){}}

public class Constant_1 : Constant {
  public Constant_1(Parser yyq):base(yyq,"integer", 
	((INTEGER_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Constant_2 : Constant {
  public Constant_2(Parser yyq):base(yyq,"integer", 
	((HEX_INTEGER_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Constant_3 : Constant {
  public Constant_3(Parser yyq):base(yyq,"float", 
	((FLOAT_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Constant_4 : Constant {
  public Constant_4(Parser yyq):base(yyq,"string", 
	((STRING_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class ListConstant_1 : ListConstant {
  public ListConstant_1(Parser yyq):base(yyq,
	((ArgumentList)(yyq.StackAt(1).m_value))
	){}}

public class VectorConstant_1 : VectorConstant {
  public VectorConstant_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(5).m_value))
	, 
	((Expression)(yyq.StackAt(3).m_value))
	, 
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class RotationConstant_1 : RotationConstant {
  public RotationConstant_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(7).m_value))
	, 
	((Expression)(yyq.StackAt(5).m_value))
	, 
	((Expression)(yyq.StackAt(3).m_value))
	, 
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class ConstantExpression_1 : ConstantExpression {
  public ConstantExpression_1(Parser yyq):base(yyq,
	((Constant)(yyq.StackAt(0).m_value))
	){}}

public class IdentExpression_1 : IdentExpression {
  public IdentExpression_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IdentDotExpression_1 : IdentDotExpression {
  public IdentDotExpression_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IncrementDecrementExpression_1 : IncrementDecrementExpression {
  public IncrementDecrementExpression_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_2 : IncrementDecrementExpression {
  public IncrementDecrementExpression_2(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_3 : IncrementDecrementExpression {
  public IncrementDecrementExpression_3(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_4 : IncrementDecrementExpression {
  public IncrementDecrementExpression_4(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_5 : IncrementDecrementExpression {
  public IncrementDecrementExpression_5(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext, 
	((INCREMENT)(yyq.StackAt(1).m_value))
	.yytext, false){}}

public class IncrementDecrementExpression_6 : IncrementDecrementExpression {
  public IncrementDecrementExpression_6(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext, 
	((DECREMENT)(yyq.StackAt(1).m_value))
	.yytext, false){}}

public class IncrementDecrementExpression_7 : IncrementDecrementExpression {
  public IncrementDecrementExpression_7(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext), 
	((INCREMENT)(yyq.StackAt(3).m_value))
	.yytext, false){}}

public class IncrementDecrementExpression_8 : IncrementDecrementExpression {
  public IncrementDecrementExpression_8(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext), 
	((DECREMENT)(yyq.StackAt(3).m_value))
	.yytext, false){}}

public class FunctionCallExpression_1 : FunctionCallExpression {
  public FunctionCallExpression_1(Parser yyq):base(yyq,
	((FunctionCall)(yyq.StackAt(0).m_value))
	){}}

public class BinaryExpression_1 : BinaryExpression {
  public BinaryExpression_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PLUS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_2 : BinaryExpression {
  public BinaryExpression_2(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((MINUS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_3 : BinaryExpression {
  public BinaryExpression_3(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STAR)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_4 : BinaryExpression {
  public BinaryExpression_4(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((SLASH)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_5 : BinaryExpression {
  public BinaryExpression_5(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PERCENT)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_6 : BinaryExpression {
  public BinaryExpression_6(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((AMP)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_7 : BinaryExpression {
  public BinaryExpression_7(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STROKE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_8 : BinaryExpression {
  public BinaryExpression_8(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((CARET)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_9 : BinaryExpression {
  public BinaryExpression_9(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((RIGHT_ANGLE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_10 : BinaryExpression {
  public BinaryExpression_10(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((LEFT_ANGLE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_11 : BinaryExpression {
  public BinaryExpression_11(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_12 : BinaryExpression {
  public BinaryExpression_12(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EXCLAMATION_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_13 : BinaryExpression {
  public BinaryExpression_13(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((LESS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_14 : BinaryExpression {
  public BinaryExpression_14(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((GREATER_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_15 : BinaryExpression {
  public BinaryExpression_15(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((AMP_AMP)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_16 : BinaryExpression {
  public BinaryExpression_16(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STROKE_STROKE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_17 : BinaryExpression {
  public BinaryExpression_17(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((LEFT_SHIFT)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_18 : BinaryExpression {
  public BinaryExpression_18(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((RIGHT_SHIFT)(yyq.StackAt(1).m_value))
	.yytext){}}

public class UnaryExpression_1 : UnaryExpression {
  public UnaryExpression_1(Parser yyq):base(yyq,
	((EXCLAMATION)(yyq.StackAt(1).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class UnaryExpression_2 : UnaryExpression {
  public UnaryExpression_2(Parser yyq):base(yyq,
	((MINUS)(yyq.StackAt(1).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class UnaryExpression_3 : UnaryExpression {
  public UnaryExpression_3(Parser yyq):base(yyq,
	((TILDE)(yyq.StackAt(1).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ParenthesisExpression_1 : ParenthesisExpression {
  public ParenthesisExpression_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class ParenthesisExpression_2 : ParenthesisExpression {
  public ParenthesisExpression_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(1).m_value))
	){}}

public class TypecastExpression_1 : TypecastExpression {
  public TypecastExpression_1(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(2).m_value))
	.yytext, 
	((Constant)(yyq.StackAt(0).m_value))
	){}}

public class TypecastExpression_2 : TypecastExpression {
  public TypecastExpression_2(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(2).m_value))
	.yytext, new IdentExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext)){}}

public class TypecastExpression_3 : TypecastExpression {
  public TypecastExpression_3(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(4).m_value))
	.yytext, new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext)){}}

public class TypecastExpression_4 : TypecastExpression {
  public TypecastExpression_4(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(3).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_5 : TypecastExpression {
  public TypecastExpression_5(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(5).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_6 : TypecastExpression {
  public TypecastExpression_6(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(3).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_7 : TypecastExpression {
  public TypecastExpression_7(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(5).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_8 : TypecastExpression {
  public TypecastExpression_8(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(2).m_value))
	.yytext, 
	((FunctionCall)(yyq.StackAt(0).m_value))
	){}}

public class TypecastExpression_9 : TypecastExpression {
  public TypecastExpression_9(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(4).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class FunctionCall_1 : FunctionCall {
  public FunctionCall_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((ArgumentList)(yyq.StackAt(1).m_value))
	){}}

public class ArgumentList_1 : ArgumentList {
  public ArgumentList_1(Parser yyq):base(yyq,
	((Argument)(yyq.StackAt(0).m_value))
	){}}

public class ArgumentList_2 : ArgumentList {
  public ArgumentList_2(Parser yyq):base(yyq,
	((ArgumentList)(yyq.StackAt(2).m_value))
	, 
	((Argument)(yyq.StackAt(0).m_value))
	){}}

public class ExpressionArgument_1 : ExpressionArgument {
  public ExpressionArgument_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class Typename_1 : Typename {
  public Typename_1(Parser yyq):base(yyq,
	((INTEGER_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_2 : Typename {
  public Typename_2(Parser yyq):base(yyq,
	((FLOAT_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_3 : Typename {
  public Typename_3(Parser yyq):base(yyq,
	((STRING_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_4 : Typename {
  public Typename_4(Parser yyq):base(yyq,
	((KEY_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_5 : Typename {
  public Typename_5(Parser yyq):base(yyq,
	((VECTOR_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_6 : Typename {
  public Typename_6(Parser yyq):base(yyq,
	((ROTATION_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_7 : Typename {
  public Typename_7(Parser yyq):base(yyq,
	((LIST_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_1 : Event {
  public Event_1(Parser yyq):base(yyq,
	((AT_ROT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_2 : Event {
  public Event_2(Parser yyq):base(yyq,
	((AT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_3 : Event {
  public Event_3(Parser yyq):base(yyq,
	((ATTACH_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_4 : Event {
  public Event_4(Parser yyq):base(yyq,
	((CONTROL_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_5 : Event {
  public Event_5(Parser yyq):base(yyq,
	((DATASERVER_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_6 : Event {
  public Event_6(Parser yyq):base(yyq,
	((EMAIL_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_7 : Event {
  public Event_7(Parser yyq):base(yyq,
	((HTTP_RESPONSE_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_8 : Event {
  public Event_8(Parser yyq):base(yyq,
	((LINK_MESSAGE_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_9 : Event {
  public Event_9(Parser yyq):base(yyq,
	((LISTEN_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_10 : Event {
  public Event_10(Parser yyq):base(yyq,
	((MONEY_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_11 : Event {
  public Event_11(Parser yyq):base(yyq,
	((OBJECT_REZ_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_12 : Event {
  public Event_12(Parser yyq):base(yyq,
	((REMOTE_DATA_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_13 : Event {
  public Event_13(Parser yyq):base(yyq,
	((HTTP_REQUEST_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_1 : VoidArgEvent {
  public VoidArgEvent_1(Parser yyq):base(yyq,
	((STATE_ENTRY_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_2 : VoidArgEvent {
  public VoidArgEvent_2(Parser yyq):base(yyq,
	((STATE_EXIT_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_3 : VoidArgEvent {
  public VoidArgEvent_3(Parser yyq):base(yyq,
	((MOVING_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_4 : VoidArgEvent {
  public VoidArgEvent_4(Parser yyq):base(yyq,
	((MOVING_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_5 : VoidArgEvent {
  public VoidArgEvent_5(Parser yyq):base(yyq,
	((NO_SENSOR_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_6 : VoidArgEvent {
  public VoidArgEvent_6(Parser yyq):base(yyq,
	((NOT_AT_ROT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_7 : VoidArgEvent {
  public VoidArgEvent_7(Parser yyq):base(yyq,
	((NOT_AT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_8 : VoidArgEvent {
  public VoidArgEvent_8(Parser yyq):base(yyq,
	((TIMER_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_1 : IntArgEvent {
  public IntArgEvent_1(Parser yyq):base(yyq,
	((CHANGED_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_2 : IntArgEvent {
  public IntArgEvent_2(Parser yyq):base(yyq,
	((COLLISION_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_3 : IntArgEvent {
  public IntArgEvent_3(Parser yyq):base(yyq,
	((COLLISION_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_4 : IntArgEvent {
  public IntArgEvent_4(Parser yyq):base(yyq,
	((COLLISION_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_5 : IntArgEvent {
  public IntArgEvent_5(Parser yyq):base(yyq,
	((ON_REZ_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_6 : IntArgEvent {
  public IntArgEvent_6(Parser yyq):base(yyq,
	((RUN_TIME_PERMISSIONS_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_7 : IntArgEvent {
  public IntArgEvent_7(Parser yyq):base(yyq,
	((SENSOR_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_8 : IntArgEvent {
  public IntArgEvent_8(Parser yyq):base(yyq,
	((TOUCH_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_9 : IntArgEvent {
  public IntArgEvent_9(Parser yyq):base(yyq,
	((TOUCH_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_10 : IntArgEvent {
  public IntArgEvent_10(Parser yyq):base(yyq,
	((TOUCH_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VectorArgEvent_1 : VectorArgEvent {
  public VectorArgEvent_1(Parser yyq):base(yyq,
	((LAND_COLLISION_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VectorArgEvent_2 : VectorArgEvent {
  public VectorArgEvent_2(Parser yyq):base(yyq,
	((LAND_COLLISION_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VectorArgEvent_3 : VectorArgEvent {
  public VectorArgEvent_3(Parser yyq):base(yyq,
	((LAND_COLLISION_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}
public class yyLSLSyntax
: YyParser {
  public override object Action(Parser yyq,SYMBOL yysym, int yyact) {
    switch(yyact) {
	 case -1: break; //// keep compiler happy
}  return null; }

public class ArgumentDeclarationList_3 : ArgumentDeclarationList {
  public ArgumentDeclarationList_3(Parser yyq):base(yyq){}}

public class ArgumentList_3 : ArgumentList {
  public ArgumentList_3(Parser yyq):base(yyq){}}

public class ArgumentDeclarationList_4 : ArgumentDeclarationList {
  public ArgumentDeclarationList_4(Parser yyq):base(yyq){}}

public class ArgumentDeclarationList_5 : ArgumentDeclarationList {
  public ArgumentDeclarationList_5(Parser yyq):base(yyq){}}

public class ArgumentList_4 : ArgumentList {
  public ArgumentList_4(Parser yyq):base(yyq){}}
public yyLSLSyntax
():base() { arr = new int[] { 
101,4,6,52,0,
46,0,53,0,102,
20,103,4,28,76,
0,83,0,76,0,
80,0,114,0,111,
0,103,0,114,0,
97,0,109,0,82,
0,111,0,111,0,
116,0,1,96,1,
2,104,18,1,2761,
102,2,0,105,5,
346,1,0,106,18,
1,0,0,2,0,
1,1,107,18,1,
1,108,20,109,4,
18,76,0,73,0,
83,0,84,0,95,
0,84,0,89,0,
80,0,69,0,1,
57,1,1,2,0,
1,2,110,18,1,
2,111,20,112,4,
26,82,0,79,0,
84,0,65,0,84,
0,73,0,79,0,
78,0,95,0,84,
0,89,0,80,0,
69,0,1,56,1,
1,2,0,1,3,
113,18,1,3,114,
20,115,4,22,86,
0,69,0,67,0,
84,0,79,0,82,
0,95,0,84,0,
89,0,80,0,69,
0,1,55,1,1,
2,0,1,4,116,
18,1,4,117,20,
118,4,16,75,0,
69,0,89,0,95,
0,84,0,89,0,
80,0,69,0,1,
54,1,1,2,0,
1,5,119,18,1,
5,120,20,121,4,
22,83,0,84,0,
82,0,73,0,78,
0,71,0,95,0,
84,0,89,0,80,
0,69,0,1,53,
1,1,2,0,1,
6,122,18,1,6,
123,20,124,4,20,
70,0,76,0,79,
0,65,0,84,0,
95,0,84,0,89,
0,80,0,69,0,
1,52,1,1,2,
0,1,7,125,18,
1,7,126,20,127,
4,24,73,0,78,
0,84,0,69,0,
71,0,69,0,82,
0,95,0,84,0,
89,0,80,0,69,
0,1,51,1,1,
2,0,1,8,128,
18,1,8,129,20,
130,4,16,84,0,
121,0,112,0,101,
0,110,0,97,0,
109,0,101,0,1,
113,1,2,2,0,
1,9,131,18,1,
9,132,20,133,4,
10,73,0,68,0,
69,0,78,0,84,
0,1,92,1,1,
2,0,1,10,134,
18,1,10,135,20,
136,4,20,76,0,
69,0,70,0,84,
0,95,0,80,0,
65,0,82,0,69,
0,78,0,1,16,
1,1,2,0,1,
18,137,18,1,18,
129,2,0,1,19,
138,18,1,19,132,
2,0,1,20,139,
18,1,20,140,20,
141,4,46,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,76,0,105,0,
115,0,116,0,1,
107,1,2,2,0,
1,21,142,18,1,
21,143,20,144,4,
10,67,0,79,0,
77,0,77,0,65,
0,1,14,1,1,
2,0,1,1694,145,
18,1,1694,146,20,
147,4,32,70,0,
111,0,114,0,76,
0,111,0,111,0,
112,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,132,1,2,2,
0,1,1695,148,18,
1,1695,143,2,0,
1,30,149,18,1,
30,150,20,151,4,
22,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,1,110,
1,2,2,0,1,
31,152,18,1,31,
153,20,154,4,22,
82,0,73,0,71,
0,72,0,84,0,
95,0,80,0,65,
0,82,0,69,0,
78,0,1,17,1,
1,2,0,1,32,
155,18,1,32,156,
20,157,4,20,76,
0,69,0,70,0,
84,0,95,0,66,
0,82,0,65,0,
67,0,69,0,1,
12,1,1,2,0,
1,1114,158,18,1,
1114,132,2,0,1,
1152,159,18,1,1152,
160,20,161,4,32,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,1,123,1,
2,2,0,1,1117,
162,18,1,1117,163,
20,164,4,28,80,
0,69,0,82,0,
67,0,69,0,78,
0,84,0,95,0,
69,0,81,0,85,
0,65,0,76,0,
83,0,1,10,1,
1,2,0,1,40,
165,18,1,40,132,
2,0,1,41,166,
18,1,41,135,2,
0,1,42,167,18,
1,42,168,20,169,
4,20,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,141,1,
2,2,0,1,43,
170,18,1,43,171,
20,172,4,22,82,
0,73,0,71,0,
72,0,84,0,95,
0,83,0,72,0,
73,0,70,0,84,
0,1,41,1,1,
2,0,1,44,173,
18,1,44,132,2,
0,1,1159,174,18,
1,1159,168,2,0,
1,46,175,18,1,
46,176,20,177,4,
12,80,0,69,0,
82,0,73,0,79,
0,68,0,1,24,
1,1,2,0,1,
47,178,18,1,47,
132,2,0,1,48,
179,18,1,48,180,
20,181,4,18,68,
0,69,0,67,0,
82,0,69,0,77,
0,69,0,78,0,
84,0,1,5,1,
1,2,0,1,49,
182,18,1,49,183,
20,184,4,18,73,
0,78,0,67,0,
82,0,69,0,77,
0,69,0,78,0,
84,0,1,4,1,
1,2,0,1,50,
185,18,1,50,180,
2,0,1,51,186,
18,1,51,183,2,
0,1,52,187,18,
1,52,135,2,0,
1,2281,188,18,1,
2281,160,2,0,1,
1730,189,18,1,1730,
160,2,0,1,1731,
190,18,1,1731,191,
20,192,4,18,83,
0,69,0,77,0,
73,0,67,0,79,
0,76,0,79,0,
78,0,1,11,1,
1,2,0,1,61,
193,18,1,61,129,
2,0,1,62,194,
18,1,62,153,2,
0,1,63,195,18,
1,63,132,2,0,
1,65,196,18,1,
65,176,2,0,1,
66,197,18,1,66,
132,2,0,1,67,
198,18,1,67,180,
2,0,1,68,199,
18,1,68,183,2,
0,1,69,200,18,
1,69,180,2,0,
1,70,201,18,1,
70,183,2,0,1,
71,202,18,1,71,
135,2,0,1,73,
203,18,1,73,168,
2,0,1,74,204,
18,1,74,153,2,
0,1,1189,205,18,
1,1189,206,20,207,
4,22,83,0,84,
0,65,0,82,0,
95,0,69,0,81,
0,85,0,65,0,
76,0,83,0,1,
8,1,1,2,0,
1,76,208,18,1,
76,209,20,210,4,
20,76,0,69,0,
70,0,84,0,95,
0,83,0,72,0,
73,0,70,0,84,
0,1,40,1,1,
2,0,1,1153,211,
18,1,1153,212,20,
213,4,24,83,0,
76,0,65,0,83,
0,72,0,95,0,
69,0,81,0,85,
0,65,0,76,0,
83,0,1,9,1,
1,2,0,1,79,
214,18,1,79,215,
20,216,4,10,84,
0,73,0,76,0,
68,0,69,0,1,
36,1,1,2,0,
1,1195,217,18,1,
1195,168,2,0,1,
82,218,18,1,82,
168,2,0,1,1123,
219,18,1,1123,168,
2,0,1,85,220,
18,1,85,221,20,
222,4,26,83,0,
84,0,82,0,79,
0,75,0,69,0,
95,0,83,0,84,
0,82,0,79,0,
75,0,69,0,1,
39,1,1,2,0,
1,2699,223,18,1,
2699,224,20,225,4,
34,67,0,111,0,
109,0,112,0,111,
0,117,0,110,0,
100,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,118,1,2,2,
0,1,89,226,18,
1,89,227,20,228,
4,10,77,0,73,
0,78,0,85,0,
83,0,1,19,1,
1,2,0,1,2318,
229,18,1,2318,191,
2,0,1,93,230,
18,1,93,168,2,
0,1,2708,231,18,
1,2708,168,2,0,
1,97,232,18,1,
97,233,20,234,4,
14,65,0,77,0,
80,0,95,0,65,
0,77,0,80,0,
1,38,1,1,2,
0,1,102,235,18,
1,102,236,20,237,
4,22,69,0,88,
0,67,0,76,0,
65,0,77,0,65,
0,84,0,73,0,
79,0,78,0,1,
37,1,1,2,0,
1,1775,238,18,1,
1775,153,2,0,1,
107,239,18,1,107,
168,2,0,1,2337,
240,18,1,2337,153,
2,0,1,1224,241,
18,1,1224,160,2,
0,1,1225,242,18,
1,1225,243,20,244,
4,24,77,0,73,
0,78,0,85,0,
83,0,95,0,69,
0,81,0,85,0,
65,0,76,0,83,
0,1,7,1,1,
2,0,1,112,245,
18,1,112,246,20,
247,4,28,71,0,
82,0,69,0,65,
0,84,0,69,0,
82,0,95,0,69,
0,81,0,85,0,
65,0,76,0,83,
0,1,32,1,1,
2,0,1,1188,248,
18,1,1188,160,2,
0,1,1231,249,18,
1,1231,168,2,0,
1,118,250,18,1,
118,168,2,0,1,
1737,251,18,1,1737,
168,2,0,1,124,
252,18,1,124,253,
20,254,4,22,76,
0,69,0,83,0,
83,0,95,0,69,
0,81,0,85,0,
65,0,76,0,83,
0,1,31,1,1,
2,0,1,2738,255,
18,1,2738,191,2,
0,1,130,256,18,
1,130,168,2,0,
1,1803,257,18,1,
1803,258,20,259,4,
18,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,1,
120,1,2,2,0,
1,1804,260,18,1,
1804,261,20,262,4,
4,68,0,79,0,
1,44,1,1,2,
0,1,2591,263,18,
1,2591,264,20,265,
4,20,83,0,116,
0,97,0,116,0,
101,0,69,0,118,
0,101,0,110,0,
116,0,1,103,1,
2,2,0,1,2364,
266,18,1,2364,258,
2,0,1,137,267,
18,1,137,268,20,
269,4,36,69,0,
88,0,67,0,76,
0,65,0,77,0,
65,0,84,0,73,
0,79,0,78,0,
95,0,69,0,81,
0,85,0,65,0,
76,0,83,0,1,
30,1,1,2,0,
1,2293,270,18,1,
2293,191,2,0,1,
1701,271,18,1,1701,
168,2,0,1,1756,
272,18,1,1756,191,
2,0,1,2527,273,
18,1,2527,224,2,
0,1,143,274,18,
1,143,168,2,0,
1,2299,275,18,1,
2299,168,2,0,1,
1260,276,18,1,1260,
160,2,0,1,1261,
277,18,1,1261,278,
20,279,4,22,80,
0,76,0,85,0,
83,0,95,0,69,
0,81,0,85,0,
65,0,76,0,83,
0,1,6,1,1,
2,0,1,2528,280,
18,1,2528,281,20,
282,4,10,69,0,
118,0,101,0,110,
0,116,0,1,114,
1,2,2,0,1,
2758,283,18,1,2758,
284,20,285,4,50,
71,0,108,0,111,
0,98,0,97,0,
108,0,86,0,97,
0,114,0,105,0,
97,0,98,0,108,
0,101,0,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
1,98,1,2,2,
0,1,2680,286,18,
1,2680,287,20,288,
4,12,83,0,116,
0,97,0,116,0,
101,0,115,0,1,
100,1,2,2,0,
1,151,289,18,1,
151,290,20,291,4,
26,69,0,81,0,
85,0,65,0,76,
0,83,0,95,0,
69,0,81,0,85,
0,65,0,76,0,
83,0,1,29,1,
1,2,0,1,1267,
292,18,1,1267,168,
2,0,1,157,293,
18,1,157,168,2,
0,1,1773,294,18,
1,1773,146,2,0,
1,1832,295,18,1,
1832,258,2,0,1,
1833,296,18,1,1833,
297,20,298,4,10,
87,0,72,0,73,
0,76,0,69,0,
1,45,1,1,2,
0,1,1834,299,18,
1,1834,135,2,0,
1,166,300,18,1,
166,301,20,302,4,
20,76,0,69,0,
70,0,84,0,95,
0,65,0,78,0,
71,0,76,0,69,
0,1,25,1,1,
2,0,1,1840,303,
18,1,1840,168,2,
0,1,172,304,18,
1,172,168,2,0,
1,2335,305,18,1,
2335,146,2,0,1,
1296,306,18,1,1296,
160,2,0,1,1297,
307,18,1,1297,308,
20,309,4,12,69,
0,81,0,85,0,
65,0,76,0,83,
0,1,15,1,1,
2,0,1,2413,310,
18,1,2413,311,20,
312,4,26,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,76,0,105,0,
115,0,116,0,1,
119,1,2,2,0,
1,1859,313,18,1,
1859,153,2,0,1,
1860,314,18,1,1860,
191,2,0,1,188,
315,18,1,188,168,
2,0,1,182,316,
18,1,182,317,20,
318,4,22,82,0,
73,0,71,0,72,
0,84,0,95,0,
65,0,78,0,71,
0,76,0,69,0,
1,26,1,1,2,
0,1,199,319,18,
1,199,320,20,321,
4,10,67,0,65,
0,82,0,69,0,
84,0,1,35,1,
1,2,0,1,1871,
322,18,1,1871,160,
2,0,1,1872,323,
18,1,1872,153,2,
0,1,1873,324,18,
1,1873,191,2,0,
1,1875,325,18,1,
1875,297,2,0,1,
205,326,18,1,205,
168,2,0,1,2515,
327,18,1,2515,135,
2,0,1,1882,328,
18,1,1882,168,2,
0,1,2227,329,18,
1,2227,258,2,0,
1,2589,330,18,1,
2589,331,20,332,4,
32,73,0,110,0,
116,0,65,0,114,
0,103,0,83,0,
116,0,97,0,116,
0,101,0,69,0,
118,0,101,0,110,
0,116,0,1,105,
1,2,2,0,1,
2590,333,18,1,2590,
334,20,335,4,34,
86,0,111,0,105,
0,100,0,65,0,
114,0,103,0,83,
0,116,0,97,0,
116,0,101,0,69,
0,118,0,101,0,
110,0,116,0,1,
104,1,2,2,0,
1,217,336,18,1,
217,337,20,338,4,
12,83,0,84,0,
82,0,79,0,75,
0,69,0,1,34,
1,1,2,0,1,
1332,339,18,1,1332,
160,2,0,1,1335,
340,18,1,1335,163,
2,0,1,223,341,
18,1,223,168,2,
0,1,1341,342,18,
1,1341,168,2,0,
1,1901,343,18,1,
1901,153,2,0,1,
1303,344,18,1,1303,
168,2,0,1,2462,
345,18,1,2462,258,
2,0,1,236,346,
18,1,236,347,20,
348,4,6,65,0,
77,0,80,0,1,
33,1,1,2,0,
1,2466,349,18,1,
2466,224,2,0,1,
2467,350,18,1,2467,
150,2,0,1,2468,
351,18,1,2468,352,
20,353,4,10,83,
0,84,0,65,0,
84,0,69,0,1,
48,1,1,2,0,
1,2469,354,18,1,
2469,132,2,0,1,
242,355,18,1,242,
168,2,0,1,2471,
356,18,1,2471,357,
20,358,4,52,76,
0,65,0,78,0,
68,0,95,0,67,
0,79,0,76,0,
76,0,73,0,83,
0,73,0,79,0,
78,0,95,0,83,
0,84,0,65,0,
82,0,84,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,71,1,1,
2,0,1,2472,359,
18,1,2472,360,20,
361,4,48,76,0,
65,0,78,0,68,
0,95,0,67,0,
79,0,76,0,76,
0,73,0,83,0,
73,0,79,0,78,
0,95,0,69,0,
78,0,68,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,70,1,1,
2,0,1,2473,362,
18,1,2473,363,20,
364,4,40,76,0,
65,0,78,0,68,
0,95,0,67,0,
79,0,76,0,76,
0,73,0,83,0,
73,0,79,0,78,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,69,
1,1,2,0,1,
2474,365,18,1,2474,
366,20,367,4,34,
84,0,79,0,85,
0,67,0,72,0,
95,0,83,0,84,
0,65,0,82,0,
84,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
89,1,1,2,0,
1,2475,368,18,1,
2475,369,20,370,4,
30,84,0,79,0,
85,0,67,0,72,
0,95,0,69,0,
78,0,68,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,90,1,1,
2,0,1,2476,371,
18,1,2476,372,20,
373,4,22,84,0,
79,0,85,0,67,
0,72,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,88,1,1,2,
0,1,2477,374,18,
1,2477,375,20,376,
4,24,83,0,69,
0,78,0,83,0,
79,0,82,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,84,1,1,
2,0,1,2478,377,
18,1,2478,378,20,
379,4,52,82,0,
85,0,78,0,95,
0,84,0,73,0,
77,0,69,0,95,
0,80,0,69,0,
82,0,77,0,73,
0,83,0,83,0,
73,0,79,0,78,
0,83,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,83,1,1,2,
0,1,2479,380,18,
1,2479,381,20,382,
4,24,79,0,78,
0,95,0,82,0,
69,0,90,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,81,1,1,
2,0,1,2480,383,
18,1,2480,384,20,
385,4,42,67,0,
79,0,76,0,76,
0,73,0,83,0,
73,0,79,0,78,
0,95,0,83,0,
84,0,65,0,82,
0,84,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,64,1,1,2,
0,1,2481,386,18,
1,2481,387,20,388,
4,38,67,0,79,
0,76,0,76,0,
73,0,83,0,73,
0,79,0,78,0,
95,0,69,0,78,
0,68,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,63,1,1,2,
0,1,2482,389,18,
1,2482,390,20,391,
4,30,67,0,79,
0,76,0,76,0,
73,0,83,0,73,
0,79,0,78,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,62,1,
1,2,0,1,2483,
392,18,1,2483,393,
20,394,4,26,67,
0,72,0,65,0,
78,0,71,0,69,
0,68,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,61,1,1,2,
0,1,256,395,18,
1,256,396,20,397,
4,14,80,0,69,
0,82,0,67,0,
69,0,78,0,84,
0,1,22,1,1,
2,0,1,1371,398,
18,1,1371,212,2,
0,1,2486,399,18,
1,2486,400,20,401,
4,46,78,0,79,
0,84,0,95,0,
65,0,84,0,95,
0,82,0,79,0,
84,0,95,0,84,
0,65,0,82,0,
71,0,69,0,84,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,78,
1,1,2,0,1,
2487,402,18,1,2487,
403,20,404,4,30,
78,0,79,0,95,
0,83,0,69,0,
78,0,83,0,79,
0,82,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,77,1,1,2,
0,1,1931,405,18,
1,1931,258,2,0,
1,1932,406,18,1,
1932,407,20,408,4,
4,73,0,70,0,
1,42,1,1,2,
0,1,262,409,18,
1,262,168,2,0,
1,1377,410,18,1,
1377,168,2,0,1,
2492,411,18,1,2492,
412,20,413,4,36,
72,0,84,0,84,
0,80,0,95,0,
82,0,69,0,81,
0,85,0,69,0,
83,0,84,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,91,1,1,
2,0,1,1876,414,
18,1,1876,135,2,
0,1,2494,415,18,
1,2494,416,20,417,
4,32,79,0,66,
0,74,0,69,0,
67,0,84,0,95,
0,82,0,69,0,
90,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
80,1,1,2,0,
1,2495,418,18,1,
2495,419,20,420,4,
22,77,0,79,0,
78,0,69,0,89,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,74,
1,1,2,0,1,
1939,421,18,1,1939,
168,2,0,1,2497,
422,18,1,2497,423,
20,424,4,36,76,
0,73,0,78,0,
75,0,95,0,77,
0,69,0,83,0,
83,0,65,0,71,
0,69,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,72,1,1,2,
0,1,827,425,18,
1,827,168,2,0,
1,2499,426,18,1,
2499,427,20,428,4,
22,69,0,77,0,
65,0,73,0,76,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,67,
1,1,2,0,1,
2500,429,18,1,2500,
430,20,431,4,32,
68,0,65,0,84,
0,65,0,83,0,
69,0,82,0,86,
0,69,0,82,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,66,1,
1,2,0,1,2501,
432,18,1,2501,433,
20,434,4,26,67,
0,79,0,78,0,
84,0,82,0,79,
0,76,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,65,1,1,2,
0,1,2502,435,18,
1,2502,436,20,437,
4,24,65,0,84,
0,84,0,65,0,
67,0,72,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,60,1,1,
2,0,1,2503,438,
18,1,2503,439,20,
440,4,30,65,0,
84,0,95,0,84,
0,65,0,82,0,
71,0,69,0,84,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,59,
1,1,2,0,1,
2504,441,18,1,2504,
442,20,443,4,38,
65,0,84,0,95,
0,82,0,79,0,
84,0,95,0,84,
0,65,0,82,0,
71,0,69,0,84,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,58,
1,1,2,0,1,
277,444,18,1,277,
445,20,446,4,10,
83,0,76,0,65,
0,83,0,72,0,
1,21,1,1,2,
0,1,2506,447,18,
1,2506,135,2,0,
1,2507,448,18,1,
2507,114,2,0,1,
2508,449,18,1,2508,
132,2,0,1,2509,
450,18,1,2509,451,
20,452,4,34,86,
0,101,0,99,0,
116,0,111,0,114,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,1,112,
1,2,2,0,1,
2510,453,18,1,2510,
454,20,455,4,58,
86,0,101,0,99,
0,116,0,111,0,
114,0,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
76,0,105,0,115,
0,116,0,1,109,
1,2,2,0,1,
283,456,18,1,283,
168,2,0,1,2513,
457,18,1,2513,224,
2,0,1,2514,458,
18,1,2514,459,20,
460,4,22,73,0,
110,0,116,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
1,116,1,2,2,
0,1,1958,461,18,
1,1958,153,2,0,
1,2516,462,18,1,
2516,126,2,0,1,
2517,463,18,1,2517,
132,2,0,1,2518,
464,18,1,2518,465,
20,466,4,28,73,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,1,111,1,
2,2,0,1,2519,
467,18,1,2519,468,
20,469,4,52,73,
0,110,0,116,0,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,76,0,
105,0,115,0,116,
0,1,108,1,2,
2,0,1,1406,470,
18,1,1406,160,2,
0,1,1407,471,18,
1,1407,206,2,0,
1,2522,472,18,1,
2522,224,2,0,1,
2523,473,18,1,2523,
474,20,475,4,24,
86,0,111,0,105,
0,100,0,65,0,
114,0,103,0,69,
0,118,0,101,0,
110,0,116,0,1,
115,1,2,2,0,
1,2524,476,18,1,
2524,135,2,0,1,
2525,477,18,1,2525,
153,2,0,1,299,
478,18,1,299,479,
20,480,4,8,83,
0,84,0,65,0,
82,0,1,20,1,
1,2,0,1,1370,
481,18,1,1370,160,
2,0,1,2529,482,
18,1,2529,135,2,
0,1,305,483,18,
1,305,168,2,0,
1,2458,484,18,1,
2458,258,2,0,1,
2459,485,18,1,2459,
486,20,487,4,22,
82,0,73,0,71,
0,72,0,84,0,
95,0,66,0,82,
0,65,0,67,0,
69,0,1,13,1,
1,2,0,1,2538,
488,18,1,2538,140,
2,0,1,2540,489,
18,1,2540,153,2,
0,1,2542,490,18,
1,2542,224,2,0,
1,2464,491,18,1,
2464,486,2,0,1,
2544,492,18,1,2544,
493,20,494,4,18,
83,0,116,0,97,
0,116,0,101,0,
66,0,111,0,100,
0,121,0,1,102,
1,2,2,0,1,
1989,495,18,1,1989,
258,2,0,1,1990,
496,18,1,1990,497,
20,498,4,8,69,
0,76,0,83,0,
69,0,1,43,1,
1,2,0,1,2470,
499,18,1,2470,156,
2,0,1,322,500,
18,1,322,227,2,
0,1,1933,501,18,
1,1933,135,2,0,
1,883,502,18,1,
883,168,2,0,1,
2760,503,18,1,2760,
284,2,0,1,328,
504,18,1,328,168,
2,0,1,1443,505,
18,1,1443,243,2,
0,1,1449,506,18,
1,1449,168,2,0,
1,2485,507,18,1,
2485,508,20,509,4,
38,78,0,79,0,
84,0,95,0,65,
0,84,0,95,0,
84,0,65,0,82,
0,71,0,69,0,
84,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
79,1,1,2,0,
1,2488,510,18,1,
2488,511,20,512,4,
36,77,0,79,0,
86,0,73,0,78,
0,71,0,95,0,
83,0,84,0,65,
0,82,0,84,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,76,1,
1,2,0,1,2489,
513,18,1,2489,514,
20,515,4,32,77,
0,79,0,86,0,
73,0,78,0,71,
0,95,0,69,0,
78,0,68,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,75,1,1,
2,0,1,2490,516,
18,1,2490,517,20,
518,4,32,83,0,
84,0,65,0,84,
0,69,0,95,0,
69,0,88,0,73,
0,84,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,86,1,1,2,
0,1,2491,519,18,
1,2491,520,20,521,
4,34,83,0,84,
0,65,0,84,0,
69,0,95,0,69,
0,78,0,84,0,
82,0,89,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,85,1,1,
2,0,1,2493,522,
18,1,2493,523,20,
524,4,34,82,0,
69,0,77,0,79,
0,84,0,69,0,
95,0,68,0,65,
0,84,0,65,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,82,1,
1,2,0,1,1413,
525,18,1,1413,168,
2,0,1,346,526,
18,1,346,527,20,
528,4,8,80,0,
76,0,85,0,83,
0,1,18,1,1,
2,0,1,2496,529,
18,1,2496,530,20,
531,4,24,76,0,
73,0,83,0,84,
0,69,0,78,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,73,1,
1,2,0,1,2021,
532,18,1,2021,258,
2,0,1,2022,533,
18,1,2022,352,2,
0,1,352,534,18,
1,352,168,2,0,
1,2024,535,18,1,
2024,132,2,0,1,
2025,536,18,1,2025,
537,20,538,4,8,
74,0,85,0,77,
0,80,0,1,49,
1,1,2,0,1,
2026,539,18,1,2026,
132,2,0,1,2027,
540,18,1,2027,541,
20,542,4,4,65,
0,84,0,1,23,
1,1,2,0,1,
2028,543,18,1,2028,
132,2,0,1,2029,
544,18,1,2029,224,
2,0,1,2030,545,
18,1,2030,546,20,
547,4,14,70,0,
111,0,114,0,76,
0,111,0,111,0,
112,0,1,131,1,
2,2,0,1,2031,
548,18,1,2031,549,
20,550,4,32,68,
0,111,0,87,0,
104,0,105,0,108,
0,101,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,1,130,1,2,
2,0,1,2032,551,
18,1,2032,552,20,
553,4,28,87,0,
104,0,105,0,108,
0,101,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,1,129,1,2,
2,0,1,2033,554,
18,1,2033,555,20,
556,4,22,73,0,
102,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,128,1,2,2,
0,1,2034,557,18,
1,2034,558,20,559,
4,22,83,0,116,
0,97,0,116,0,
101,0,67,0,104,
0,97,0,110,0,
103,0,101,0,1,
127,1,2,2,0,
1,1478,560,18,1,
1478,160,2,0,1,
1479,561,18,1,1479,
278,2,0,1,2037,
562,18,1,2037,191,
2,0,1,2038,563,
18,1,2038,564,20,
565,4,18,74,0,
117,0,109,0,112,
0,76,0,97,0,
98,0,101,0,108,
0,1,125,1,2,
2,0,1,2039,566,
18,1,2039,191,2,
0,1,2040,567,18,
1,2040,568,20,569,
4,30,82,0,101,
0,116,0,117,0,
114,0,110,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,1,124,1,
2,2,0,1,2041,
570,18,1,2041,191,
2,0,1,1485,571,
18,1,1485,168,2,
0,1,372,572,18,
1,372,180,2,0,
1,373,573,18,1,
373,132,2,0,1,
374,574,18,1,374,
176,2,0,1,375,
575,18,1,375,132,
2,0,1,376,576,
18,1,376,183,2,
0,1,377,577,18,
1,377,132,2,0,
1,378,578,18,1,
378,176,2,0,1,
379,579,18,1,379,
132,2,0,1,380,
580,18,1,380,581,
20,582,4,16,67,
0,111,0,110,0,
115,0,116,0,97,
0,110,0,116,0,
1,137,1,2,2,
0,1,381,583,18,
1,381,301,2,0,
1,371,584,18,1,
371,585,20,586,4,
24,70,0,117,0,
110,0,99,0,116,
0,105,0,111,0,
110,0,67,0,97,
0,108,0,108,0,
1,133,1,2,2,
0,1,942,587,18,
1,942,168,2,0,
1,387,588,18,1,
387,168,2,0,1,
1514,589,18,1,1514,
160,2,0,1,1515,
590,18,1,1515,308,
2,0,1,2074,591,
18,1,2074,160,2,
0,1,2075,592,18,
1,2075,153,2,0,
1,406,593,18,1,
406,143,2,0,1,
1521,594,18,1,1521,
168,2,0,1,412,
595,18,1,412,168,
2,0,1,2484,596,
18,1,2484,597,20,
598,4,22,84,0,
73,0,77,0,69,
0,82,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,87,1,1,2,
0,1,2023,599,18,
1,2023,600,20,601,
4,26,68,0,69,
0,70,0,65,0,
85,0,76,0,84,
0,95,0,83,0,
84,0,65,0,84,
0,69,0,1,47,
1,1,2,0,1,
1442,602,18,1,1442,
160,2,0,1,2035,
603,18,1,2035,191,
2,0,1,2036,604,
18,1,2036,605,20,
606,4,26,74,0,
117,0,109,0,112,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,1,
126,1,2,2,0,
1,431,607,18,1,
431,143,2,0,1,
2105,608,18,1,2105,
258,2,0,1,2106,
609,18,1,2106,497,
2,0,1,1550,610,
18,1,1550,160,2,
0,1,437,611,18,
1,437,168,2,0,
1,2044,612,18,1,
2044,613,20,614,4,
28,69,0,109,0,
112,0,116,0,121,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,1,
121,1,2,2,0,
1,2045,615,18,1,
2045,191,2,0,1,
2586,616,18,1,2586,
264,2,0,1,1555,
617,18,1,1555,168,
2,0,1,2588,618,
18,1,2588,619,20,
620,4,38,86,0,
101,0,99,0,116,
0,111,0,114,0,
65,0,114,0,103,
0,83,0,116,0,
97,0,116,0,101,
0,69,0,118,0,
101,0,110,0,116,
0,1,106,1,2,
2,0,1,2511,621,
18,1,2511,153,2,
0,1,1001,622,18,
1,1001,585,2,0,
1,1002,623,18,1,
1002,581,2,0,1,
447,624,18,1,447,
317,2,0,1,2593,
625,18,1,2593,156,
2,0,1,2520,626,
18,1,2520,153,2,
0,1,1010,627,18,
1,1010,160,2,0,
1,1011,628,18,1,
1011,153,2,0,1,
1012,629,18,1,1012,
168,2,0,1,1013,
630,18,1,1013,153,
2,0,1,2685,631,
18,1,2685,132,2,
0,1,2686,632,18,
1,2686,135,2,0,
1,459,633,18,1,
459,634,20,635,4,
24,76,0,69,0,
70,0,84,0,95,
0,66,0,82,0,
65,0,67,0,75,
0,69,0,84,0,
1,27,1,1,2,
0,1,1574,636,18,
1,1574,191,2,0,
1,461,637,18,1,
461,638,20,639,4,
24,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,76,0,105,
0,115,0,116,0,
1,134,1,2,2,
0,1,462,640,18,
1,462,143,2,0,
1,464,641,18,1,
464,642,20,643,4,
16,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,1,135,1,
2,2,0,1,2136,
644,18,1,2136,258,
2,0,1,2695,645,
18,1,2695,140,2,
0,1,2697,646,18,
1,2697,153,2,0,
1,1585,647,18,1,
1585,648,20,649,4,
12,82,0,69,0,
84,0,85,0,82,
0,78,0,1,50,
1,1,2,0,1,
2701,650,18,1,2701,
150,2,0,1,2702,
651,18,1,2702,308,
2,0,1,476,652,
18,1,476,653,20,
654,4,30,83,0,
84,0,82,0,73,
0,78,0,71,0,
95,0,67,0,79,
0,78,0,83,0,
84,0,65,0,78,
0,84,0,1,3,
1,1,2,0,1,
477,655,18,1,477,
656,20,657,4,28,
70,0,76,0,79,
0,65,0,84,0,
95,0,67,0,79,
0,78,0,83,0,
84,0,65,0,78,
0,84,0,1,95,
1,1,2,0,1,
478,658,18,1,478,
659,20,660,4,40,
72,0,69,0,88,
0,95,0,73,0,
78,0,84,0,69,
0,71,0,69,0,
82,0,95,0,67,
0,79,0,78,0,
83,0,84,0,65,
0,78,0,84,0,
1,94,1,1,2,
0,1,479,661,18,
1,479,662,20,663,
4,32,73,0,78,
0,84,0,69,0,
71,0,69,0,82,
0,95,0,67,0,
79,0,78,0,83,
0,84,0,65,0,
78,0,84,0,1,
93,1,1,2,0,
1,480,664,18,1,
480,665,20,666,4,
26,82,0,73,0,
71,0,72,0,84,
0,95,0,66,0,
82,0,65,0,67,
0,75,0,69,0,
84,0,1,28,1,
1,2,0,1,481,
667,18,1,481,642,
2,0,1,2632,668,
18,1,2632,493,2,
0,1,1048,669,18,
1,1048,168,2,0,
1,2727,670,18,1,
2727,191,2,0,1,
2042,671,18,1,2042,
672,20,673,4,20,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
1,122,1,2,2,
0,1,2043,674,18,
1,2043,191,2,0,
1,1620,675,18,1,
1620,160,2,0,1,
1621,676,18,1,1621,
150,2,0,1,1622,
677,18,1,1622,308,
2,0,1,509,678,
18,1,509,143,2,
0,1,2498,679,18,
1,2498,680,20,681,
4,38,72,0,84,
0,84,0,80,0,
95,0,82,0,69,
0,83,0,80,0,
79,0,78,0,83,
0,69,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,68,1,1,2,
0,1,2739,682,18,
1,2739,683,20,684,
4,34,71,0,108,
0,111,0,98,0,
97,0,108,0,68,
0,101,0,102,0,
105,0,110,0,105,
0,116,0,105,0,
111,0,110,0,115,
0,1,97,1,2,
2,0,1,1628,685,
18,1,1628,168,2,
0,1,515,686,18,
1,515,168,2,0,
1,2505,687,18,1,
2505,688,20,689,4,
28,86,0,101,0,
99,0,116,0,111,
0,114,0,65,0,
114,0,103,0,69,
0,118,0,101,0,
110,0,116,0,1,
117,1,2,2,0,
1,2583,690,18,1,
2583,619,2,0,1,
2584,691,18,1,2584,
331,2,0,1,2585,
692,18,1,2585,334,
2,0,1,2750,693,
18,1,2750,287,2,
0,1,2587,694,18,
1,2587,486,2,0,
1,525,695,18,1,
525,317,2,0,1,
2197,696,18,1,2197,
160,2,0,1,2198,
697,18,1,2198,153,
2,0,1,1591,698,
18,1,1591,168,2,
0,1,2757,699,18,
1,2757,700,20,701,
4,48,71,0,108,
0,111,0,98,0,
97,0,108,0,70,
0,117,0,110,0,
99,0,116,0,105,
0,111,0,110,0,
68,0,101,0,102,
0,105,0,110,0,
105,0,116,0,105,
0,111,0,110,0,
1,99,1,2,2,
0,1,2592,702,18,
1,2592,600,2,0,
1,2759,703,18,1,
2759,700,2,0,1,
2675,704,18,1,2675,
486,2,0,1,2761,
104,1,2762,705,18,
1,2762,706,23,707,
4,6,69,0,79,
0,70,0,1,2,
1,6,2,0,1,
1094,708,18,1,1094,
638,2,0,1,1096,
709,18,1,1096,153,
2,0,1,2683,710,
18,1,2683,711,20,
712,4,10,83,0,
116,0,97,0,116,
0,101,0,1,101,
1,2,2,0,1,
2684,713,18,1,2684,
711,2,0,1,1657,
714,18,1,1657,191,
2,0,1,1658,715,
18,1,1658,716,20,
717,4,6,70,0,
79,0,82,0,1,
46,1,1,2,0,
1,1659,718,18,1,
1659,135,2,0,1,
1665,719,18,1,1665,
168,2,0,1,1113,
720,18,1,1113,176,
2,0,721,5,0,
722,5,347,1,2,
723,19,707,1,2,
724,5,6,1,2750,
725,17,726,15,727,
4,30,37,0,76,
0,83,0,76,0,
80,0,114,0,111,
0,103,0,114,0,
97,0,109,0,82,
0,111,0,111,0,
116,0,1,-1,1,
5,728,20,729,4,
32,76,0,83,0,
76,0,80,0,114,
0,111,0,103,0,
114,0,97,0,109,
0,82,0,111,0,
111,0,116,0,95,
0,49,0,1,152,
1,3,1,3,1,
2,730,22,1,1,
1,2675,731,17,732,
15,733,4,12,37,
0,83,0,116,0,
97,0,116,0,101,
0,1,-1,1,5,
734,20,735,4,14,
83,0,116,0,97,
0,116,0,101,0,
95,0,49,0,1,
164,1,3,1,5,
1,4,736,22,1,
13,1,2587,737,17,
738,15,733,1,-1,
1,5,739,20,740,
4,14,83,0,116,
0,97,0,116,0,
101,0,95,0,50,
0,1,165,1,3,
1,6,1,5,741,
22,1,14,1,2684,
742,17,743,15,744,
4,14,37,0,83,
0,116,0,97,0,
116,0,101,0,115,
0,1,-1,1,5,
745,20,746,4,16,
83,0,116,0,97,
0,116,0,101,0,
115,0,95,0,49,
0,1,162,1,3,
1,2,1,1,747,
22,1,11,1,2680,
748,17,749,15,727,
1,-1,1,5,750,
20,751,4,32,76,
0,83,0,76,0,
80,0,114,0,111,
0,103,0,114,0,
97,0,109,0,82,
0,111,0,111,0,
116,0,95,0,50,
0,1,153,1,3,
1,2,1,1,752,
22,1,2,1,2683,
753,17,754,15,744,
1,-1,1,5,755,
20,756,4,16,83,
0,116,0,97,0,
116,0,101,0,115,
0,95,0,50,0,
1,163,1,3,1,
3,1,2,757,22,
1,12,1,3,758,
19,654,1,3,759,
5,95,1,256,760,
16,0,652,1,1261,
761,16,0,652,1,
509,762,16,0,652,
1,1515,763,16,0,
652,1,2021,764,17,
765,15,766,4,24,
37,0,73,0,102,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,1,
-1,1,5,767,20,
768,4,26,73,0,
102,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,50,0,1,
208,1,3,1,8,
1,7,769,22,1,
58,1,1775,770,16,
0,652,1,2029,771,
17,772,15,773,4,
20,37,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,1,-1,1,5,
774,20,775,4,24,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,51,0,1,
202,1,3,1,2,
1,1,776,22,1,
52,1,2030,777,17,
778,15,773,1,-1,
1,5,779,20,780,
4,24,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,49,0,50,
0,1,201,1,3,
1,2,1,1,781,
22,1,51,1,2031,
782,17,783,15,773,
1,-1,1,5,784,
20,785,4,24,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,49,0,1,200,
1,3,1,2,1,
1,786,22,1,50,
1,2032,787,17,788,
15,773,1,-1,1,
5,789,20,790,4,
24,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,48,0,
1,199,1,3,1,
2,1,1,791,22,
1,49,1,2033,792,
17,793,15,773,1,
-1,1,5,794,20,
795,4,22,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,57,0,
1,198,1,3,1,
2,1,1,796,22,
1,48,1,277,797,
16,0,652,1,2035,
798,17,799,15,773,
1,-1,1,5,800,
20,801,4,22,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,56,
0,1,197,1,3,
1,3,1,2,802,
22,1,47,1,2037,
803,17,804,15,773,
1,-1,1,5,805,
20,806,4,22,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,55,
0,1,196,1,3,
1,3,1,2,807,
22,1,46,1,2039,
808,17,809,15,773,
1,-1,1,5,810,
20,811,4,22,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,54,
0,1,195,1,3,
1,3,1,2,812,
22,1,45,1,32,
813,16,0,652,1,
2041,814,17,815,15,
773,1,-1,1,5,
816,20,817,4,22,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
53,0,1,194,1,
3,1,3,1,2,
818,22,1,44,1,
2293,819,16,0,652,
1,2043,820,17,821,
15,773,1,-1,1,
5,822,20,823,4,
22,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,51,0,1,192,
1,3,1,3,1,
2,824,22,1,42,
1,2045,825,17,826,
15,773,1,-1,1,
5,827,20,828,4,
22,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,1,190,
1,3,1,3,1,
2,829,22,1,40,
1,41,830,16,0,
652,1,1297,831,16,
0,652,1,43,832,
16,0,652,1,1803,
833,17,834,15,835,
4,16,37,0,70,
0,111,0,114,0,
76,0,111,0,111,
0,112,0,1,-1,
1,5,836,20,837,
4,18,70,0,111,
0,114,0,76,0,
111,0,111,0,112,
0,95,0,49,0,
1,215,1,3,1,
10,1,9,838,22,
1,65,1,1804,839,
16,0,652,1,299,
840,16,0,652,1,
52,841,16,0,652,
1,2318,842,16,0,
652,1,62,843,16,
0,652,1,2075,844,
16,0,652,1,1574,
845,17,846,15,773,
1,-1,1,5,847,
20,848,4,22,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,52,
0,1,193,1,3,
1,3,1,2,849,
22,1,43,1,71,
850,16,0,652,1,
76,851,16,0,652,
1,1834,852,16,0,
652,1,2337,853,16,
0,652,1,79,854,
16,0,652,1,1335,
855,16,0,652,1,
322,856,16,0,652,
1,85,857,16,0,
652,1,89,858,16,
0,652,1,346,859,
16,0,652,1,2105,
860,17,861,15,766,
1,-1,1,5,862,
20,863,4,26,73,
0,102,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,51,0,
1,209,1,3,1,
6,1,5,864,22,
1,59,1,2106,865,
16,0,652,1,97,
866,16,0,652,1,
1860,867,17,868,15,
869,4,34,37,0,
68,0,111,0,87,
0,104,0,105,0,
108,0,101,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,1,-1,1,
5,870,20,871,4,
36,68,0,111,0,
87,0,104,0,105,
0,108,0,101,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,1,213,1,
3,1,8,1,7,
872,22,1,63,1,
2364,873,17,874,15,
835,1,-1,1,5,
875,20,876,4,18,
70,0,111,0,114,
0,76,0,111,0,
111,0,112,0,95,
0,50,0,1,216,
1,3,1,9,1,
8,877,22,1,66,
1,102,878,16,0,
652,1,112,879,16,
0,652,1,1117,880,
16,0,652,1,1873,
881,17,882,15,869,
1,-1,1,5,883,
20,884,4,36,68,
0,111,0,87,0,
104,0,105,0,108,
0,101,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
1,214,1,3,1,
8,1,7,885,22,
1,64,1,1876,886,
16,0,652,1,124,
887,16,0,652,1,
2136,888,17,889,15,
766,1,-1,1,5,
890,20,891,4,26,
73,0,102,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,52,
0,1,210,1,3,
1,8,1,7,892,
22,1,60,1,381,
893,16,0,652,1,
525,894,16,0,652,
1,137,895,16,0,
652,1,1901,896,16,
0,652,1,1153,897,
16,0,652,1,151,
898,16,0,652,1,
1407,899,16,0,652,
1,1659,900,16,0,
652,1,2413,901,16,
0,652,1,406,902,
16,0,652,1,1371,
903,16,0,652,1,
166,904,16,0,652,
1,1622,905,16,0,
652,1,1931,906,17,
907,15,908,4,30,
37,0,87,0,104,
0,105,0,108,0,
101,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,-1,1,5,909,
20,910,4,32,87,
0,104,0,105,0,
108,0,101,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,1,211,1,3,
1,6,1,5,911,
22,1,61,1,1933,
912,16,0,652,1,
431,913,16,0,652,
1,1585,914,16,0,
652,1,182,915,16,
0,652,1,1189,916,
16,0,652,1,1443,
917,16,0,652,1,
1695,918,16,0,652,
1,2198,919,16,0,
652,1,2702,920,16,
0,652,1,447,921,
16,0,652,1,2458,
922,17,923,15,924,
4,28,37,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,76,0,105,
0,115,0,116,0,
1,-1,1,5,925,
20,926,4,30,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,76,0,105,
0,115,0,116,0,
95,0,50,0,1,
188,1,3,1,3,
1,2,927,22,1,
38,1,2459,928,17,
929,15,930,4,36,
37,0,67,0,111,
0,109,0,112,0,
111,0,117,0,110,
0,100,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,1,-1,1,5,
931,20,932,4,38,
67,0,111,0,109,
0,112,0,111,0,
117,0,110,0,100,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,50,0,1,186,
1,3,1,4,1,
3,933,22,1,36,
1,1958,934,16,0,
652,1,2462,935,17,
936,15,924,1,-1,
1,5,937,20,938,
4,30,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
76,0,105,0,115,
0,116,0,95,0,
49,0,1,187,1,
3,1,2,1,1,
939,22,1,37,1,
1657,940,17,941,15,
773,1,-1,1,5,
942,20,943,4,22,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
50,0,1,191,1,
3,1,3,1,2,
944,22,1,41,1,
2464,945,17,946,15,
930,1,-1,1,5,
947,20,948,4,38,
67,0,111,0,109,
0,112,0,111,0,
117,0,110,0,100,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,1,185,
1,3,1,3,1,
2,949,22,1,35,
1,199,950,16,0,
652,1,459,951,16,
0,652,1,462,952,
16,0,652,1,217,
953,16,0,652,1,
2227,954,17,955,15,
908,1,-1,1,5,
956,20,957,4,32,
87,0,104,0,105,
0,108,0,101,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
50,0,1,212,1,
3,1,6,1,5,
958,22,1,62,1,
1225,959,16,0,652,
1,1479,960,16,0,
652,1,1731,961,16,
0,652,1,1989,962,
17,963,15,766,1,
-1,1,5,964,20,
965,4,26,73,0,
102,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,49,0,1,
207,1,3,1,6,
1,5,966,22,1,
57,1,1990,967,16,
0,652,1,236,968,
16,0,652,1,1756,
969,16,0,652,1,
4,970,19,184,1,
4,971,5,100,1,
256,972,16,0,576,
1,1261,973,16,0,
576,1,509,974,16,
0,576,1,1515,975,
16,0,576,1,2021,
764,1,1775,976,16,
0,576,1,2029,771,
1,2030,777,1,2031,
782,1,2032,787,1,
2033,792,1,277,977,
16,0,576,1,2035,
798,1,2037,803,1,
2039,808,1,32,978,
16,0,576,1,2041,
814,1,2293,979,16,
0,576,1,2043,820,
1,2045,825,1,40,
980,16,0,186,1,
41,981,16,0,576,
1,1297,982,16,0,
576,1,43,983,16,
0,576,1,44,984,
16,0,186,1,1803,
833,1,1804,985,16,
0,576,1,299,986,
16,0,576,1,47,
987,16,0,182,1,
52,988,16,0,576,
1,2318,989,16,0,
576,1,63,990,16,
0,201,1,66,991,
16,0,199,1,2075,
992,16,0,576,1,
1574,845,1,71,993,
16,0,576,1,76,
994,16,0,576,1,
1834,995,16,0,576,
1,2337,996,16,0,
576,1,79,997,16,
0,576,1,1335,998,
16,0,576,1,322,
999,16,0,576,1,
85,1000,16,0,576,
1,89,1001,16,0,
576,1,346,1002,16,
0,576,1,97,1003,
16,0,576,1,2106,
1004,16,0,576,1,
102,1005,16,0,576,
1,1860,867,1,2364,
873,1,1114,1006,16,
0,182,1,112,1007,
16,0,576,1,1117,
1008,16,0,576,1,
1873,881,1,1876,1009,
16,0,576,1,124,
1010,16,0,576,1,
2136,888,1,381,1011,
16,0,576,1,525,
1012,16,0,576,1,
137,1013,16,0,576,
1,1901,1014,16,0,
576,1,1153,1015,16,
0,576,1,151,1016,
16,0,576,1,1407,
1017,16,0,576,1,
1659,1018,16,0,576,
1,2413,1019,16,0,
576,1,406,1020,16,
0,576,1,1371,1021,
16,0,576,1,2105,
860,1,166,1022,16,
0,576,1,1622,1023,
16,0,576,1,1931,
906,1,1933,1024,16,
0,576,1,431,1025,
16,0,576,1,1585,
1026,16,0,576,1,
182,1027,16,0,576,
1,1189,1028,16,0,
576,1,1443,1029,16,
0,576,1,1695,1030,
16,0,576,1,2198,
1031,16,0,576,1,
2702,1032,16,0,576,
1,447,1033,16,0,
576,1,2458,922,1,
2459,928,1,1958,1034,
16,0,576,1,2462,
935,1,1657,940,1,
2464,945,1,199,1035,
16,0,576,1,459,
1036,16,0,576,1,
462,1037,16,0,576,
1,217,1038,16,0,
576,1,2227,954,1,
1225,1039,16,0,576,
1,1479,1040,16,0,
576,1,1731,1041,16,
0,576,1,1989,962,
1,1990,1042,16,0,
576,1,236,1043,16,
0,576,1,1756,1044,
16,0,576,1,5,
1045,19,181,1,5,
1046,5,100,1,256,
1047,16,0,572,1,
1261,1048,16,0,572,
1,509,1049,16,0,
572,1,1515,1050,16,
0,572,1,2021,764,
1,1775,1051,16,0,
572,1,2029,771,1,
2030,777,1,2031,782,
1,2032,787,1,2033,
792,1,277,1052,16,
0,572,1,2035,798,
1,2037,803,1,2039,
808,1,32,1053,16,
0,572,1,2041,814,
1,2293,1054,16,0,
572,1,2043,820,1,
2045,825,1,40,1055,
16,0,185,1,41,
1056,16,0,572,1,
1297,1057,16,0,572,
1,43,1058,16,0,
572,1,44,1059,16,
0,185,1,1803,833,
1,1804,1060,16,0,
572,1,299,1061,16,
0,572,1,47,1062,
16,0,179,1,52,
1063,16,0,572,1,
2318,1064,16,0,572,
1,63,1065,16,0,
200,1,66,1066,16,
0,198,1,2075,1067,
16,0,572,1,1574,
845,1,71,1068,16,
0,572,1,76,1069,
16,0,572,1,1834,
1070,16,0,572,1,
2337,1071,16,0,572,
1,79,1072,16,0,
572,1,1335,1073,16,
0,572,1,322,1074,
16,0,572,1,85,
1075,16,0,572,1,
89,1076,16,0,572,
1,346,1077,16,0,
572,1,97,1078,16,
0,572,1,2106,1079,
16,0,572,1,102,
1080,16,0,572,1,
1860,867,1,2364,873,
1,1114,1081,16,0,
179,1,112,1082,16,
0,572,1,1117,1083,
16,0,572,1,1873,
881,1,1876,1084,16,
0,572,1,124,1085,
16,0,572,1,2136,
888,1,381,1086,16,
0,572,1,525,1087,
16,0,572,1,137,
1088,16,0,572,1,
1901,1089,16,0,572,
1,1153,1090,16,0,
572,1,151,1091,16,
0,572,1,1407,1092,
16,0,572,1,1659,
1093,16,0,572,1,
2413,1094,16,0,572,
1,406,1095,16,0,
572,1,1371,1096,16,
0,572,1,2105,860,
1,166,1097,16,0,
572,1,1622,1098,16,
0,572,1,1931,906,
1,1933,1099,16,0,
572,1,431,1100,16,
0,572,1,1585,1101,
16,0,572,1,182,
1102,16,0,572,1,
1189,1103,16,0,572,
1,1443,1104,16,0,
572,1,1695,1105,16,
0,572,1,2198,1106,
16,0,572,1,2702,
1107,16,0,572,1,
447,1108,16,0,572,
1,2458,922,1,2459,
928,1,1958,1109,16,
0,572,1,2462,935,
1,1657,940,1,2464,
945,1,199,1110,16,
0,572,1,459,1111,
16,0,572,1,462,
1112,16,0,572,1,
217,1113,16,0,572,
1,2227,954,1,1225,
1114,16,0,572,1,
1479,1115,16,0,572,
1,1731,1116,16,0,
572,1,1989,962,1,
1990,1117,16,0,572,
1,236,1118,16,0,
572,1,1756,1119,16,
0,572,1,6,1120,
19,279,1,6,1121,
5,2,1,1114,1122,
16,0,277,1,40,
1123,16,0,561,1,
7,1124,19,244,1,
7,1125,5,2,1,
1114,1126,16,0,242,
1,40,1127,16,0,
505,1,8,1128,19,
207,1,8,1129,5,
2,1,1114,1130,16,
0,205,1,40,1131,
16,0,471,1,9,
1132,19,213,1,9,
1133,5,2,1,1114,
1134,16,0,211,1,
40,1135,16,0,398,
1,10,1136,19,164,
1,10,1137,5,2,
1,1114,1138,16,0,
162,1,40,1139,16,
0,340,1,11,1140,
19,192,1,11,1141,
5,146,1,1260,1142,
17,1143,15,1144,4,
34,37,0,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
1,-1,1,5,1145,
20,1146,4,38,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
49,0,1,243,1,
3,1,6,1,5,
1147,22,1,93,1,
1011,1148,17,1149,15,
1150,4,44,37,0,
80,0,97,0,114,
0,101,0,110,0,
116,0,104,0,101,
0,115,0,105,0,
115,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,-1,1,
5,1151,20,1152,4,
46,80,0,97,0,
114,0,101,0,110,
0,116,0,104,0,
101,0,115,0,105,
0,115,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
50,0,1,290,1,
3,1,4,1,3,
1153,22,1,140,1,
1514,1154,17,1155,15,
1144,1,-1,1,5,
1156,20,1157,4,38,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,52,0,1,236,
1,3,1,4,1,
3,1158,22,1,86,
1,9,1159,17,1160,
15,1161,4,24,37,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,1,-1,
1,5,1162,20,1163,
4,26,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,95,
0,49,0,1,182,
1,3,1,3,1,
2,1164,22,1,32,
1,262,1165,17,1166,
15,1167,4,34,37,
0,66,0,105,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,-1,
1,5,1168,20,1169,
4,36,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,53,0,1,272,
1,3,1,4,1,
3,1170,22,1,122,
1,1267,1171,17,1172,
15,1144,1,-1,1,
5,1173,20,1174,4,
36,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
56,0,1,230,1,
3,1,6,1,5,
1175,22,1,80,1,
2021,764,1,1521,1176,
17,1177,15,1144,1,
-1,1,5,1178,20,
1179,4,36,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,49,0,1,
223,1,3,1,4,
1,3,1180,22,1,
73,1,2024,1181,17,
1182,15,1183,4,24,
37,0,83,0,116,
0,97,0,116,0,
101,0,67,0,104,
0,97,0,110,0,
103,0,101,0,1,
-1,1,5,1184,20,
1185,4,26,83,0,
116,0,97,0,116,
0,101,0,67,0,
104,0,97,0,110,
0,103,0,101,0,
95,0,49,0,1,
205,1,3,1,3,
1,2,1186,22,1,
55,1,1775,1187,17,
1188,15,1189,4,30,
37,0,69,0,109,
0,112,0,116,0,
121,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,-1,1,5,1190,
20,1191,4,32,69,
0,109,0,112,0,
116,0,121,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,1,189,1,3,
1,1,1,0,1192,
22,1,39,1,19,
1193,17,1160,1,2,
1164,1,2028,1194,17,
1195,15,1196,4,20,
37,0,74,0,117,
0,109,0,112,0,
76,0,97,0,98,
0,101,0,108,0,
1,-1,1,5,1197,
20,1198,4,22,74,
0,117,0,109,0,
112,0,76,0,97,
0,98,0,101,0,
108,0,95,0,49,
0,1,203,1,3,
1,3,1,2,1199,
22,1,53,1,2029,
771,1,2281,1200,17,
1201,15,1202,4,34,
37,0,70,0,111,
0,114,0,76,0,
111,0,111,0,112,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,1,
-1,1,5,1203,20,
1204,4,36,70,0,
111,0,114,0,76,
0,111,0,111,0,
112,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,50,0,1,
218,1,3,1,2,
1,1,1205,22,1,
68,1,2031,782,1,
2032,787,1,2033,792,
1,2034,1206,16,0,
603,1,2035,798,1,
2036,1207,16,0,562,
1,2037,803,1,2038,
1208,16,0,566,1,
2039,808,1,32,1209,
17,1188,1,0,1192,
1,2041,814,1,2042,
1210,16,0,674,1,
2043,820,1,2044,1211,
16,0,615,1,2045,
825,1,2299,1212,16,
0,229,1,1296,1213,
17,1214,15,1144,1,
-1,1,5,1215,20,
1216,4,38,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,50,0,48,
0,1,242,1,3,
1,6,1,5,1217,
22,1,92,1,283,
1218,17,1219,15,1167,
1,-1,1,5,1220,
20,1221,4,36,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,52,0,
1,271,1,3,1,
4,1,3,1222,22,
1,121,1,40,1223,
17,1224,15,1225,4,
32,37,0,73,0,
100,0,101,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,-1,
1,5,1226,20,1227,
4,34,73,0,100,
0,101,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,1,257,1,3,
1,2,1,1,1228,
22,1,107,1,44,
1229,17,1224,1,1,
1228,1,1803,833,1,
47,1230,17,1231,15,
1232,4,38,37,0,
73,0,100,0,101,
0,110,0,116,0,
68,0,111,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,1,-1,1,5,
1233,20,1234,4,40,
73,0,100,0,101,
0,110,0,116,0,
68,0,111,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
1,258,1,3,1,
4,1,3,1235,22,
1,108,1,48,1236,
17,1237,15,1238,4,
58,37,0,73,0,
110,0,99,0,114,
0,101,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
-1,1,5,1239,20,
1240,4,60,73,0,
110,0,99,0,114,
0,101,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,52,0,1,262,
1,3,1,5,1,
4,1241,22,1,112,
1,49,1242,17,1243,
15,1238,1,-1,1,
5,1244,20,1245,4,
60,73,0,110,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,51,
0,1,261,1,3,
1,5,1,4,1246,
22,1,111,1,50,
1247,17,1248,15,1238,
1,-1,1,5,1249,
20,1250,4,60,73,
0,110,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,50,0,1,
260,1,3,1,3,
1,2,1251,22,1,
110,1,51,1252,17,
1253,15,1238,1,-1,
1,5,1254,20,1255,
4,60,73,0,110,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,114,0,101,0,
109,0,101,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,1,259,1,
3,1,3,1,2,
1256,22,1,109,1,
305,1257,17,1258,15,
1167,1,-1,1,5,
1259,20,1260,4,36,
66,0,105,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,51,
0,1,270,1,3,
1,4,1,3,1261,
22,1,120,1,525,
1262,17,1263,15,1264,
4,34,37,0,82,
0,111,0,116,0,
97,0,116,0,105,
0,111,0,110,0,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,1,-1,1,5,
1265,20,1266,4,36,
82,0,111,0,116,
0,97,0,116,0,
105,0,111,0,110,
0,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,95,0,49,
0,1,255,1,3,
1,10,1,9,1267,
22,1,105,1,63,
1268,17,1269,15,1270,
4,38,37,0,84,
0,121,0,112,0,
101,0,99,0,97,
0,115,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
1,-1,1,5,1271,
20,1272,4,40,84,
0,121,0,112,0,
101,0,99,0,97,
0,115,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,50,0,1,
292,1,3,1,5,
1,4,1273,22,1,
142,1,66,1274,17,
1275,15,1270,1,-1,
1,5,1276,20,1277,
4,40,84,0,121,
0,112,0,101,0,
99,0,97,0,115,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
51,0,1,293,1,
3,1,7,1,6,
1278,22,1,143,1,
67,1279,17,1280,15,
1270,1,-1,1,5,
1281,20,1282,4,40,
84,0,121,0,112,
0,101,0,99,0,
97,0,115,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,55,0,
1,297,1,3,1,
8,1,7,1283,22,
1,147,1,68,1284,
17,1285,15,1270,1,
-1,1,5,1286,20,
1287,4,40,84,0,
121,0,112,0,101,
0,99,0,97,0,
115,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,53,0,1,295,
1,3,1,8,1,
7,1288,22,1,145,
1,69,1289,17,1290,
15,1270,1,-1,1,
5,1291,20,1292,4,
40,84,0,121,0,
112,0,101,0,99,
0,97,0,115,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,54,
0,1,296,1,3,
1,6,1,5,1293,
22,1,146,1,70,
1294,17,1295,15,1270,
1,-1,1,5,1296,
20,1297,4,40,84,
0,121,0,112,0,
101,0,99,0,97,
0,115,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,52,0,1,
294,1,3,1,6,
1,5,1298,22,1,
144,1,74,1299,17,
1300,15,1270,1,-1,
1,5,1301,20,1302,
4,40,84,0,121,
0,112,0,101,0,
99,0,97,0,115,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
57,0,1,299,1,
3,1,7,1,6,
1303,22,1,149,1,
1013,1304,17,1305,15,
1150,1,-1,1,5,
1306,20,1307,4,46,
80,0,97,0,114,
0,101,0,110,0,
116,0,104,0,101,
0,115,0,105,0,
115,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,1,289,1,3,
1,4,1,3,1308,
22,1,139,1,1332,
1309,17,1310,15,1144,
1,-1,1,5,1311,
20,1312,4,38,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
57,0,1,241,1,
3,1,6,1,5,
1313,22,1,91,1,
2337,1314,17,1188,1,
0,1192,1,1585,1315,
17,1316,15,1317,4,
32,37,0,82,0,
101,0,116,0,117,
0,114,0,110,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,-1,
1,5,1318,20,1319,
4,34,82,0,101,
0,116,0,117,0,
114,0,110,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,50,
0,1,248,1,3,
1,2,1,1,1320,
22,1,98,1,2023,
1321,17,1322,15,1183,
1,-1,1,5,1323,
20,1324,4,26,83,
0,116,0,97,0,
116,0,101,0,67,
0,104,0,97,0,
110,0,103,0,101,
0,95,0,50,0,
1,206,1,3,1,
3,1,2,1325,22,
1,56,1,2136,888,
1,82,1326,17,1327,
15,1328,4,32,37,
0,85,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,1,-1,1,5,
1329,20,1330,4,34,
85,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,51,0,1,
288,1,3,1,3,
1,2,1331,22,1,
138,1,2026,1332,17,
1333,15,1334,4,28,
37,0,74,0,117,
0,109,0,112,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,-1,
1,5,1335,20,1336,
4,30,74,0,117,
0,109,0,112,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,1,204,1,
3,1,3,1,2,
1337,22,1,54,1,
1591,1338,17,1339,15,
1317,1,-1,1,5,
1340,20,1341,4,34,
82,0,101,0,116,
0,117,0,114,0,
110,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,49,0,1,
247,1,3,1,3,
1,2,1342,22,1,
97,1,1341,1343,17,
1344,15,1144,1,-1,
1,5,1345,20,1346,
4,36,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,54,0,1,228,
1,3,1,4,1,
3,1347,22,1,78,
1,2030,777,1,328,
1348,17,1349,15,1167,
1,-1,1,5,1350,
20,1351,4,36,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,50,0,
1,269,1,3,1,
4,1,3,1352,22,
1,119,1,1303,1353,
17,1354,15,1144,1,
-1,1,5,1355,20,
1356,4,36,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,55,0,1,
229,1,3,1,6,
1,5,1357,22,1,
79,1,1096,1358,17,
1359,15,1360,4,26,
37,0,70,0,117,
0,110,0,99,0,
116,0,105,0,111,
0,110,0,67,0,
97,0,108,0,108,
0,1,-1,1,5,
1361,20,1362,4,28,
70,0,117,0,110,
0,99,0,116,0,
105,0,111,0,110,
0,67,0,97,0,
108,0,108,0,95,
0,49,0,1,300,
1,3,1,5,1,
4,1363,22,1,150,
1,93,1364,17,1365,
15,1328,1,-1,1,
5,1366,20,1367,4,
34,85,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,50,0,
1,287,1,3,1,
3,1,2,1368,22,
1,137,1,1550,1369,
17,1370,15,1144,1,
-1,1,5,1371,20,
1372,4,38,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,49,0,51,
0,1,235,1,3,
1,4,1,3,1373,
22,1,85,1,2040,
1374,16,0,570,1,
2106,1375,17,1188,1,
0,1192,1,1555,1376,
16,0,636,1,827,
1377,17,1378,15,1167,
1,-1,1,5,1379,
20,1380,4,38,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
53,0,1,282,1,
3,1,4,1,3,
1381,22,1,132,1,
1859,1382,16,0,314,
1,1860,867,1,1804,
1383,17,1188,1,0,
1192,1,107,1384,17,
1385,15,1328,1,-1,
1,5,1386,20,1387,
4,34,85,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,1,286,1,3,
1,3,1,2,1388,
22,1,136,1,1114,
1389,17,1231,1,3,
1235,1,2701,1390,16,
0,255,1,352,1391,
17,1392,15,1167,1,
-1,1,5,1393,20,
1394,4,36,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,49,0,1,
268,1,3,1,4,
1,3,1395,22,1,
118,1,1872,1396,16,
0,324,1,1873,881,
1,118,1397,17,1398,
15,1167,1,-1,1,
5,1399,20,1400,4,
38,66,0,105,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,52,0,1,
281,1,3,1,4,
1,3,1401,22,1,
131,1,1123,1402,17,
1403,15,1144,1,-1,
1,5,1404,20,1405,
4,38,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,50,0,
1,234,1,3,1,
6,1,5,1406,22,
1,84,1,371,1407,
17,1408,15,1409,4,
46,37,0,70,0,
117,0,110,0,99,
0,116,0,105,0,
111,0,110,0,67,
0,97,0,108,0,
108,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,-1,1,
5,1410,20,1411,4,
48,70,0,117,0,
110,0,99,0,116,
0,105,0,111,0,
110,0,67,0,97,
0,108,0,108,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,49,0,1,
267,1,3,1,2,
1,1,1412,22,1,
117,1,1377,1413,17,
1414,15,1144,1,-1,
1,5,1415,20,1416,
4,36,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,53,0,1,227,
1,3,1,4,1,
3,1417,22,1,77,
1,375,1418,17,1419,
15,1238,1,-1,1,
5,1420,20,1421,4,
60,73,0,110,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,56,
0,1,266,1,3,
1,5,1,4,1422,
22,1,116,1,377,
1423,17,1424,15,1238,
1,-1,1,5,1425,
20,1426,4,60,73,
0,110,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,53,0,1,
263,1,3,1,3,
1,2,1427,22,1,
113,1,379,1428,17,
1429,15,1238,1,-1,
1,5,1430,20,1431,
4,60,73,0,110,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,114,0,101,0,
109,0,101,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
55,0,1,265,1,
3,1,5,1,4,
1432,22,1,115,1,
380,1433,17,1434,15,
1435,4,38,37,0,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,1,-1,1,5,
1436,20,1437,4,40,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
1,256,1,3,1,
2,1,1,1438,22,
1,106,1,883,1439,
17,1440,15,1167,1,
-1,1,5,1441,20,
1442,4,38,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,49,0,54,
0,1,283,1,3,
1,4,1,3,1443,
22,1,133,1,1628,
1444,17,1445,15,1446,
4,22,37,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,1,
-1,1,5,1447,20,
1448,4,24,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,1,221,1,
3,1,4,1,3,
1449,22,1,71,1,
2075,1450,17,1188,1,
0,1192,1,373,1451,
17,1452,15,1238,1,
-1,1,5,1453,20,
1454,4,60,73,0,
110,0,99,0,114,
0,101,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,54,0,1,264,
1,3,1,3,1,
2,1455,22,1,114,
1,130,1456,17,1457,
15,1167,1,-1,1,
5,1458,20,1459,4,
38,66,0,105,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,51,0,1,
280,1,3,1,4,
1,3,1460,22,1,
130,1,143,1461,17,
1462,15,1167,1,-1,
1,5,1463,20,1464,
4,38,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,49,0,50,0,
1,279,1,3,1,
4,1,3,1465,22,
1,129,1,1901,1466,
17,1188,1,0,1192,
1,1048,1467,17,1468,
15,1167,1,-1,1,
5,1469,20,1470,4,
38,66,0,105,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,56,0,1,
285,1,3,1,4,
1,3,1471,22,1,
135,1,1152,1472,17,
1473,15,1144,1,-1,
1,5,1474,20,1475,
4,38,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,50,0,52,0,
1,246,1,3,1,
6,1,5,1476,22,
1,96,1,1406,1477,
17,1478,15,1144,1,
-1,1,5,1479,20,
1480,4,38,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,49,0,55,
0,1,239,1,3,
1,4,1,3,1481,
22,1,89,1,1659,
1482,16,0,270,1,
2413,1483,17,1188,1,
0,1192,1,1159,1484,
17,1485,15,1144,1,
-1,1,5,1486,20,
1487,4,38,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,49,0,49,
0,1,233,1,3,
1,6,1,5,1488,
22,1,83,1,157,
1489,17,1490,15,1167,
1,-1,1,5,1491,
20,1492,4,38,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
49,0,1,278,1,
3,1,4,1,3,
1493,22,1,128,1,
1413,1494,17,1495,15,
1144,1,-1,1,5,
1496,20,1497,4,36,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,52,
0,1,226,1,3,
1,4,1,3,1498,
22,1,76,1,1370,
1499,17,1500,15,1144,
1,-1,1,5,1501,
20,1502,4,38,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
56,0,1,240,1,
3,1,4,1,3,
1503,22,1,90,1,
1478,1504,17,1505,15,
1144,1,-1,1,5,
1506,20,1507,4,38,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,53,0,1,237,
1,3,1,4,1,
3,1508,22,1,87,
1,1620,1509,17,1510,
15,1446,1,-1,1,
5,1511,20,1512,4,
24,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
1,222,1,3,1,
2,1,1,1513,22,
1,72,1,1621,1514,
16,0,714,1,1574,
845,1,172,1515,17,
1516,15,1167,1,-1,
1,5,1517,20,1518,
4,38,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,49,0,48,0,
1,277,1,3,1,
4,1,3,1519,22,
1,127,1,1931,906,
1,1665,1520,17,1521,
15,1202,1,-1,1,
5,1522,20,1523,4,
36,70,0,111,0,
114,0,76,0,111,
0,111,0,112,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,1,217,1,
3,1,2,1,1,
1524,22,1,67,1,
2364,873,1,2105,860,
1,1188,1525,17,1526,
15,1144,1,-1,1,
5,1527,20,1528,4,
38,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
50,0,51,0,1,
245,1,3,1,6,
1,5,1529,22,1,
95,1,1442,1530,17,
1531,15,1144,1,-1,
1,5,1532,20,1533,
4,38,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,54,0,
1,238,1,3,1,
4,1,3,1534,22,
1,88,1,1694,1535,
16,0,190,1,942,
1536,17,1537,15,1167,
1,-1,1,5,1538,
20,1539,4,38,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
55,0,1,284,1,
3,1,4,1,3,
1540,22,1,134,1,
2198,1541,17,1188,1,
0,1192,1,1195,1542,
17,1543,15,1144,1,
-1,1,5,1544,20,
1545,4,38,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,49,0,48,
0,1,232,1,3,
1,6,1,5,1546,
22,1,82,1,1449,
1547,17,1548,15,1144,
1,-1,1,5,1549,
20,1550,4,36,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,51,0,
1,225,1,3,1,
4,1,3,1551,22,
1,75,1,1701,1552,
17,1553,15,1202,1,
-1,1,5,1554,20,
1555,4,36,70,0,
111,0,114,0,76,
0,111,0,111,0,
112,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,51,0,1,
219,1,3,1,4,
1,3,1556,22,1,
69,1,447,1557,17,
1558,15,1559,4,30,
37,0,86,0,101,
0,99,0,116,0,
111,0,114,0,67,
0,111,0,110,0,
115,0,116,0,97,
0,110,0,116,0,
1,-1,1,5,1560,
20,1561,4,32,86,
0,101,0,99,0,
116,0,111,0,114,
0,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,95,0,49,
0,1,254,1,3,
1,8,1,7,1562,
22,1,104,1,2708,
1563,16,0,670,1,
2458,922,1,2459,928,
1,1958,1564,17,1188,
1,0,1192,1,188,
1565,17,1566,15,1167,
1,-1,1,5,1567,
20,1568,4,36,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,57,0,
1,276,1,3,1,
4,1,3,1569,22,
1,126,1,2462,935,
1,1657,940,1,2464,
945,1,205,1570,17,
1571,15,1167,1,-1,
1,5,1572,20,1573,
4,36,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,56,0,1,275,
1,3,1,4,1,
3,1574,22,1,125,
1,2227,954,1,1224,
1575,17,1576,15,1144,
1,-1,1,5,1577,
20,1578,4,38,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
50,0,1,244,1,
3,1,6,1,5,
1579,22,1,94,1,
223,1580,17,1581,15,
1167,1,-1,1,5,
1582,20,1583,4,36,
66,0,105,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,55,
0,1,274,1,3,
1,4,1,3,1584,
22,1,124,1,1730,
1585,17,1586,15,1202,
1,-1,1,5,1587,
20,1588,4,36,70,
0,111,0,114,0,
76,0,111,0,111,
0,112,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,52,0,
1,220,1,3,1,
4,1,3,1589,22,
1,70,1,476,1590,
17,1591,15,1592,4,
18,37,0,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,1,
-1,1,5,1593,20,
1594,4,20,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,95,
0,52,0,1,252,
1,3,1,2,1,
1,1595,22,1,102,
1,477,1596,17,1597,
15,1592,1,-1,1,
5,1598,20,1599,4,
20,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,95,0,51,
0,1,251,1,3,
1,2,1,1,1600,
22,1,101,1,1231,
1601,17,1602,15,1144,
1,-1,1,5,1603,
20,1604,4,36,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,57,0,
1,231,1,3,1,
6,1,5,1605,22,
1,81,1,479,1606,
17,1607,15,1592,1,
-1,1,5,1608,20,
1609,4,20,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,95,
0,49,0,1,249,
1,3,1,2,1,
1,1610,22,1,99,
1,480,1611,17,1612,
15,1613,4,26,37,
0,76,0,105,0,
115,0,116,0,67,
0,111,0,110,0,
115,0,116,0,97,
0,110,0,116,0,
1,-1,1,5,1614,
20,1615,4,28,76,
0,105,0,115,0,
116,0,67,0,111,
0,110,0,115,0,
116,0,97,0,110,
0,116,0,95,0,
49,0,1,253,1,
3,1,4,1,3,
1616,22,1,103,1,
1485,1617,17,1618,15,
1144,1,-1,1,5,
1619,20,1620,4,36,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,50,
0,1,224,1,3,
1,4,1,3,1621,
22,1,74,1,1737,
1622,16,0,272,1,
1989,962,1,1990,1623,
17,1188,1,0,1192,
1,242,1624,17,1625,
15,1167,1,-1,1,
5,1626,20,1627,4,
36,66,0,105,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
54,0,1,273,1,
3,1,4,1,3,
1628,22,1,123,1,
478,1629,17,1630,15,
1592,1,-1,1,5,
1631,20,1632,4,20,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,95,0,50,0,
1,250,1,3,1,
2,1,1,1633,22,
1,100,1,1001,1634,
17,1635,15,1270,1,
-1,1,5,1636,20,
1637,4,40,84,0,
121,0,112,0,101,
0,99,0,97,0,
115,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,56,0,1,298,
1,3,1,5,1,
4,1638,22,1,148,
1,1002,1639,17,1640,
15,1270,1,-1,1,
5,1641,20,1642,4,
40,84,0,121,0,
112,0,101,0,99,
0,97,0,115,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,1,291,1,3,
1,5,1,4,1643,
22,1,141,1,12,
1644,19,157,1,12,
1645,5,46,1,1901,
1646,16,0,155,1,
2075,1647,16,0,155,
1,1860,867,1,1803,
833,1,1804,1648,16,
0,155,1,2520,1649,
16,0,155,1,2413,
1650,16,0,155,1,
2525,1651,16,0,155,
1,1873,881,1,1657,
940,1,1989,962,1,
1990,1652,16,0,155,
1,31,1653,16,0,
155,1,32,1654,16,
0,155,1,2540,1655,
16,0,155,1,2105,
860,1,2106,1656,16,
0,155,1,2043,820,
1,2227,954,1,2337,
1657,16,0,155,1,
2198,1658,16,0,155,
1,2021,764,1,2458,
922,1,2459,928,1,
2462,935,1,2136,888,
1,2464,945,1,2029,
771,1,2030,777,1,
2031,782,1,2032,787,
1,2469,1659,16,0,
499,1,2035,798,1,
2364,873,1,2039,808,
1,1931,906,1,2041,
814,1,2697,1660,16,
0,155,1,2045,825,
1,2511,1661,16,0,
155,1,2592,1662,16,
0,625,1,1775,1663,
16,0,155,1,2033,
792,1,2037,803,1,
1574,845,1,1958,1664,
16,0,155,1,13,
1665,19,487,1,13,
1666,5,43,1,2513,
1667,17,1668,15,1669,
4,40,37,0,86,
0,101,0,99,0,
116,0,111,0,114,
0,65,0,114,0,
103,0,83,0,116,
0,97,0,116,0,
101,0,69,0,118,
0,101,0,110,0,
116,0,1,-1,1,
5,1670,20,1671,4,
42,86,0,101,0,
99,0,116,0,111,
0,114,0,65,0,
114,0,103,0,83,
0,116,0,97,0,
116,0,101,0,69,
0,118,0,101,0,
110,0,116,0,95,
0,49,0,1,177,
1,3,1,6,1,
5,1672,22,1,26,
1,1860,867,1,1803,
833,1,2522,1673,17,
1674,15,1675,4,34,
37,0,73,0,110,
0,116,0,65,0,
114,0,103,0,83,
0,116,0,97,0,
116,0,101,0,69,
0,118,0,101,0,
110,0,116,0,1,
-1,1,5,1676,20,
1677,4,36,73,0,
110,0,116,0,65,
0,114,0,103,0,
83,0,116,0,97,
0,116,0,101,0,
69,0,118,0,101,
0,110,0,116,0,
95,0,49,0,1,
176,1,3,1,6,
1,5,1678,22,1,
25,1,2632,1679,16,
0,704,1,2527,1680,
17,1681,15,1682,4,
36,37,0,86,0,
111,0,105,0,100,
0,65,0,114,0,
103,0,83,0,116,
0,97,0,116,0,
101,0,69,0,118,
0,101,0,110,0,
116,0,1,-1,1,
5,1683,20,1684,4,
38,86,0,111,0,
105,0,100,0,65,
0,114,0,103,0,
83,0,116,0,97,
0,116,0,101,0,
69,0,118,0,101,
0,110,0,116,0,
95,0,49,0,1,
175,1,3,1,5,
1,4,1685,22,1,
24,1,1657,940,1,
1989,962,1,2037,803,
1,32,1686,16,0,
491,1,2105,860,1,
2542,1687,17,1688,15,
1689,4,22,37,0,
83,0,116,0,97,
0,116,0,101,0,
69,0,118,0,101,
0,110,0,116,0,
1,-1,1,5,1690,
20,1691,4,24,83,
0,116,0,97,0,
116,0,101,0,69,
0,118,0,101,0,
110,0,116,0,95,
0,49,0,1,174,
1,3,1,6,1,
5,1692,22,1,23,
1,2544,1693,16,0,
694,1,2045,825,1,
2227,954,1,1574,845,
1,2584,1694,17,1695,
15,1696,4,20,37,
0,83,0,116,0,
97,0,116,0,101,
0,66,0,111,0,
100,0,121,0,1,
-1,1,5,1697,20,
1698,4,22,83,0,
116,0,97,0,116,
0,101,0,66,0,
111,0,100,0,121,
0,95,0,54,0,
1,171,1,3,1,
3,1,2,1699,22,
1,20,1,2585,1700,
17,1701,15,1696,1,
-1,1,5,1702,20,
1703,4,22,83,0,
116,0,97,0,116,
0,101,0,66,0,
111,0,100,0,121,
0,95,0,52,0,
1,169,1,3,1,
3,1,2,1704,22,
1,18,1,2586,1705,
17,1706,15,1696,1,
-1,1,5,1707,20,
1708,4,22,83,0,
116,0,97,0,116,
0,101,0,66,0,
111,0,100,0,121,
0,95,0,50,0,
1,167,1,3,1,
3,1,2,1709,22,
1,16,1,2021,764,
1,2458,922,1,2459,
928,1,2462,935,1,
2136,888,1,2464,945,
1,2029,771,1,2030,
777,1,2031,782,1,
2032,787,1,2033,792,
1,2035,798,1,2364,
873,1,2583,1710,17,
1711,15,1696,1,-1,
1,5,1712,20,1713,
4,22,83,0,116,
0,97,0,116,0,
101,0,66,0,111,
0,100,0,121,0,
95,0,56,0,1,
173,1,3,1,3,
1,2,1714,22,1,
22,1,2039,808,1,
1931,906,1,2041,814,
1,1873,881,1,2588,
1715,17,1716,15,1696,
1,-1,1,5,1717,
20,1718,4,22,83,
0,116,0,97,0,
116,0,101,0,66,
0,111,0,100,0,
121,0,95,0,55,
0,1,172,1,3,
1,2,1,1,1719,
22,1,21,1,2589,
1720,17,1721,15,1696,
1,-1,1,5,1722,
20,1723,4,22,83,
0,116,0,97,0,
116,0,101,0,66,
0,111,0,100,0,
121,0,95,0,53,
0,1,170,1,3,
1,2,1,1,1724,
22,1,19,1,2590,
1725,17,1726,15,1696,
1,-1,1,5,1727,
20,1728,4,22,83,
0,116,0,97,0,
116,0,101,0,66,
0,111,0,100,0,
121,0,95,0,51,
0,1,168,1,3,
1,2,1,1,1729,
22,1,17,1,2591,
1730,17,1731,15,1696,
1,-1,1,5,1732,
20,1733,4,22,83,
0,116,0,97,0,
116,0,101,0,66,
0,111,0,100,0,
121,0,95,0,49,
0,1,166,1,3,
1,2,1,1,1734,
22,1,15,1,2413,
1735,16,0,485,1,
2043,820,1,14,1736,
19,144,1,14,1737,
5,105,1,1260,1142,
1,1011,1148,1,1514,
1154,1,9,1159,1,
10,1738,17,1739,15,
1740,4,48,37,0,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,76,0,
105,0,115,0,116,
0,1,-1,1,5,
140,1,0,1,0,
1741,22,1,27,1,
262,1165,1,1267,1171,
1,1521,1176,1,1773,
1742,16,0,148,1,
19,1193,1,20,1743,
16,0,142,1,2281,
1200,1,525,1262,1,
2538,1744,16,0,142,
1,30,1745,17,1746,
15,1740,1,-1,1,
5,1747,20,1748,4,
50,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,76,
0,105,0,115,0,
116,0,95,0,50,
0,1,179,1,3,
1,4,1,3,1749,
22,1,29,1,283,
1218,1,40,1223,1,
41,1750,17,1751,15,
1752,4,26,37,0,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,76,0,105,0,
115,0,116,0,1,
-1,1,5,638,1,
0,1,0,1753,22,
1,151,1,42,1754,
17,1755,15,1756,4,
38,37,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,1,
-1,1,5,1757,20,
1758,4,40,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,1,303,
1,3,1,2,1,
1,1759,22,1,154,
1,44,1229,1,47,
1230,1,48,1236,1,
49,1242,1,50,1247,
1,51,1252,1,305,
1257,1,63,1268,1,
66,1274,1,67,1279,
1,1478,1504,1,69,
1289,1,70,1294,1,
68,1284,1,74,1299,
1,1013,1304,1,2335,
1760,16,0,148,1,
1332,1309,1,1048,1467,
1,82,1326,1,1296,
1213,1,1341,1343,1,
328,1348,1,1303,1353,
1,1096,1358,1,93,
1364,1,1550,1369,1,
2529,1761,17,1762,15,
1740,1,-1,1,5,
140,1,0,1,0,
1741,1,352,1391,1,
107,1384,1,1114,1389,
1,1370,1499,1,118,
1397,1,1123,1402,1,
371,1407,1,1377,1413,
1,375,1418,1,377,
1423,1,379,1428,1,
380,1433,1,883,1439,
1,373,1451,1,130,
1456,1,143,1461,1,
1152,1472,1,387,1763,
16,0,593,1,1406,
1477,1,1159,1484,1,
157,1489,1,1413,1494,
1,1665,1520,1,412,
1764,16,0,607,1,
1094,1765,16,0,640,
1,172,1515,1,2686,
1766,17,1767,15,1740,
1,-1,1,5,140,
1,0,1,0,1741,
1,827,1377,1,1188,
1525,1,2695,1768,16,
0,142,1,437,1769,
16,0,678,1,1442,
1530,1,1694,1770,16,
0,148,1,942,1536,
1,1195,1542,1,1449,
1547,1,1701,1552,1,
447,1557,1,188,1565,
1,205,1570,1,2467,
1771,17,1772,15,1740,
1,-1,1,5,1773,
20,1774,4,50,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,76,0,105,
0,115,0,116,0,
95,0,49,0,1,
178,1,3,1,2,
1,1,1775,22,1,
28,1,461,1776,16,
0,640,1,464,1777,
17,1778,15,1752,1,
-1,1,5,1779,20,
1780,4,28,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,76,
0,105,0,115,0,
116,0,95,0,50,
0,1,302,1,3,
1,4,1,3,1781,
22,1,153,1,1224,
1575,1,223,1580,1,
1730,1585,1,476,1590,
1,477,1596,1,1231,
1601,1,479,1606,1,
480,1611,1,1485,1617,
1,459,1782,17,1783,
15,1752,1,-1,1,
5,638,1,0,1,
0,1753,1,242,1624,
1,478,1629,1,481,
1784,17,1785,15,1752,
1,-1,1,5,1786,
20,1787,4,28,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
76,0,105,0,115,
0,116,0,95,0,
49,0,1,301,1,
3,1,2,1,1,
1788,22,1,152,1,
1001,1634,1,1002,1639,
1,15,1789,19,309,
1,15,1790,5,6,
1,1114,1791,16,0,
307,1,1621,1792,16,
0,677,1,2701,1793,
16,0,651,1,40,
1794,16,0,590,1,
19,1193,1,9,1159,
1,16,1795,19,136,
1,16,1796,5,142,
1,2514,1797,16,0,
327,1,256,1798,16,
0,187,1,1261,1799,
16,0,187,1,509,
1800,16,0,187,1,
9,1801,16,0,134,
1,2523,1802,16,0,
476,1,2528,1803,16,
0,482,1,2029,771,
1,2030,777,1,2031,
782,1,2032,787,1,
2033,792,1,277,1804,
16,0,187,1,2035,
798,1,2037,803,1,
2039,808,1,32,1805,
16,0,187,1,2041,
814,1,2293,1806,16,
0,187,1,2043,820,
1,2045,825,1,40,
1807,16,0,166,1,
41,1808,16,0,187,
1,1297,1809,16,0,
187,1,43,1810,16,
0,187,1,44,1811,
16,0,166,1,1803,
833,1,1804,1812,16,
0,187,1,299,1813,
16,0,187,1,2480,
1814,17,1815,15,1816,
4,24,37,0,73,
0,110,0,116,0,
65,0,114,0,103,
0,69,0,118,0,
101,0,110,0,116,
0,1,-1,1,5,
1817,20,1818,4,26,
73,0,110,0,116,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,95,0,52,
0,1,335,1,3,
1,2,1,1,1819,
22,1,186,1,52,
1820,16,0,187,1,
2484,1821,17,1822,15,
1823,4,26,37,0,
86,0,111,0,105,
0,100,0,65,0,
114,0,103,0,69,
0,118,0,101,0,
110,0,116,0,1,
-1,1,5,1824,20,
1825,4,28,86,0,
111,0,105,0,100,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,95,0,56,
0,1,331,1,3,
1,2,1,1,1826,
22,1,182,1,1515,
1827,16,0,187,1,
2318,1828,16,0,187,
1,2491,1829,17,1830,
15,1823,1,-1,1,
5,1831,20,1832,4,
28,86,0,111,0,
105,0,100,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
95,0,49,0,1,
324,1,3,1,2,
1,1,1833,22,1,
175,1,62,1834,16,
0,202,1,63,1835,
16,0,166,1,2495,
1836,17,1837,15,1838,
4,12,37,0,69,
0,118,0,101,0,
110,0,116,0,1,
-1,1,5,1839,20,
1840,4,16,69,0,
118,0,101,0,110,
0,116,0,95,0,
49,0,48,0,1,
320,1,3,1,2,
1,1,1841,22,1,
171,1,2075,1842,16,
0,187,1,1574,845,
1,1479,1843,16,0,
187,1,71,1844,16,
0,187,1,1658,1845,
16,0,718,1,1775,
1846,16,0,187,1,
1833,1847,16,0,299,
1,1834,1848,16,0,
187,1,2337,1849,16,
0,187,1,79,1850,
16,0,187,1,1335,
1851,16,0,187,1,
322,1852,16,0,187,
1,76,1853,16,0,
187,1,85,1854,16,
0,187,1,89,1855,
16,0,187,1,2685,
1856,16,0,632,1,
346,1857,16,0,187,
1,97,1858,16,0,
187,1,2106,1859,16,
0,187,1,102,1860,
16,0,187,1,1860,
867,1,2458,922,1,
2364,873,1,1990,1861,
16,0,187,1,112,
1862,16,0,187,1,
1117,1863,16,0,187,
1,1873,881,1,1875,
1864,16,0,414,1,
1876,1865,16,0,187,
1,124,1866,16,0,
187,1,2478,1867,17,
1868,15,1816,1,-1,
1,5,1869,20,1870,
4,26,73,0,110,
0,116,0,65,0,
114,0,103,0,69,
0,118,0,101,0,
110,0,116,0,95,
0,54,0,1,337,
1,3,1,2,1,
1,1871,22,1,188,
1,2136,888,1,381,
1872,16,0,187,1,
525,1873,16,0,187,
1,137,1874,16,0,
187,1,2021,764,1,
1901,1875,16,0,187,
1,1153,1876,16,0,
187,1,151,1877,16,
0,187,1,1407,1878,
16,0,187,1,1659,
1879,16,0,187,1,
2413,1880,16,0,187,
1,406,1881,16,0,
187,1,1371,1882,16,
0,187,1,2105,860,
1,166,1883,16,0,
187,1,1622,1884,16,
0,187,1,1931,906,
1,1932,1885,16,0,
501,1,1933,1886,16,
0,187,1,431,1887,
16,0,187,1,1585,
1888,16,0,187,1,
182,1889,16,0,187,
1,1189,1890,16,0,
187,1,1443,1891,16,
0,187,1,1695,1892,
16,0,187,1,2198,
1893,16,0,187,1,
2702,1894,16,0,187,
1,447,1895,16,0,
187,1,199,1896,16,
0,187,1,2459,928,
1,1958,1897,16,0,
187,1,2462,935,1,
1657,940,1,2464,945,
1,459,1898,16,0,
187,1,462,1899,16,
0,187,1,2471,1900,
17,1901,15,1902,4,
30,37,0,86,0,
101,0,99,0,116,
0,111,0,114,0,
65,0,114,0,103,
0,69,0,118,0,
101,0,110,0,116,
0,1,-1,1,5,
1903,20,1904,4,32,
86,0,101,0,99,
0,116,0,111,0,
114,0,65,0,114,
0,103,0,69,0,
118,0,101,0,110,
0,116,0,95,0,
51,0,1,344,1,
3,1,2,1,1,
1905,22,1,195,1,
2472,1906,17,1907,15,
1902,1,-1,1,5,
1908,20,1909,4,32,
86,0,101,0,99,
0,116,0,111,0,
114,0,65,0,114,
0,103,0,69,0,
118,0,101,0,110,
0,116,0,95,0,
50,0,1,343,1,
3,1,2,1,1,
1910,22,1,194,1,
2473,1911,17,1912,15,
1902,1,-1,1,5,
1913,20,1914,4,32,
86,0,101,0,99,
0,116,0,111,0,
114,0,65,0,114,
0,103,0,69,0,
118,0,101,0,110,
0,116,0,95,0,
49,0,1,342,1,
3,1,2,1,1,
1915,22,1,193,1,
2474,1916,17,1917,15,
1816,1,-1,1,5,
1918,20,1919,4,28,
73,0,110,0,116,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,95,0,49,
0,48,0,1,341,
1,3,1,2,1,
1,1920,22,1,192,
1,2475,1921,17,1922,
15,1816,1,-1,1,
5,1923,20,1924,4,
26,73,0,110,0,
116,0,65,0,114,
0,103,0,69,0,
118,0,101,0,110,
0,116,0,95,0,
57,0,1,340,1,
3,1,2,1,1,
1925,22,1,191,1,
2476,1926,17,1927,15,
1816,1,-1,1,5,
1928,20,1929,4,26,
73,0,110,0,116,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,95,0,56,
0,1,339,1,3,
1,2,1,1,1930,
22,1,190,1,2477,
1931,17,1932,15,1816,
1,-1,1,5,1933,
20,1934,4,26,73,
0,110,0,116,0,
65,0,114,0,103,
0,69,0,118,0,
101,0,110,0,116,
0,95,0,55,0,
1,338,1,3,1,
2,1,1,1935,22,
1,189,1,2227,954,
1,2479,1936,17,1937,
15,1816,1,-1,1,
5,1938,20,1939,4,
26,73,0,110,0,
116,0,65,0,114,
0,103,0,69,0,
118,0,101,0,110,
0,116,0,95,0,
53,0,1,336,1,
3,1,2,1,1,
1940,22,1,187,1,
1225,1941,16,0,187,
1,2481,1942,17,1943,
15,1816,1,-1,1,
5,1944,20,1945,4,
26,73,0,110,0,
116,0,65,0,114,
0,103,0,69,0,
118,0,101,0,110,
0,116,0,95,0,
51,0,1,334,1,
3,1,2,1,1,
1946,22,1,185,1,
2482,1947,17,1948,15,
1816,1,-1,1,5,
1949,20,1950,4,26,
73,0,110,0,116,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,95,0,50,
0,1,333,1,3,
1,2,1,1,1951,
22,1,184,1,2483,
1952,17,1953,15,1816,
1,-1,1,5,1954,
20,1955,4,26,73,
0,110,0,116,0,
65,0,114,0,103,
0,69,0,118,0,
101,0,110,0,116,
0,95,0,49,0,
1,332,1,3,1,
2,1,1,1956,22,
1,183,1,1731,1957,
16,0,187,1,2485,
1958,17,1959,15,1823,
1,-1,1,5,1960,
20,1961,4,28,86,
0,111,0,105,0,
100,0,65,0,114,
0,103,0,69,0,
118,0,101,0,110,
0,116,0,95,0,
55,0,1,330,1,
3,1,2,1,1,
1962,22,1,181,1,
2486,1963,17,1964,15,
1823,1,-1,1,5,
1965,20,1966,4,28,
86,0,111,0,105,
0,100,0,65,0,
114,0,103,0,69,
0,118,0,101,0,
110,0,116,0,95,
0,54,0,1,329,
1,3,1,2,1,
1,1967,22,1,180,
1,2487,1968,17,1969,
15,1823,1,-1,1,
5,1970,20,1971,4,
28,86,0,111,0,
105,0,100,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
95,0,53,0,1,
328,1,3,1,2,
1,1,1972,22,1,
179,1,2488,1973,17,
1974,15,1823,1,-1,
1,5,1975,20,1976,
4,28,86,0,111,
0,105,0,100,0,
65,0,114,0,103,
0,69,0,118,0,
101,0,110,0,116,
0,95,0,52,0,
1,327,1,3,1,
2,1,1,1977,22,
1,178,1,2489,1978,
17,1979,15,1823,1,
-1,1,5,1980,20,
1981,4,28,86,0,
111,0,105,0,100,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,95,0,51,
0,1,326,1,3,
1,2,1,1,1982,
22,1,177,1,2490,
1983,17,1984,15,1823,
1,-1,1,5,1985,
20,1986,4,28,86,
0,111,0,105,0,
100,0,65,0,114,
0,103,0,69,0,
118,0,101,0,110,
0,116,0,95,0,
50,0,1,325,1,
3,1,2,1,1,
1987,22,1,176,1,
1989,962,1,2492,1988,
17,1989,15,1838,1,
-1,1,5,1990,20,
1991,4,16,69,0,
118,0,101,0,110,
0,116,0,95,0,
49,0,51,0,1,
323,1,3,1,2,
1,1,1992,22,1,
174,1,2493,1993,17,
1994,15,1838,1,-1,
1,5,1995,20,1996,
4,16,69,0,118,
0,101,0,110,0,
116,0,95,0,49,
0,50,0,1,322,
1,3,1,2,1,
1,1997,22,1,173,
1,2494,1998,17,1999,
15,1838,1,-1,1,
5,2000,20,2001,4,
16,69,0,118,0,
101,0,110,0,116,
0,95,0,49,0,
49,0,1,321,1,
3,1,2,1,1,
2002,22,1,172,1,
236,2003,16,0,187,
1,2496,2004,17,2005,
15,1838,1,-1,1,
5,2006,20,2007,4,
14,69,0,118,0,
101,0,110,0,116,
0,95,0,57,0,
1,319,1,3,1,
2,1,1,2008,22,
1,170,1,2497,2009,
17,2010,15,1838,1,
-1,1,5,2011,20,
2012,4,14,69,0,
118,0,101,0,110,
0,116,0,95,0,
56,0,1,318,1,
3,1,2,1,1,
2013,22,1,169,1,
2498,2014,17,2015,15,
1838,1,-1,1,5,
2016,20,2017,4,14,
69,0,118,0,101,
0,110,0,116,0,
95,0,55,0,1,
317,1,3,1,2,
1,1,2018,22,1,
168,1,2499,2019,17,
2020,15,1838,1,-1,
1,5,2021,20,2022,
4,14,69,0,118,
0,101,0,110,0,
116,0,95,0,54,
0,1,316,1,3,
1,2,1,1,2023,
22,1,167,1,2500,
2024,17,2025,15,1838,
1,-1,1,5,2026,
20,2027,4,14,69,
0,118,0,101,0,
110,0,116,0,95,
0,53,0,1,315,
1,3,1,2,1,
1,2028,22,1,166,
1,2501,2029,17,2030,
15,1838,1,-1,1,
5,2031,20,2032,4,
14,69,0,118,0,
101,0,110,0,116,
0,95,0,52,0,
1,314,1,3,1,
2,1,1,2033,22,
1,165,1,2502,2034,
17,2035,15,1838,1,
-1,1,5,2036,20,
2037,4,14,69,0,
118,0,101,0,110,
0,116,0,95,0,
51,0,1,313,1,
3,1,2,1,1,
2038,22,1,164,1,
2503,2039,17,2040,15,
1838,1,-1,1,5,
2041,20,2042,4,14,
69,0,118,0,101,
0,110,0,116,0,
95,0,50,0,1,
312,1,3,1,2,
1,1,2043,22,1,
163,1,2504,2044,17,
2045,15,1838,1,-1,
1,5,2046,20,2047,
4,14,69,0,118,
0,101,0,110,0,
116,0,95,0,49,
0,1,311,1,3,
1,2,1,1,2048,
22,1,162,1,2505,
2049,16,0,447,1,
217,2050,16,0,187,
1,1756,2051,16,0,
187,1,17,2052,19,
154,1,17,2053,5,
124,1,2510,2054,16,
0,621,1,1,2055,
17,2056,15,2057,4,
18,37,0,84,0,
121,0,112,0,101,
0,110,0,97,0,
109,0,101,0,1,
-1,1,5,2058,20,
2059,4,20,84,0,
121,0,112,0,101,
0,110,0,97,0,
109,0,101,0,95,
0,55,0,1,310,
1,3,1,2,1,
1,2060,22,1,161,
1,2,2061,17,2062,
15,2057,1,-1,1,
5,2063,20,2064,4,
20,84,0,121,0,
112,0,101,0,110,
0,97,0,109,0,
101,0,95,0,54,
0,1,309,1,3,
1,2,1,1,2065,
22,1,160,1,3,
2066,17,2067,15,2057,
1,-1,1,5,2068,
20,2069,4,20,84,
0,121,0,112,0,
101,0,110,0,97,
0,109,0,101,0,
95,0,53,0,1,
308,1,3,1,2,
1,1,2070,22,1,
159,1,4,2071,17,
2072,15,2057,1,-1,
1,5,2073,20,2074,
4,20,84,0,121,
0,112,0,101,0,
110,0,97,0,109,
0,101,0,95,0,
52,0,1,307,1,
3,1,2,1,1,
2075,22,1,158,1,
5,2076,17,2077,15,
2057,1,-1,1,5,
2078,20,2079,4,20,
84,0,121,0,112,
0,101,0,110,0,
97,0,109,0,101,
0,95,0,51,0,
1,306,1,3,1,
2,1,1,2080,22,
1,157,1,6,2081,
17,2082,15,2057,1,
-1,1,5,2083,20,
2084,4,20,84,0,
121,0,112,0,101,
0,110,0,97,0,
109,0,101,0,95,
0,50,0,1,305,
1,3,1,2,1,
1,2085,22,1,156,
1,7,2086,17,2087,
15,2057,1,-1,1,
5,2088,20,2089,4,
20,84,0,121,0,
112,0,101,0,110,
0,97,0,109,0,
101,0,95,0,49,
0,1,304,1,3,
1,2,1,1,2090,
22,1,155,1,2518,
2091,17,2092,15,2093,
4,54,37,0,73,
0,110,0,116,0,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,76,0,
105,0,115,0,116,
0,1,-1,1,5,
2094,20,2095,4,56,
73,0,110,0,116,
0,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,76,
0,105,0,115,0,
116,0,95,0,49,
0,1,180,1,3,
1,2,1,1,2096,
22,1,30,1,9,
1159,1,10,1738,1,
262,1165,1,1267,1171,
1,2524,2097,16,0,
477,1,1521,1176,1,
1773,2098,16,0,238,
1,19,1193,1,20,
2099,16,0,152,1,
2281,1200,1,525,1262,
1,2538,2100,16,0,
489,1,30,1745,1,
1002,1639,1,283,1218,
1,1010,2101,16,0,
628,1,40,1223,1,
41,1750,1,42,1754,
1,44,1229,1,1260,
1142,1,47,1230,1,
1303,1353,1,49,1242,
1,50,1247,1,48,
1236,1,51,1252,1,
1514,1154,1,61,2102,
16,0,194,1,63,
1268,1,305,1257,1,
66,1274,1,67,1279,
1,68,1284,1,69,
1289,1,70,1294,1,
73,2103,16,0,204,
1,74,1299,1,1013,
1304,1,2335,2104,16,
0,240,1,1332,1309,
1,1048,1467,1,82,
1326,1,1840,2105,16,
0,313,1,1341,1343,
1,2517,2106,17,2107,
15,2108,4,30,37,
0,73,0,110,0,
116,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,1,
-1,1,5,2109,20,
2110,4,32,73,0,
110,0,116,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,95,0,49,0,
1,183,1,3,1,
3,1,2,2111,22,
1,33,1,2519,2112,
16,0,626,1,1094,
2113,16,0,709,1,
1096,1358,1,93,1364,
1,1550,1369,1,2529,
1761,1,827,1377,1,
1011,1148,1,107,1384,
1,1114,1389,1,328,
1348,1,1871,2114,16,
0,323,1,1370,1499,
1,1478,1504,1,118,
1397,1,1123,1402,1,
371,1407,1,1377,1413,
1,375,1418,1,1882,
2115,16,0,343,1,
377,1423,1,352,1391,
1,379,1428,1,380,
1433,1,130,1456,1,
2074,2116,16,0,592,
1,373,1451,1,1012,
2117,16,0,630,1,
143,1461,1,1152,1472,
1,1406,1477,1,1159,
1484,1,157,1489,1,
1413,1494,1,883,1439,
1,1296,1213,1,172,
1515,1,2686,1766,1,
1665,1520,1,1939,2118,
16,0,461,1,1188,
1525,1,2695,2119,16,
0,646,1,1442,1530,
1,188,1565,1,942,
1536,1,1195,1542,1,
1449,1547,1,1701,1552,
1,447,1557,1,205,
1570,1,2467,1771,1,
464,1777,1,2197,2120,
16,0,697,1,1224,
1575,1,223,1580,1,
1730,1585,1,476,1590,
1,477,1596,1,1231,
1601,1,479,1606,1,
480,1611,1,1485,1617,
1,459,1782,1,242,
1624,1,478,1629,1,
481,1784,1,1001,1634,
1,2508,2121,17,2122,
15,2123,4,36,37,
0,86,0,101,0,
99,0,116,0,111,
0,114,0,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
1,-1,1,5,2124,
20,2125,4,38,86,
0,101,0,99,0,
116,0,111,0,114,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,95,0,
49,0,1,184,1,
3,1,3,1,2,
2126,22,1,34,1,
2509,2127,17,2128,15,
2129,4,60,37,0,
86,0,101,0,99,
0,116,0,111,0,
114,0,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
76,0,105,0,115,
0,116,0,1,-1,
1,5,2130,20,2131,
4,62,86,0,101,
0,99,0,116,0,
111,0,114,0,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,76,0,105,
0,115,0,116,0,
95,0,49,0,1,
181,1,3,1,2,
1,1,2132,22,1,
31,1,18,2133,19,
528,1,18,2134,5,
84,1,1011,1148,1,
1012,2135,16,0,526,
1,1013,1304,1,262,
1165,1,1267,2136,16,
0,526,1,515,2137,
16,0,526,1,1521,
2138,16,0,526,1,
525,1262,1,283,1218,
1,2299,2139,16,0,
526,1,42,2140,16,
0,526,1,40,1223,
1,44,1229,1,47,
1230,1,1303,2141,16,
0,526,1,1555,2142,
16,0,526,1,50,
1247,1,48,1236,1,
49,1242,1,51,1252,
1,63,1268,1,305,
1257,1,66,1274,1,
67,1279,1,68,1284,
1,69,1289,1,70,
1294,1,73,2143,16,
0,526,1,74,1299,
1,328,1348,1,1048,
2144,16,0,526,1,
82,2145,16,0,526,
1,1840,2146,16,0,
526,1,1591,2147,16,
0,526,1,1341,2148,
16,0,526,1,1096,
1358,1,93,1364,1,
352,1391,1,107,2149,
16,0,526,1,1114,
1389,1,118,2150,16,
0,526,1,1123,2151,
16,0,526,1,371,
1407,1,1628,2152,16,
0,526,1,375,1418,
1,1882,2153,16,0,
526,1,377,1423,1,
379,1428,1,380,1433,
1,883,2154,16,0,
526,1,373,1451,1,
130,2155,16,0,526,
1,143,2156,16,0,
526,1,387,2157,16,
0,526,1,1159,2158,
16,0,526,1,157,
2159,16,0,526,1,
1413,2160,16,0,526,
1,1665,2161,16,0,
526,1,412,2162,16,
0,526,1,1377,2163,
16,0,526,1,172,
2164,16,0,526,1,
1939,2165,16,0,526,
1,437,2166,16,0,
526,1,188,2167,16,
0,526,1,942,2168,
16,0,526,1,1195,
2169,16,0,526,1,
1449,2170,16,0,526,
1,1701,2171,16,0,
526,1,447,1557,1,
2708,2172,16,0,526,
1,205,2173,16,0,
526,1,827,2174,16,
0,526,1,223,2175,
16,0,526,1,476,
1590,1,477,1596,1,
1231,2176,16,0,526,
1,479,1606,1,480,
1611,1,1485,2177,16,
0,526,1,1737,2178,
16,0,526,1,242,
2179,16,0,526,1,
478,1629,1,1001,1634,
1,1002,1639,1,19,
2180,19,228,1,19,
2181,5,176,1,256,
2182,16,0,226,1,
1261,2183,16,0,226,
1,1011,1148,1,1012,
2184,16,0,500,1,
2458,922,1,262,1165,
1,1267,2185,16,0,
500,1,2021,764,1,
1521,2186,16,0,500,
1,1775,2187,16,0,
226,1,2029,771,1,
2030,777,1,2031,782,
1,2032,787,1,2033,
792,1,277,2188,16,
0,226,1,2035,798,
1,2037,803,1,2039,
808,1,32,2189,16,
0,226,1,2464,945,
1,2293,2190,16,0,
226,1,2043,820,1,
2045,825,1,2299,2191,
16,0,500,1,41,
2192,16,0,226,1,
42,2193,16,0,500,
1,40,1223,1,44,
1229,1,43,2194,16,
0,226,1,1804,2195,
16,0,226,1,48,
1236,1,49,1242,1,
47,1230,1,51,1252,
1,52,2196,16,0,
226,1,50,1247,1,
305,1257,1,1096,1358,
1,1515,2197,16,0,
226,1,2318,2198,16,
0,226,1,283,1218,
1,63,1268,1,66,
1274,1,67,1279,1,
68,1284,1,69,1289,
1,70,1294,1,71,
2199,16,0,226,1,
73,2200,16,0,500,
1,74,1299,1,1013,
1304,1,76,2201,16,
0,226,1,1834,2202,
16,0,226,1,2337,
2203,16,0,226,1,
79,2204,16,0,226,
1,1335,2205,16,0,
226,1,299,2206,16,
0,226,1,82,2207,
16,0,500,1,1840,
2208,16,0,500,1,
1297,2209,16,0,226,
1,85,2210,16,0,
226,1,1341,2211,16,
0,500,1,89,2212,
16,0,226,1,1303,
2213,16,0,500,1,
509,2214,16,0,226,
1,93,1364,1,322,
2215,16,0,226,1,
97,2216,16,0,226,
1,2041,814,1,1555,
2217,16,0,500,1,
827,2218,16,0,500,
1,102,2219,16,0,
226,1,1860,867,1,
1803,833,1,2364,873,
1,107,2220,16,0,
500,1,1114,1389,1,
112,2221,16,0,226,
1,1117,2222,16,0,
226,1,352,1391,1,
1873,881,1,118,2223,
16,0,500,1,1123,
2224,16,0,500,1,
371,1407,1,515,2225,
16,0,500,1,1377,
2226,16,0,500,1,
124,2227,16,0,226,
1,1882,2228,16,0,
500,1,377,1423,1,
379,1428,1,380,1433,
1,130,2229,16,0,
500,1,346,2230,16,
0,226,1,2075,2231,
16,0,226,1,373,
1451,1,387,2232,16,
0,500,1,137,2233,
16,0,226,1,143,
2234,16,0,500,1,
1901,2235,16,0,226,
1,1048,2236,16,0,
500,1,1153,2237,16,
0,226,1,375,1418,
1,151,2238,16,0,
226,1,1407,2239,16,
0,226,1,1659,2240,
16,0,226,1,2413,
2241,16,0,226,1,
1159,2242,16,0,500,
1,381,2243,16,0,
226,1,157,2244,16,
0,500,1,1413,2245,
16,0,500,1,883,
2246,16,0,500,1,
1371,2247,16,0,226,
1,328,1348,1,2105,
860,1,2106,2248,16,
0,226,1,166,2249,
16,0,226,1,525,
2250,16,0,226,1,
1622,2251,16,0,226,
1,406,2252,16,0,
226,1,1574,845,1,
172,2253,16,0,500,
1,1931,906,1,412,
2254,16,0,500,1,
1933,2255,16,0,226,
1,1876,2256,16,0,
226,1,431,2257,16,
0,226,1,1585,2258,
16,0,226,1,182,
2259,16,0,226,1,
1628,2260,16,0,500,
1,1189,2261,16,0,
226,1,437,2262,16,
0,500,1,1591,2263,
16,0,500,1,188,
2264,16,0,500,1,
1695,2265,16,0,226,
1,2198,2266,16,0,
226,1,1195,2267,16,
0,500,1,2702,2268,
16,0,226,1,1449,
2269,16,0,500,1,
1701,2270,16,0,500,
1,447,2271,16,0,
226,1,2708,2272,16,
0,500,1,199,2273,
16,0,226,1,2459,
928,1,1958,2274,16,
0,226,1,2462,935,
1,1657,940,1,205,
2275,16,0,500,1,
459,2276,16,0,226,
1,462,2277,16,0,
226,1,1665,2278,16,
0,500,1,217,2279,
16,0,226,1,2227,
954,1,942,2280,16,
0,500,1,1225,2281,
16,0,226,1,223,
2282,16,0,500,1,
1479,2283,16,0,226,
1,1731,2284,16,0,
226,1,477,1596,1,
1231,2285,16,0,500,
1,479,1606,1,480,
1611,1,1485,2286,16,
0,500,1,1737,2287,
16,0,500,1,1989,
962,1,1990,2288,16,
0,226,1,1443,2289,
16,0,226,1,236,
2290,16,0,226,1,
2136,888,1,476,1590,
1,242,2291,16,0,
500,1,478,1629,1,
1939,2292,16,0,500,
1,1001,1634,1,1002,
1639,1,1756,2293,16,
0,226,1,20,2294,
19,480,1,20,2295,
5,84,1,1011,1148,
1,1012,2296,16,0,
478,1,1013,1304,1,
262,1165,1,1267,2297,
16,0,478,1,515,
2298,16,0,478,1,
1521,2299,16,0,478,
1,525,1262,1,283,
1218,1,2299,2300,16,
0,478,1,42,2301,
16,0,478,1,40,
1223,1,44,1229,1,
47,1230,1,1303,2302,
16,0,478,1,1555,
2303,16,0,478,1,
50,1247,1,48,1236,
1,49,1242,1,51,
1252,1,63,1268,1,
305,1257,1,66,1274,
1,67,1279,1,68,
1284,1,69,1289,1,
70,1294,1,73,2304,
16,0,478,1,74,
1299,1,328,2305,16,
0,478,1,1048,2306,
16,0,478,1,82,
2307,16,0,478,1,
1840,2308,16,0,478,
1,1591,2309,16,0,
478,1,1341,2310,16,
0,478,1,1096,1358,
1,93,1364,1,352,
2311,16,0,478,1,
107,2312,16,0,478,
1,1114,1389,1,118,
2313,16,0,478,1,
1123,2314,16,0,478,
1,371,1407,1,1628,
2315,16,0,478,1,
375,1418,1,1882,2316,
16,0,478,1,377,
1423,1,379,1428,1,
380,1433,1,883,2317,
16,0,478,1,373,
1451,1,130,2318,16,
0,478,1,143,2319,
16,0,478,1,387,
2320,16,0,478,1,
1159,2321,16,0,478,
1,157,2322,16,0,
478,1,1413,2323,16,
0,478,1,1665,2324,
16,0,478,1,412,
2325,16,0,478,1,
1377,2326,16,0,478,
1,172,2327,16,0,
478,1,1939,2328,16,
0,478,1,437,2329,
16,0,478,1,188,
2330,16,0,478,1,
942,2331,16,0,478,
1,1195,2332,16,0,
478,1,1449,2333,16,
0,478,1,1701,2334,
16,0,478,1,447,
1557,1,2708,2335,16,
0,478,1,205,2336,
16,0,478,1,827,
2337,16,0,478,1,
223,2338,16,0,478,
1,476,1590,1,477,
1596,1,1231,2339,16,
0,478,1,479,1606,
1,480,1611,1,1485,
2340,16,0,478,1,
1737,2341,16,0,478,
1,242,2342,16,0,
478,1,478,1629,1,
1001,1634,1,1002,1639,
1,21,2343,19,446,
1,21,2344,5,84,
1,1011,1148,1,1012,
2345,16,0,444,1,
1013,1304,1,262,1165,
1,1267,2346,16,0,
444,1,515,2347,16,
0,444,1,1521,2348,
16,0,444,1,525,
1262,1,283,1218,1,
2299,2349,16,0,444,
1,42,2350,16,0,
444,1,40,1223,1,
44,1229,1,47,1230,
1,1303,2351,16,0,
444,1,1555,2352,16,
0,444,1,50,1247,
1,48,1236,1,49,
1242,1,51,1252,1,
63,1268,1,305,1257,
1,66,1274,1,67,
1279,1,68,1284,1,
69,1289,1,70,1294,
1,73,2353,16,0,
444,1,74,1299,1,
328,2354,16,0,444,
1,1048,2355,16,0,
444,1,82,2356,16,
0,444,1,1840,2357,
16,0,444,1,1591,
2358,16,0,444,1,
1341,2359,16,0,444,
1,1096,1358,1,93,
1364,1,352,2360,16,
0,444,1,107,2361,
16,0,444,1,1114,
1389,1,118,2362,16,
0,444,1,1123,2363,
16,0,444,1,371,
1407,1,1628,2364,16,
0,444,1,375,1418,
1,1882,2365,16,0,
444,1,377,1423,1,
379,1428,1,380,1433,
1,883,2366,16,0,
444,1,373,1451,1,
130,2367,16,0,444,
1,143,2368,16,0,
444,1,387,2369,16,
0,444,1,1159,2370,
16,0,444,1,157,
2371,16,0,444,1,
1413,2372,16,0,444,
1,1665,2373,16,0,
444,1,412,2374,16,
0,444,1,1377,2375,
16,0,444,1,172,
2376,16,0,444,1,
1939,2377,16,0,444,
1,437,2378,16,0,
444,1,188,2379,16,
0,444,1,942,2380,
16,0,444,1,1195,
2381,16,0,444,1,
1449,2382,16,0,444,
1,1701,2383,16,0,
444,1,447,1557,1,
2708,2384,16,0,444,
1,205,2385,16,0,
444,1,827,2386,16,
0,444,1,223,2387,
16,0,444,1,476,
1590,1,477,1596,1,
1231,2388,16,0,444,
1,479,1606,1,480,
1611,1,1485,2389,16,
0,444,1,1737,2390,
16,0,444,1,242,
2391,16,0,444,1,
478,1629,1,1001,1634,
1,1002,1639,1,22,
2392,19,397,1,22,
2393,5,84,1,1011,
1148,1,1012,2394,16,
0,395,1,1013,1304,
1,262,1165,1,1267,
2395,16,0,395,1,
515,2396,16,0,395,
1,1521,2397,16,0,
395,1,525,1262,1,
283,1218,1,2299,2398,
16,0,395,1,42,
2399,16,0,395,1,
40,1223,1,44,1229,
1,47,1230,1,1303,
2400,16,0,395,1,
1555,2401,16,0,395,
1,50,1247,1,48,
1236,1,49,1242,1,
51,1252,1,63,1268,
1,305,1257,1,66,
1274,1,67,1279,1,
68,1284,1,69,1289,
1,70,1294,1,73,
2402,16,0,395,1,
74,1299,1,328,2403,
16,0,395,1,1048,
2404,16,0,395,1,
82,2405,16,0,395,
1,1840,2406,16,0,
395,1,1591,2407,16,
0,395,1,1341,2408,
16,0,395,1,1096,
1358,1,93,1364,1,
352,2409,16,0,395,
1,107,2410,16,0,
395,1,1114,1389,1,
118,2411,16,0,395,
1,1123,2412,16,0,
395,1,371,1407,1,
1628,2413,16,0,395,
1,375,1418,1,1882,
2414,16,0,395,1,
377,1423,1,379,1428,
1,380,1433,1,883,
2415,16,0,395,1,
373,1451,1,130,2416,
16,0,395,1,143,
2417,16,0,395,1,
387,2418,16,0,395,
1,1159,2419,16,0,
395,1,157,2420,16,
0,395,1,1413,2421,
16,0,395,1,1665,
2422,16,0,395,1,
412,2423,16,0,395,
1,1377,2424,16,0,
395,1,172,2425,16,
0,395,1,1939,2426,
16,0,395,1,437,
2427,16,0,395,1,
188,2428,16,0,395,
1,942,2429,16,0,
395,1,1195,2430,16,
0,395,1,1449,2431,
16,0,395,1,1701,
2432,16,0,395,1,
447,1557,1,2708,2433,
16,0,395,1,205,
2434,16,0,395,1,
827,2435,16,0,395,
1,223,2436,16,0,
395,1,476,1590,1,
477,1596,1,1231,2437,
16,0,395,1,479,
1606,1,480,1611,1,
1485,2438,16,0,395,
1,1737,2439,16,0,
395,1,242,2440,16,
0,395,1,478,1629,
1,1001,1634,1,1002,
1639,1,23,2441,19,
542,1,23,2442,5,
38,1,1901,2443,16,
0,540,1,2075,2444,
16,0,540,1,1860,
867,1,1803,833,1,
1804,2445,16,0,540,
1,2413,2446,16,0,
540,1,2198,2447,16,
0,540,1,1873,881,
1,1657,940,1,1989,
962,1,1990,2448,16,
0,540,1,1775,2449,
16,0,540,1,32,
2450,16,0,540,1,
2105,860,1,2106,2451,
16,0,540,1,2364,
873,1,2227,954,1,
2337,2452,16,0,540,
1,2021,764,1,2458,
922,1,2459,928,1,
2462,935,1,2136,888,
1,2464,945,1,2029,
771,1,2030,777,1,
2031,782,1,2032,787,
1,2033,792,1,2035,
798,1,2037,803,1,
2039,808,1,1931,906,
1,2041,814,1,2043,
820,1,2045,825,1,
1574,845,1,1958,2453,
16,0,540,1,24,
2454,19,177,1,24,
2455,5,5,1,44,
2456,16,0,175,1,
377,2457,16,0,578,
1,40,2458,16,0,
720,1,63,2459,16,
0,196,1,373,2460,
16,0,574,1,25,
2461,19,302,1,25,
2462,5,177,1,256,
2463,16,0,583,1,
1261,2464,16,0,583,
1,1011,1148,1,1012,
2465,16,0,300,1,
2458,922,1,262,1165,
1,1267,2466,16,0,
300,1,2021,764,1,
1521,2467,16,0,300,
1,1775,2468,16,0,
583,1,2029,771,1,
2030,777,1,2031,782,
1,2032,787,1,2033,
792,1,277,2469,16,
0,583,1,2035,798,
1,2037,803,1,2039,
808,1,32,2470,16,
0,583,1,2464,945,
1,2293,2471,16,0,
583,1,2043,820,1,
2045,825,1,2299,2472,
16,0,300,1,41,
2473,16,0,583,1,
42,2474,16,0,300,
1,40,1223,1,44,
1229,1,43,2475,16,
0,583,1,1804,2476,
16,0,583,1,48,
1236,1,49,1242,1,
47,1230,1,51,1252,
1,52,2477,16,0,
583,1,50,1247,1,
305,1257,1,1096,1358,
1,1515,2478,16,0,
583,1,2318,2479,16,
0,583,1,62,2480,
16,0,583,1,63,
1268,1,66,1274,1,
67,1279,1,68,1284,
1,69,1289,1,70,
1294,1,71,2481,16,
0,583,1,283,1218,
1,73,2482,16,0,
300,1,74,1299,1,
1013,1304,1,76,2483,
16,0,583,1,1834,
2484,16,0,583,1,
2337,2485,16,0,583,
1,79,2486,16,0,
583,1,1335,2487,16,
0,583,1,299,2488,
16,0,583,1,82,
2489,16,0,300,1,
1840,2490,16,0,300,
1,1297,2491,16,0,
583,1,85,2492,16,
0,583,1,1341,2493,
16,0,300,1,89,
2494,16,0,583,1,
1303,2495,16,0,300,
1,509,2496,16,0,
583,1,93,1364,1,
322,2497,16,0,583,
1,97,2498,16,0,
583,1,2041,814,1,
1555,2499,16,0,300,
1,827,2500,16,0,
300,1,102,2501,16,
0,583,1,1860,867,
1,1803,833,1,2364,
873,1,107,2502,16,
0,300,1,1114,1389,
1,112,2503,16,0,
583,1,1117,2504,16,
0,583,1,352,1391,
1,1873,881,1,118,
1397,1,1123,2505,16,
0,300,1,371,1407,
1,515,2506,16,0,
300,1,1377,2507,16,
0,300,1,124,2508,
16,0,583,1,1882,
2509,16,0,300,1,
377,1423,1,379,1428,
1,380,1433,1,130,
1456,1,346,2510,16,
0,583,1,2075,2511,
16,0,583,1,373,
1451,1,387,2512,16,
0,300,1,137,2513,
16,0,583,1,143,
2514,16,0,300,1,
1901,2515,16,0,583,
1,1048,1467,1,1153,
2516,16,0,583,1,
375,1418,1,151,2517,
16,0,583,1,1407,
2518,16,0,583,1,
1659,2519,16,0,583,
1,2413,2520,16,0,
583,1,1159,2521,16,
0,300,1,381,2522,
16,0,583,1,157,
2523,16,0,300,1,
1413,2524,16,0,300,
1,883,2525,16,0,
300,1,1371,2526,16,
0,583,1,328,1348,
1,2105,860,1,2106,
2527,16,0,583,1,
166,2528,16,0,583,
1,525,2529,16,0,
583,1,1622,2530,16,
0,583,1,406,2531,
16,0,583,1,1574,
845,1,172,1515,1,
1931,906,1,412,2532,
16,0,300,1,1933,
2533,16,0,583,1,
1876,2534,16,0,583,
1,431,2535,16,0,
583,1,1585,2536,16,
0,583,1,182,2537,
16,0,583,1,1628,
2538,16,0,300,1,
1189,2539,16,0,583,
1,437,2540,16,0,
300,1,1591,2541,16,
0,300,1,188,1565,
1,1695,2542,16,0,
583,1,2198,2543,16,
0,583,1,1195,2544,
16,0,300,1,2702,
2545,16,0,583,1,
1449,2546,16,0,300,
1,1701,2547,16,0,
300,1,447,2548,16,
0,583,1,2708,2549,
16,0,300,1,199,
2550,16,0,583,1,
2459,928,1,1958,2551,
16,0,583,1,2462,
935,1,1657,940,1,
205,2552,16,0,300,
1,459,2553,16,0,
583,1,462,2554,16,
0,583,1,1665,2555,
16,0,300,1,217,
2556,16,0,583,1,
2227,954,1,942,1536,
1,1225,2557,16,0,
583,1,223,2558,16,
0,300,1,1479,2559,
16,0,583,1,1731,
2560,16,0,583,1,
477,1596,1,1231,2561,
16,0,300,1,479,
1606,1,480,1611,1,
1485,2562,16,0,300,
1,1737,2563,16,0,
300,1,1989,962,1,
1990,2564,16,0,583,
1,1443,2565,16,0,
583,1,236,2566,16,
0,583,1,2136,888,
1,476,1590,1,242,
2567,16,0,300,1,
478,1629,1,1939,2568,
16,0,300,1,1001,
1634,1,1002,1639,1,
1756,2569,16,0,583,
1,26,2570,19,318,
1,26,2571,5,84,
1,1011,1148,1,1012,
2572,16,0,316,1,
1013,1304,1,262,1165,
1,1267,2573,16,0,
316,1,515,2574,16,
0,695,1,1521,2575,
16,0,316,1,525,
1262,1,283,1218,1,
2299,2576,16,0,316,
1,42,2577,16,0,
316,1,40,1223,1,
44,1229,1,47,1230,
1,1303,2578,16,0,
316,1,1555,2579,16,
0,316,1,50,1247,
1,48,1236,1,49,
1242,1,51,1252,1,
63,1268,1,305,1257,
1,66,1274,1,67,
1279,1,68,1284,1,
69,1289,1,70,1294,
1,73,2580,16,0,
316,1,74,1299,1,
328,1348,1,1048,1467,
1,82,2581,16,0,
316,1,1840,2582,16,
0,316,1,1591,2583,
16,0,316,1,1341,
2584,16,0,316,1,
1096,1358,1,93,1364,
1,352,1391,1,107,
2585,16,0,316,1,
1114,1389,1,118,1397,
1,1123,2586,16,0,
316,1,371,1407,1,
1628,2587,16,0,316,
1,375,1418,1,1882,
2588,16,0,316,1,
377,1423,1,379,1428,
1,380,1433,1,883,
2589,16,0,316,1,
373,1451,1,130,1456,
1,143,2590,16,0,
316,1,387,2591,16,
0,316,1,1159,2592,
16,0,316,1,157,
2593,16,0,316,1,
1413,2594,16,0,316,
1,1665,2595,16,0,
316,1,412,2596,16,
0,316,1,1377,2597,
16,0,316,1,172,
1515,1,1939,2598,16,
0,316,1,437,2599,
16,0,624,1,188,
1565,1,942,1536,1,
1195,2600,16,0,316,
1,1449,2601,16,0,
316,1,1701,2602,16,
0,316,1,447,1557,
1,2708,2603,16,0,
316,1,205,2604,16,
0,316,1,827,2605,
16,0,316,1,223,
2606,16,0,316,1,
476,1590,1,477,1596,
1,1231,2607,16,0,
316,1,479,1606,1,
480,1611,1,1485,2608,
16,0,316,1,1737,
2609,16,0,316,1,
242,2610,16,0,316,
1,478,1629,1,1001,
1634,1,1002,1639,1,
27,2611,19,635,1,
27,2612,5,95,1,
256,2613,16,0,633,
1,1261,2614,16,0,
633,1,509,2615,16,
0,633,1,1515,2616,
16,0,633,1,2021,
764,1,1775,2617,16,
0,633,1,2029,771,
1,2030,777,1,2031,
782,1,2032,787,1,
2033,792,1,277,2618,
16,0,633,1,2035,
798,1,2037,803,1,
2039,808,1,32,2619,
16,0,633,1,2041,
814,1,2293,2620,16,
0,633,1,2043,820,
1,2045,825,1,41,
2621,16,0,633,1,
1297,2622,16,0,633,
1,43,2623,16,0,
633,1,1803,833,1,
1804,2624,16,0,633,
1,299,2625,16,0,
633,1,52,2626,16,
0,633,1,2318,2627,
16,0,633,1,62,
2628,16,0,633,1,
2075,2629,16,0,633,
1,1574,845,1,71,
2630,16,0,633,1,
76,2631,16,0,633,
1,1834,2632,16,0,
633,1,2337,2633,16,
0,633,1,79,2634,
16,0,633,1,1335,
2635,16,0,633,1,
322,2636,16,0,633,
1,85,2637,16,0,
633,1,89,2638,16,
0,633,1,346,2639,
16,0,633,1,2105,
860,1,2106,2640,16,
0,633,1,97,2641,
16,0,633,1,1860,
867,1,2364,873,1,
102,2642,16,0,633,
1,112,2643,16,0,
633,1,1117,2644,16,
0,633,1,1873,881,
1,1876,2645,16,0,
633,1,124,2646,16,
0,633,1,2136,888,
1,381,2647,16,0,
633,1,525,2648,16,
0,633,1,137,2649,
16,0,633,1,1901,
2650,16,0,633,1,
1153,2651,16,0,633,
1,151,2652,16,0,
633,1,1407,2653,16,
0,633,1,1659,2654,
16,0,633,1,2413,
2655,16,0,633,1,
406,2656,16,0,633,
1,1371,2657,16,0,
633,1,166,2658,16,
0,633,1,1622,2659,
16,0,633,1,1931,
906,1,1933,2660,16,
0,633,1,431,2661,
16,0,633,1,1585,
2662,16,0,633,1,
182,2663,16,0,633,
1,1189,2664,16,0,
633,1,1443,2665,16,
0,633,1,1695,2666,
16,0,633,1,2198,
2667,16,0,633,1,
2702,2668,16,0,633,
1,447,2669,16,0,
633,1,2458,922,1,
2459,928,1,1958,2670,
16,0,633,1,2462,
935,1,1657,940,1,
2464,945,1,199,2671,
16,0,633,1,459,
2672,16,0,633,1,
462,2673,16,0,633,
1,217,2674,16,0,
633,1,2227,954,1,
1225,2675,16,0,633,
1,1479,2676,16,0,
633,1,1731,2677,16,
0,633,1,1989,962,
1,1990,2678,16,0,
633,1,236,2679,16,
0,633,1,1756,2680,
16,0,633,1,28,
2681,19,666,1,28,
2682,5,60,1,328,
1348,1,223,1580,1,
1096,1358,1,118,1397,
1,883,1439,1,525,
1262,1,1001,1634,1,
130,1456,1,459,1782,
1,1114,1389,1,352,
1391,1,447,1557,1,
464,1777,1,1011,1148,
1,1013,1304,1,242,
1624,1,143,1461,1,
40,1223,1,41,1750,
1,42,1754,1,479,
1606,1,44,1229,1,
481,1784,1,373,1451,
1,47,1230,1,157,
1489,1,49,1242,1,
50,1247,1,48,1236,
1,379,1428,1,380,
1433,1,51,1252,1,
476,1590,1,371,1407,
1,478,1629,1,1048,
1467,1,375,1418,1,
172,1515,1,262,1165,
1,283,1218,1,63,
1268,1,67,1279,1,
68,1284,1,69,1289,
1,66,1274,1,461,
2683,16,0,664,1,
74,1299,1,377,1423,
1,1002,1639,1,70,
1294,1,188,1565,1,
82,1326,1,305,1257,
1,477,1596,1,827,
1377,1,93,1364,1,
480,1611,1,205,1570,
1,942,1536,1,107,
1384,1,29,2684,19,
291,1,29,2685,5,
84,1,1011,1148,1,
1012,2686,16,0,289,
1,1013,1304,1,262,
1165,1,1267,2687,16,
0,289,1,515,2688,
16,0,289,1,1521,
2689,16,0,289,1,
525,1262,1,283,1218,
1,2299,2690,16,0,
289,1,42,2691,16,
0,289,1,40,1223,
1,44,1229,1,47,
1230,1,1303,2692,16,
0,289,1,1555,2693,
16,0,289,1,50,
1247,1,48,1236,1,
49,1242,1,51,1252,
1,63,1268,1,305,
1257,1,66,1274,1,
67,1279,1,68,1284,
1,69,1289,1,70,
1294,1,73,2694,16,
0,289,1,74,1299,
1,328,1348,1,1048,
1467,1,82,2695,16,
0,289,1,1840,2696,
16,0,289,1,1591,
2697,16,0,289,1,
1341,2698,16,0,289,
1,1096,1358,1,93,
1364,1,352,1391,1,
107,2699,16,0,289,
1,1114,1389,1,118,
1397,1,1123,2700,16,
0,289,1,371,1407,
1,1628,2701,16,0,
289,1,375,1418,1,
1882,2702,16,0,289,
1,377,1423,1,379,
1428,1,380,1433,1,
883,2703,16,0,289,
1,373,1451,1,130,
1456,1,143,1461,1,
387,2704,16,0,289,
1,1159,2705,16,0,
289,1,157,1489,1,
1413,2706,16,0,289,
1,1665,2707,16,0,
289,1,412,2708,16,
0,289,1,1377,2709,
16,0,289,1,172,
1515,1,1939,2710,16,
0,289,1,437,2711,
16,0,289,1,188,
1565,1,942,1536,1,
1195,2712,16,0,289,
1,1449,2713,16,0,
289,1,1701,2714,16,
0,289,1,447,1557,
1,2708,2715,16,0,
289,1,205,2716,16,
0,289,1,827,2717,
16,0,289,1,223,
2718,16,0,289,1,
476,1590,1,477,1596,
1,1231,2719,16,0,
289,1,479,1606,1,
480,1611,1,1485,2720,
16,0,289,1,1737,
2721,16,0,289,1,
242,2722,16,0,289,
1,478,1629,1,1001,
1634,1,1002,1639,1,
30,2723,19,269,1,
30,2724,5,84,1,
1011,1148,1,1012,2725,
16,0,267,1,1013,
1304,1,262,1165,1,
1267,2726,16,0,267,
1,515,2727,16,0,
267,1,1521,2728,16,
0,267,1,525,1262,
1,283,1218,1,2299,
2729,16,0,267,1,
42,2730,16,0,267,
1,40,1223,1,44,
1229,1,47,1230,1,
1303,2731,16,0,267,
1,1555,2732,16,0,
267,1,50,1247,1,
48,1236,1,49,1242,
1,51,1252,1,63,
1268,1,305,1257,1,
66,1274,1,67,1279,
1,68,1284,1,69,
1289,1,70,1294,1,
73,2733,16,0,267,
1,74,1299,1,328,
1348,1,1048,1467,1,
82,2734,16,0,267,
1,1840,2735,16,0,
267,1,1591,2736,16,
0,267,1,1341,2737,
16,0,267,1,1096,
1358,1,93,1364,1,
352,1391,1,107,2738,
16,0,267,1,1114,
1389,1,118,1397,1,
1123,2739,16,0,267,
1,371,1407,1,1628,
2740,16,0,267,1,
375,1418,1,1882,2741,
16,0,267,1,377,
1423,1,379,1428,1,
380,1433,1,883,2742,
16,0,267,1,373,
1451,1,130,1456,1,
143,1461,1,387,2743,
16,0,267,1,1159,
2744,16,0,267,1,
157,1489,1,1413,2745,
16,0,267,1,1665,
2746,16,0,267,1,
412,2747,16,0,267,
1,1377,2748,16,0,
267,1,172,1515,1,
1939,2749,16,0,267,
1,437,2750,16,0,
267,1,188,1565,1,
942,1536,1,1195,2751,
16,0,267,1,1449,
2752,16,0,267,1,
1701,2753,16,0,267,
1,447,1557,1,2708,
2754,16,0,267,1,
205,2755,16,0,267,
1,827,2756,16,0,
267,1,223,2757,16,
0,267,1,476,1590,
1,477,1596,1,1231,
2758,16,0,267,1,
479,1606,1,480,1611,
1,1485,2759,16,0,
267,1,1737,2760,16,
0,267,1,242,2761,
16,0,267,1,478,
1629,1,1001,1634,1,
1002,1639,1,31,2762,
19,254,1,31,2763,
5,84,1,1011,1148,
1,1012,2764,16,0,
252,1,1013,1304,1,
262,1165,1,1267,2765,
16,0,252,1,515,
2766,16,0,252,1,
1521,2767,16,0,252,
1,525,1262,1,283,
1218,1,2299,2768,16,
0,252,1,42,2769,
16,0,252,1,40,
1223,1,44,1229,1,
47,1230,1,1303,2770,
16,0,252,1,1555,
2771,16,0,252,1,
50,1247,1,48,1236,
1,49,1242,1,51,
1252,1,63,1268,1,
305,1257,1,66,1274,
1,67,1279,1,68,
1284,1,69,1289,1,
70,1294,1,73,2772,
16,0,252,1,74,
1299,1,328,1348,1,
1048,1467,1,82,2773,
16,0,252,1,1840,
2774,16,0,252,1,
1591,2775,16,0,252,
1,1341,2776,16,0,
252,1,1096,1358,1,
93,1364,1,352,1391,
1,107,2777,16,0,
252,1,1114,1389,1,
118,1397,1,1123,2778,
16,0,252,1,371,
1407,1,1628,2779,16,
0,252,1,375,1418,
1,1882,2780,16,0,
252,1,377,1423,1,
379,1428,1,380,1433,
1,883,2781,16,0,
252,1,373,1451,1,
130,1456,1,143,2782,
16,0,252,1,387,
2783,16,0,252,1,
1159,2784,16,0,252,
1,157,2785,16,0,
252,1,1413,2786,16,
0,252,1,1665,2787,
16,0,252,1,412,
2788,16,0,252,1,
1377,2789,16,0,252,
1,172,1515,1,1939,
2790,16,0,252,1,
437,2791,16,0,252,
1,188,1565,1,942,
1536,1,1195,2792,16,
0,252,1,1449,2793,
16,0,252,1,1701,
2794,16,0,252,1,
447,1557,1,2708,2795,
16,0,252,1,205,
2796,16,0,252,1,
827,2797,16,0,252,
1,223,2798,16,0,
252,1,476,1590,1,
477,1596,1,1231,2799,
16,0,252,1,479,
1606,1,480,1611,1,
1485,2800,16,0,252,
1,1737,2801,16,0,
252,1,242,2802,16,
0,252,1,478,1629,
1,1001,1634,1,1002,
1639,1,32,2803,19,
247,1,32,2804,5,
84,1,1011,1148,1,
1012,2805,16,0,245,
1,1013,1304,1,262,
1165,1,1267,2806,16,
0,245,1,515,2807,
16,0,245,1,1521,
2808,16,0,245,1,
525,1262,1,283,1218,
1,2299,2809,16,0,
245,1,42,2810,16,
0,245,1,40,1223,
1,44,1229,1,47,
1230,1,1303,2811,16,
0,245,1,1555,2812,
16,0,245,1,50,
1247,1,48,1236,1,
49,1242,1,51,1252,
1,63,1268,1,305,
1257,1,66,1274,1,
67,1279,1,68,1284,
1,69,1289,1,70,
1294,1,73,2813,16,
0,245,1,74,1299,
1,328,1348,1,1048,
1467,1,82,2814,16,
0,245,1,1840,2815,
16,0,245,1,1591,
2816,16,0,245,1,
1341,2817,16,0,245,
1,1096,1358,1,93,
1364,1,352,1391,1,
107,2818,16,0,245,
1,1114,1389,1,118,
1397,1,1123,2819,16,
0,245,1,371,1407,
1,1628,2820,16,0,
245,1,375,1418,1,
1882,2821,16,0,245,
1,377,1423,1,379,
1428,1,380,1433,1,
883,2822,16,0,245,
1,373,1451,1,130,
1456,1,143,2823,16,
0,245,1,387,2824,
16,0,245,1,1159,
2825,16,0,245,1,
157,2826,16,0,245,
1,1413,2827,16,0,
245,1,1665,2828,16,
0,245,1,412,2829,
16,0,245,1,1377,
2830,16,0,245,1,
172,1515,1,1939,2831,
16,0,245,1,437,
2832,16,0,245,1,
188,1565,1,942,1536,
1,1195,2833,16,0,
245,1,1449,2834,16,
0,245,1,1701,2835,
16,0,245,1,447,
1557,1,2708,2836,16,
0,245,1,205,2837,
16,0,245,1,827,
2838,16,0,245,1,
223,2839,16,0,245,
1,476,1590,1,477,
1596,1,1231,2840,16,
0,245,1,479,1606,
1,480,1611,1,1485,
2841,16,0,245,1,
1737,2842,16,0,245,
1,242,2843,16,0,
245,1,478,1629,1,
1001,1634,1,1002,1639,
1,33,2844,19,348,
1,33,2845,5,84,
1,1011,1148,1,1012,
2846,16,0,346,1,
1013,1304,1,262,1165,
1,1267,2847,16,0,
346,1,515,2848,16,
0,346,1,1521,2849,
16,0,346,1,525,
1262,1,283,1218,1,
2299,2850,16,0,346,
1,42,2851,16,0,
346,1,40,1223,1,
44,1229,1,47,1230,
1,1303,2852,16,0,
346,1,1555,2853,16,
0,346,1,50,1247,
1,48,1236,1,49,
1242,1,51,1252,1,
63,1268,1,305,1257,
1,66,1274,1,67,
1279,1,68,1284,1,
69,1289,1,70,1294,
1,73,2854,16,0,
346,1,74,1299,1,
328,1348,1,1048,1467,
1,82,2855,16,0,
346,1,1840,2856,16,
0,346,1,1591,2857,
16,0,346,1,1341,
2858,16,0,346,1,
1096,1358,1,93,1364,
1,352,1391,1,107,
2859,16,0,346,1,
1114,1389,1,118,1397,
1,1123,2860,16,0,
346,1,371,1407,1,
1628,2861,16,0,346,
1,375,1418,1,1882,
2862,16,0,346,1,
377,1423,1,379,1428,
1,380,1433,1,883,
2863,16,0,346,1,
373,1451,1,130,1456,
1,143,1461,1,387,
2864,16,0,346,1,
1159,2865,16,0,346,
1,157,1489,1,1413,
2866,16,0,346,1,
1665,2867,16,0,346,
1,412,2868,16,0,
346,1,1377,2869,16,
0,346,1,172,1515,
1,1939,2870,16,0,
346,1,437,2871,16,
0,346,1,188,1565,
1,942,1536,1,1195,
2872,16,0,346,1,
1449,2873,16,0,346,
1,1701,2874,16,0,
346,1,447,1557,1,
2708,2875,16,0,346,
1,205,2876,16,0,
346,1,827,2877,16,
0,346,1,223,2878,
16,0,346,1,476,
1590,1,477,1596,1,
1231,2879,16,0,346,
1,479,1606,1,480,
1611,1,1485,2880,16,
0,346,1,1737,2881,
16,0,346,1,242,
1624,1,478,1629,1,
1001,1634,1,1002,1639,
1,34,2882,19,338,
1,34,2883,5,84,
1,1011,1148,1,1012,
2884,16,0,336,1,
1013,1304,1,262,1165,
1,1267,2885,16,0,
336,1,515,2886,16,
0,336,1,1521,2887,
16,0,336,1,525,
1262,1,283,1218,1,
2299,2888,16,0,336,
1,42,2889,16,0,
336,1,40,1223,1,
44,1229,1,47,1230,
1,1303,2890,16,0,
336,1,1555,2891,16,
0,336,1,50,1247,
1,48,1236,1,49,
1242,1,51,1252,1,
63,1268,1,305,1257,
1,66,1274,1,67,
1279,1,68,1284,1,
69,1289,1,70,1294,
1,73,2892,16,0,
336,1,74,1299,1,
328,1348,1,1048,1467,
1,82,2893,16,0,
336,1,1840,2894,16,
0,336,1,1591,2895,
16,0,336,1,1341,
2896,16,0,336,1,
1096,1358,1,93,1364,
1,352,1391,1,107,
2897,16,0,336,1,
1114,1389,1,118,1397,
1,1123,2898,16,0,
336,1,371,1407,1,
1628,2899,16,0,336,
1,375,1418,1,1882,
2900,16,0,336,1,
377,1423,1,379,1428,
1,380,1433,1,883,
2901,16,0,336,1,
373,1451,1,130,1456,
1,143,1461,1,387,
2902,16,0,336,1,
1159,2903,16,0,336,
1,157,1489,1,1413,
2904,16,0,336,1,
1665,2905,16,0,336,
1,412,2906,16,0,
336,1,1377,2907,16,
0,336,1,172,1515,
1,1939,2908,16,0,
336,1,437,2909,16,
0,336,1,188,1565,
1,942,1536,1,1195,
2910,16,0,336,1,
1449,2911,16,0,336,
1,1701,2912,16,0,
336,1,447,1557,1,
2708,2913,16,0,336,
1,205,1570,1,827,
2914,16,0,336,1,
223,1580,1,476,1590,
1,477,1596,1,1231,
2915,16,0,336,1,
479,1606,1,480,1611,
1,1485,2916,16,0,
336,1,1737,2917,16,
0,336,1,242,1624,
1,478,1629,1,1001,
1634,1,1002,1639,1,
35,2918,19,321,1,
35,2919,5,84,1,
1011,1148,1,1012,2920,
16,0,319,1,1013,
1304,1,262,1165,1,
1267,2921,16,0,319,
1,515,2922,16,0,
319,1,1521,2923,16,
0,319,1,525,1262,
1,283,1218,1,2299,
2924,16,0,319,1,
42,2925,16,0,319,
1,40,1223,1,44,
1229,1,47,1230,1,
1303,2926,16,0,319,
1,1555,2927,16,0,
319,1,50,1247,1,
48,1236,1,49,1242,
1,51,1252,1,63,
1268,1,305,1257,1,
66,1274,1,67,1279,
1,68,1284,1,69,
1289,1,70,1294,1,
73,2928,16,0,319,
1,74,1299,1,328,
1348,1,1048,1467,1,
82,2929,16,0,319,
1,1840,2930,16,0,
319,1,1591,2931,16,
0,319,1,1341,2932,
16,0,319,1,1096,
1358,1,93,1364,1,
352,1391,1,107,2933,
16,0,319,1,1114,
1389,1,118,1397,1,
1123,2934,16,0,319,
1,371,1407,1,1628,
2935,16,0,319,1,
375,1418,1,1882,2936,
16,0,319,1,377,
1423,1,379,1428,1,
380,1433,1,883,2937,
16,0,319,1,373,
1451,1,130,1456,1,
143,1461,1,387,2938,
16,0,319,1,1159,
2939,16,0,319,1,
157,1489,1,1413,2940,
16,0,319,1,1665,
2941,16,0,319,1,
412,2942,16,0,319,
1,1377,2943,16,0,
319,1,172,1515,1,
1939,2944,16,0,319,
1,437,2945,16,0,
319,1,188,1565,1,
942,1536,1,1195,2946,
16,0,319,1,1449,
2947,16,0,319,1,
1701,2948,16,0,319,
1,447,1557,1,2708,
2949,16,0,319,1,
205,1570,1,827,2950,
16,0,319,1,223,
2951,16,0,319,1,
476,1590,1,477,1596,
1,1231,2952,16,0,
319,1,479,1606,1,
480,1611,1,1485,2953,
16,0,319,1,1737,
2954,16,0,319,1,
242,1624,1,478,1629,
1,1001,1634,1,1002,
1639,1,36,2955,19,
216,1,36,2956,5,
94,1,256,2957,16,
0,214,1,1261,2958,
16,0,214,1,509,
2959,16,0,214,1,
1515,2960,16,0,214,
1,2021,764,1,1775,
2961,16,0,214,1,
2029,771,1,2030,777,
1,2031,782,1,2032,
787,1,2033,792,1,
277,2962,16,0,214,
1,2035,798,1,2037,
803,1,2039,808,1,
32,2963,16,0,214,
1,2041,814,1,2293,
2964,16,0,214,1,
2043,820,1,2045,825,
1,41,2965,16,0,
214,1,1297,2966,16,
0,214,1,43,2967,
16,0,214,1,1803,
833,1,1804,2968,16,
0,214,1,299,2969,
16,0,214,1,52,
2970,16,0,214,1,
2318,2971,16,0,214,
1,2075,2972,16,0,
214,1,1574,845,1,
71,2973,16,0,214,
1,76,2974,16,0,
214,1,1834,2975,16,
0,214,1,2337,2976,
16,0,214,1,79,
2977,16,0,214,1,
1335,2978,16,0,214,
1,322,2979,16,0,
214,1,85,2980,16,
0,214,1,89,2981,
16,0,214,1,346,
2982,16,0,214,1,
2105,860,1,2106,2983,
16,0,214,1,97,
2984,16,0,214,1,
1860,867,1,2364,873,
1,102,2985,16,0,
214,1,112,2986,16,
0,214,1,1117,2987,
16,0,214,1,1873,
881,1,1876,2988,16,
0,214,1,124,2989,
16,0,214,1,2136,
888,1,381,2990,16,
0,214,1,525,2991,
16,0,214,1,137,
2992,16,0,214,1,
1901,2993,16,0,214,
1,1153,2994,16,0,
214,1,151,2995,16,
0,214,1,1407,2996,
16,0,214,1,1659,
2997,16,0,214,1,
2413,2998,16,0,214,
1,406,2999,16,0,
214,1,1371,3000,16,
0,214,1,166,3001,
16,0,214,1,1622,
3002,16,0,214,1,
1931,906,1,1933,3003,
16,0,214,1,431,
3004,16,0,214,1,
1585,3005,16,0,214,
1,182,3006,16,0,
214,1,1189,3007,16,
0,214,1,1443,3008,
16,0,214,1,1695,
3009,16,0,214,1,
2198,3010,16,0,214,
1,2702,3011,16,0,
214,1,447,3012,16,
0,214,1,2458,922,
1,2459,928,1,1958,
3013,16,0,214,1,
2462,935,1,1657,940,
1,2464,945,1,199,
3014,16,0,214,1,
459,3015,16,0,214,
1,462,3016,16,0,
214,1,217,3017,16,
0,214,1,2227,954,
1,1225,3018,16,0,
214,1,1479,3019,16,
0,214,1,1731,3020,
16,0,214,1,1989,
962,1,1990,3021,16,
0,214,1,236,3022,
16,0,214,1,1756,
3023,16,0,214,1,
37,3024,19,237,1,
37,3025,5,94,1,
256,3026,16,0,235,
1,1261,3027,16,0,
235,1,509,3028,16,
0,235,1,1515,3029,
16,0,235,1,2021,
764,1,1775,3030,16,
0,235,1,2029,771,
1,2030,777,1,2031,
782,1,2032,787,1,
2033,792,1,277,3031,
16,0,235,1,2035,
798,1,2037,803,1,
2039,808,1,32,3032,
16,0,235,1,2041,
814,1,2293,3033,16,
0,235,1,2043,820,
1,2045,825,1,41,
3034,16,0,235,1,
1297,3035,16,0,235,
1,43,3036,16,0,
235,1,1803,833,1,
1804,3037,16,0,235,
1,299,3038,16,0,
235,1,52,3039,16,
0,235,1,2318,3040,
16,0,235,1,2075,
3041,16,0,235,1,
1574,845,1,71,3042,
16,0,235,1,76,
3043,16,0,235,1,
1834,3044,16,0,235,
1,2337,3045,16,0,
235,1,79,3046,16,
0,235,1,1335,3047,
16,0,235,1,322,
3048,16,0,235,1,
85,3049,16,0,235,
1,89,3050,16,0,
235,1,346,3051,16,
0,235,1,2105,860,
1,2106,3052,16,0,
235,1,97,3053,16,
0,235,1,1860,867,
1,2364,873,1,102,
3054,16,0,235,1,
112,3055,16,0,235,
1,1117,3056,16,0,
235,1,1873,881,1,
1876,3057,16,0,235,
1,124,3058,16,0,
235,1,2136,888,1,
381,3059,16,0,235,
1,525,3060,16,0,
235,1,137,3061,16,
0,235,1,1901,3062,
16,0,235,1,1153,
3063,16,0,235,1,
151,3064,16,0,235,
1,1407,3065,16,0,
235,1,1659,3066,16,
0,235,1,2413,3067,
16,0,235,1,406,
3068,16,0,235,1,
1371,3069,16,0,235,
1,166,3070,16,0,
235,1,1622,3071,16,
0,235,1,1931,906,
1,1933,3072,16,0,
235,1,431,3073,16,
0,235,1,1585,3074,
16,0,235,1,182,
3075,16,0,235,1,
1189,3076,16,0,235,
1,1443,3077,16,0,
235,1,1695,3078,16,
0,235,1,2198,3079,
16,0,235,1,2702,
3080,16,0,235,1,
447,3081,16,0,235,
1,2458,922,1,2459,
928,1,1958,3082,16,
0,235,1,2462,935,
1,1657,940,1,2464,
945,1,199,3083,16,
0,235,1,459,3084,
16,0,235,1,462,
3085,16,0,235,1,
217,3086,16,0,235,
1,2227,954,1,1225,
3087,16,0,235,1,
1479,3088,16,0,235,
1,1731,3089,16,0,
235,1,1989,962,1,
1990,3090,16,0,235,
1,236,3091,16,0,
235,1,1756,3092,16,
0,235,1,38,3093,
19,234,1,38,3094,
5,84,1,1011,1148,
1,1012,3095,16,0,
232,1,1013,1304,1,
262,1165,1,1267,3096,
16,0,232,1,515,
3097,16,0,232,1,
1521,3098,16,0,232,
1,525,1262,1,283,
1218,1,2299,3099,16,
0,232,1,42,3100,
16,0,232,1,40,
1223,1,44,1229,1,
47,1230,1,1303,3101,
16,0,232,1,1555,
3102,16,0,232,1,
50,1247,1,48,1236,
1,49,1242,1,51,
1252,1,63,1268,1,
305,1257,1,66,1274,
1,67,1279,1,68,
1284,1,69,1289,1,
70,1294,1,73,3103,
16,0,232,1,74,
1299,1,328,1348,1,
1048,1467,1,82,3104,
16,0,232,1,1840,
3105,16,0,232,1,
1591,3106,16,0,232,
1,1341,3107,16,0,
232,1,1096,1358,1,
93,1364,1,352,1391,
1,107,3108,16,0,
232,1,1114,1389,1,
118,1397,1,1123,3109,
16,0,232,1,371,
1407,1,1628,3110,16,
0,232,1,375,1418,
1,1882,3111,16,0,
232,1,377,1423,1,
379,1428,1,380,1433,
1,883,1439,1,373,
1451,1,130,1456,1,
143,1461,1,387,3112,
16,0,232,1,1159,
3113,16,0,232,1,
157,1489,1,1413,3114,
16,0,232,1,1665,
3115,16,0,232,1,
412,3116,16,0,232,
1,1377,3117,16,0,
232,1,172,1515,1,
1939,3118,16,0,232,
1,437,3119,16,0,
232,1,188,1565,1,
942,1536,1,1195,3120,
16,0,232,1,1449,
3121,16,0,232,1,
1701,3122,16,0,232,
1,447,1557,1,2708,
3123,16,0,232,1,
205,1570,1,827,1377,
1,223,1580,1,476,
1590,1,477,1596,1,
1231,3124,16,0,232,
1,479,1606,1,480,
1611,1,1485,3125,16,
0,232,1,1737,3126,
16,0,232,1,242,
1624,1,478,1629,1,
1001,1634,1,1002,1639,
1,39,3127,19,222,
1,39,3128,5,84,
1,1011,1148,1,1012,
3129,16,0,220,1,
1013,1304,1,262,1165,
1,1267,3130,16,0,
220,1,515,3131,16,
0,220,1,1521,3132,
16,0,220,1,525,
1262,1,283,1218,1,
2299,3133,16,0,220,
1,42,3134,16,0,
220,1,40,1223,1,
44,1229,1,47,1230,
1,1303,3135,16,0,
220,1,1555,3136,16,
0,220,1,50,1247,
1,48,1236,1,49,
1242,1,51,1252,1,
63,1268,1,305,1257,
1,66,1274,1,67,
1279,1,68,1284,1,
69,1289,1,70,1294,
1,73,3137,16,0,
220,1,74,1299,1,
328,1348,1,1048,1467,
1,82,3138,16,0,
220,1,1840,3139,16,
0,220,1,1591,3140,
16,0,220,1,1341,
3141,16,0,220,1,
1096,1358,1,93,1364,
1,352,1391,1,107,
3142,16,0,220,1,
1114,1389,1,118,1397,
1,1123,3143,16,0,
220,1,371,1407,1,
1628,3144,16,0,220,
1,375,1418,1,1882,
3145,16,0,220,1,
377,1423,1,379,1428,
1,380,1433,1,883,
1439,1,373,1451,1,
130,1456,1,143,1461,
1,387,3146,16,0,
220,1,1159,3147,16,
0,220,1,157,1489,
1,1413,3148,16,0,
220,1,1665,3149,16,
0,220,1,412,3150,
16,0,220,1,1377,
3151,16,0,220,1,
172,1515,1,1939,3152,
16,0,220,1,437,
3153,16,0,220,1,
188,1565,1,942,1536,
1,1195,3154,16,0,
220,1,1449,3155,16,
0,220,1,1701,3156,
16,0,220,1,447,
1557,1,2708,3157,16,
0,220,1,205,1570,
1,827,1377,1,223,
1580,1,476,1590,1,
477,1596,1,1231,3158,
16,0,220,1,479,
1606,1,480,1611,1,
1485,3159,16,0,220,
1,1737,3160,16,0,
220,1,242,1624,1,
478,1629,1,1001,1634,
1,1002,1639,1,40,
3161,19,210,1,40,
3162,5,84,1,1011,
1148,1,1012,3163,16,
0,208,1,1013,1304,
1,262,1165,1,1267,
3164,16,0,208,1,
515,3165,16,0,208,
1,1521,3166,16,0,
208,1,525,1262,1,
283,1218,1,2299,3167,
16,0,208,1,42,
3168,16,0,208,1,
40,1223,1,44,1229,
1,47,1230,1,1303,
3169,16,0,208,1,
1555,3170,16,0,208,
1,50,1247,1,48,
1236,1,49,1242,1,
51,1252,1,63,1268,
1,305,1257,1,66,
1274,1,67,1279,1,
68,1284,1,69,1289,
1,70,1294,1,73,
3171,16,0,208,1,
74,1299,1,328,1348,
1,1048,1467,1,82,
3172,16,0,208,1,
1840,3173,16,0,208,
1,1591,3174,16,0,
208,1,1341,3175,16,
0,208,1,1096,1358,
1,93,1364,1,352,
1391,1,107,3176,16,
0,208,1,1114,1389,
1,118,3177,16,0,
208,1,1123,3178,16,
0,208,1,371,1407,
1,1628,3179,16,0,
208,1,375,1418,1,
1882,3180,16,0,208,
1,377,1423,1,379,
1428,1,380,1433,1,
883,3181,16,0,208,
1,373,1451,1,130,
3182,16,0,208,1,
143,3183,16,0,208,
1,387,3184,16,0,
208,1,1159,3185,16,
0,208,1,157,3186,
16,0,208,1,1413,
3187,16,0,208,1,
1665,3188,16,0,208,
1,412,3189,16,0,
208,1,1377,3190,16,
0,208,1,172,3191,
16,0,208,1,1939,
3192,16,0,208,1,
437,3193,16,0,208,
1,188,3194,16,0,
208,1,942,1536,1,
1195,3195,16,0,208,
1,1449,3196,16,0,
208,1,1701,3197,16,
0,208,1,447,1557,
1,2708,3198,16,0,
208,1,205,3199,16,
0,208,1,827,3200,
16,0,208,1,223,
3201,16,0,208,1,
476,1590,1,477,1596,
1,1231,3202,16,0,
208,1,479,1606,1,
480,1611,1,1485,3203,
16,0,208,1,1737,
3204,16,0,208,1,
242,3205,16,0,208,
1,478,1629,1,1001,
1634,1,1002,1639,1,
41,3206,19,172,1,
41,3207,5,84,1,
1011,1148,1,1012,3208,
16,0,170,1,1013,
1304,1,262,1165,1,
1267,3209,16,0,170,
1,515,3210,16,0,
170,1,1521,3211,16,
0,170,1,525,1262,
1,283,1218,1,2299,
3212,16,0,170,1,
42,3213,16,0,170,
1,40,1223,1,44,
1229,1,47,1230,1,
1303,3214,16,0,170,
1,1555,3215,16,0,
170,1,50,1247,1,
48,1236,1,49,1242,
1,51,1252,1,63,
1268,1,305,1257,1,
66,1274,1,67,1279,
1,68,1284,1,69,
1289,1,70,1294,1,
73,3216,16,0,170,
1,74,1299,1,328,
1348,1,1048,1467,1,
82,3217,16,0,170,
1,1840,3218,16,0,
170,1,1591,3219,16,
0,170,1,1341,3220,
16,0,170,1,1096,
1358,1,93,1364,1,
352,1391,1,107,3221,
16,0,170,1,1114,
1389,1,118,3222,16,
0,170,1,1123,3223,
16,0,170,1,371,
1407,1,1628,3224,16,
0,170,1,375,1418,
1,1882,3225,16,0,
170,1,377,1423,1,
379,1428,1,380,1433,
1,883,3226,16,0,
170,1,373,1451,1,
130,3227,16,0,170,
1,143,3228,16,0,
170,1,387,3229,16,
0,170,1,1159,3230,
16,0,170,1,157,
3231,16,0,170,1,
1413,3232,16,0,170,
1,1665,3233,16,0,
170,1,412,3234,16,
0,170,1,1377,3235,
16,0,170,1,172,
3236,16,0,170,1,
1939,3237,16,0,170,
1,437,3238,16,0,
170,1,188,3239,16,
0,170,1,942,1536,
1,1195,3240,16,0,
170,1,1449,3241,16,
0,170,1,1701,3242,
16,0,170,1,447,
1557,1,2708,3243,16,
0,170,1,205,3244,
16,0,170,1,827,
3245,16,0,170,1,
223,3246,16,0,170,
1,476,1590,1,477,
1596,1,1231,3247,16,
0,170,1,479,1606,
1,480,1611,1,1485,
3248,16,0,170,1,
1737,3249,16,0,170,
1,242,3250,16,0,
170,1,478,1629,1,
1001,1634,1,1002,1639,
1,42,3251,19,408,
1,42,3252,5,38,
1,1901,3253,16,0,
406,1,2075,3254,16,
0,406,1,1860,867,
1,1803,833,1,1804,
3255,16,0,406,1,
2413,3256,16,0,406,
1,2198,3257,16,0,
406,1,1873,881,1,
1657,940,1,1989,962,
1,1990,3258,16,0,
406,1,1775,3259,16,
0,406,1,32,3260,
16,0,406,1,2105,
860,1,2106,3261,16,
0,406,1,2364,873,
1,2227,954,1,2337,
3262,16,0,406,1,
2021,764,1,2458,922,
1,2459,928,1,2462,
935,1,2136,888,1,
2464,945,1,2029,771,
1,2030,777,1,2031,
782,1,2032,787,1,
2033,792,1,2035,798,
1,2037,803,1,2039,
808,1,1931,906,1,
2041,814,1,2043,820,
1,2045,825,1,1574,
845,1,1958,3263,16,
0,406,1,43,3264,
19,498,1,43,3265,
5,25,1,2035,798,
1,2037,803,1,2039,
808,1,2041,814,1,
2227,954,1,2043,820,
1,1657,940,1,1860,
867,1,2136,888,1,
2021,764,1,2459,928,
1,1574,845,1,2105,
3266,16,0,609,1,
1931,906,1,1873,881,
1,2031,782,1,1803,
833,1,1989,3267,16,
0,496,1,2464,945,
1,2029,771,1,2030,
777,1,2364,873,1,
2032,787,1,2033,792,
1,2045,825,1,44,
3268,19,262,1,44,
3269,5,38,1,1901,
3270,16,0,260,1,
2075,3271,16,0,260,
1,1860,867,1,1803,
833,1,1804,3272,16,
0,260,1,2413,3273,
16,0,260,1,2198,
3274,16,0,260,1,
1873,881,1,1657,940,
1,1989,962,1,1990,
3275,16,0,260,1,
1775,3276,16,0,260,
1,32,3277,16,0,
260,1,2105,860,1,
2106,3278,16,0,260,
1,2364,873,1,2227,
954,1,2337,3279,16,
0,260,1,2021,764,
1,2458,922,1,2459,
928,1,2462,935,1,
2136,888,1,2464,945,
1,2029,771,1,2030,
777,1,2031,782,1,
2032,787,1,2033,792,
1,2035,798,1,2037,
803,1,2039,808,1,
1931,906,1,2041,814,
1,2043,820,1,2045,
825,1,1574,845,1,
1958,3280,16,0,260,
1,45,3281,19,298,
1,45,3282,5,39,
1,1901,3283,16,0,
325,1,2075,3284,16,
0,325,1,1860,867,
1,1803,833,1,1804,
3285,16,0,325,1,
2413,3286,16,0,325,
1,2198,3287,16,0,
325,1,1873,881,1,
1657,940,1,1989,962,
1,1990,3288,16,0,
325,1,1775,3289,16,
0,325,1,32,3290,
16,0,325,1,2105,
860,1,2106,3291,16,
0,325,1,2364,873,
1,2227,954,1,2337,
3292,16,0,325,1,
2021,764,1,2458,922,
1,2459,928,1,2462,
935,1,2136,888,1,
2464,945,1,2029,771,
1,2030,777,1,2031,
782,1,2032,787,1,
2033,792,1,2035,798,
1,2037,803,1,2039,
808,1,1931,906,1,
2041,814,1,2043,820,
1,2045,825,1,1832,
3293,16,0,296,1,
1574,845,1,1958,3294,
16,0,325,1,46,
3295,19,717,1,46,
3296,5,38,1,1901,
3297,16,0,715,1,
2075,3298,16,0,715,
1,1860,867,1,1803,
833,1,1804,3299,16,
0,715,1,2413,3300,
16,0,715,1,2198,
3301,16,0,715,1,
1873,881,1,1657,940,
1,1989,962,1,1990,
3302,16,0,715,1,
1775,3303,16,0,715,
1,32,3304,16,0,
715,1,2105,860,1,
2106,3305,16,0,715,
1,2364,873,1,2227,
954,1,2337,3306,16,
0,715,1,2021,764,
1,2458,922,1,2459,
928,1,2462,935,1,
2136,888,1,2464,945,
1,2029,771,1,2030,
777,1,2031,782,1,
2032,787,1,2033,792,
1,2035,798,1,2037,
803,1,2039,808,1,
1931,906,1,2041,814,
1,2043,820,1,2045,
825,1,1574,845,1,
1958,3307,16,0,715,
1,47,3308,19,601,
1,47,3309,5,19,
1,0,3310,16,0,
702,1,2760,3311,17,
3312,15,3313,4,36,
37,0,71,0,108,
0,111,0,98,0,
97,0,108,0,68,
0,101,0,102,0,
105,0,110,0,105,
0,116,0,105,0,
111,0,110,0,115,
0,1,-1,1,5,
3314,20,3315,4,38,
71,0,108,0,111,
0,98,0,97,0,
108,0,68,0,101,
0,102,0,105,0,
110,0,105,0,116,
0,105,0,111,0,
110,0,115,0,95,
0,49,0,1,154,
1,3,1,2,1,
1,3316,22,1,3,
1,2022,3317,16,0,
599,1,2675,731,1,
2750,3318,16,0,702,
1,2738,3319,17,3320,
15,3321,4,52,37,
0,71,0,108,0,
111,0,98,0,97,
0,108,0,86,0,
97,0,114,0,105,
0,97,0,98,0,
108,0,101,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,1,-1,1,5,
3322,20,3323,4,54,
71,0,108,0,111,
0,98,0,97,0,
108,0,86,0,97,
0,114,0,105,0,
97,0,98,0,108,
0,101,0,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
95,0,49,0,1,
158,1,3,1,3,
1,2,3324,22,1,
7,1,2680,3325,16,
0,702,1,2459,928,
1,2757,3326,17,3327,
15,3313,1,-1,1,
5,3328,20,3329,4,
38,71,0,108,0,
111,0,98,0,97,
0,108,0,68,0,
101,0,102,0,105,
0,110,0,105,0,
116,0,105,0,111,
0,110,0,115,0,
95,0,52,0,1,
157,1,3,1,3,
1,2,3330,22,1,
6,1,2758,3331,17,
3332,15,3313,1,-1,
1,5,3333,20,3334,
4,38,71,0,108,
0,111,0,98,0,
97,0,108,0,68,
0,101,0,102,0,
105,0,110,0,105,
0,116,0,105,0,
111,0,110,0,115,
0,95,0,50,0,
1,155,1,3,1,
3,1,2,3335,22,
1,4,1,2759,3336,
17,3337,15,3313,1,
-1,1,5,3338,20,
3339,4,38,71,0,
108,0,111,0,98,
0,97,0,108,0,
68,0,101,0,102,
0,105,0,110,0,
105,0,116,0,105,
0,111,0,110,0,
115,0,95,0,51,
0,1,156,1,3,
1,2,1,1,3340,
22,1,5,1,2464,
945,1,2466,3341,17,
3342,15,3343,4,50,
37,0,71,0,108,
0,111,0,98,0,
97,0,108,0,70,
0,117,0,110,0,
99,0,116,0,105,
0,111,0,110,0,
68,0,101,0,102,
0,105,0,110,0,
105,0,116,0,105,
0,111,0,110,0,
1,-1,1,5,3344,
20,3345,4,52,71,
0,108,0,111,0,
98,0,97,0,108,
0,70,0,117,0,
110,0,99,0,116,
0,105,0,111,0,
110,0,68,0,101,
0,102,0,105,0,
110,0,105,0,116,
0,105,0,111,0,
110,0,95,0,50,
0,1,161,1,3,
1,7,1,6,3346,
22,1,10,1,2727,
3347,17,3348,15,3321,
1,-1,1,5,3349,
20,3350,4,54,71,
0,108,0,111,0,
98,0,97,0,108,
0,86,0,97,0,
114,0,105,0,97,
0,98,0,108,0,
101,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,95,
0,50,0,1,159,
1,3,1,5,1,
4,3351,22,1,8,
1,2739,3352,16,0,
702,1,2683,753,1,
2684,742,1,2587,737,
1,2699,3353,17,3354,
15,3343,1,-1,1,
5,3355,20,3356,4,
52,71,0,108,0,
111,0,98,0,97,
0,108,0,70,0,
117,0,110,0,99,
0,116,0,105,0,
111,0,110,0,68,
0,101,0,102,0,
105,0,110,0,105,
0,116,0,105,0,
111,0,110,0,95,
0,49,0,1,160,
1,3,1,6,1,
5,3357,22,1,9,
1,48,3358,19,353,
1,48,3359,5,54,
1,0,3360,16,0,
351,1,2462,935,1,
2075,3361,16,0,533,
1,1860,867,1,1803,
833,1,1804,3362,16,
0,533,1,2757,3326,
1,2738,3319,1,2739,
3363,16,0,351,1,
2413,3364,16,0,533,
1,2198,3365,16,0,
533,1,1873,881,1,
1657,940,1,2030,777,
1,2750,3366,16,0,
351,1,1989,962,1,
1990,3367,16,0,533,
1,2459,928,1,1775,
3368,16,0,533,1,
32,3369,16,0,533,
1,2758,3331,1,2105,
860,1,2760,3311,1,
2045,825,1,2683,753,
1,2684,742,1,2227,
954,1,2337,3370,16,
0,533,1,2021,764,
1,2458,922,1,1901,
3371,16,0,533,1,
2680,3372,16,0,351,
1,2136,888,1,2464,
945,1,2029,771,1,
2466,3341,1,2031,782,
1,2032,787,1,2033,
792,1,2675,731,1,
2035,798,1,2364,873,
1,2039,808,1,1931,
906,1,2041,814,1,
2587,737,1,2043,820,
1,2699,3353,1,2727,
3347,1,2037,803,1,
1574,845,1,2759,3336,
1,2106,3373,16,0,
533,1,1958,3374,16,
0,533,1,49,3375,
19,538,1,49,3376,
5,38,1,1901,3377,
16,0,536,1,2075,
3378,16,0,536,1,
1860,867,1,1803,833,
1,1804,3379,16,0,
536,1,2413,3380,16,
0,536,1,2198,3381,
16,0,536,1,1873,
881,1,1657,940,1,
1989,962,1,1990,3382,
16,0,536,1,1775,
3383,16,0,536,1,
32,3384,16,0,536,
1,2105,860,1,2106,
3385,16,0,536,1,
2364,873,1,2227,954,
1,2337,3386,16,0,
536,1,2021,764,1,
2458,922,1,2459,928,
1,2462,935,1,2136,
888,1,2464,945,1,
2029,771,1,2030,777,
1,2031,782,1,2032,
787,1,2033,792,1,
2035,798,1,2037,803,
1,2039,808,1,1931,
906,1,2041,814,1,
2043,820,1,2045,825,
1,1574,845,1,1958,
3387,16,0,536,1,
50,3388,19,649,1,
50,3389,5,38,1,
1901,3390,16,0,647,
1,2075,3391,16,0,
647,1,1860,867,1,
1803,833,1,1804,3392,
16,0,647,1,2413,
3393,16,0,647,1,
2198,3394,16,0,647,
1,1873,881,1,1657,
940,1,1989,962,1,
1990,3395,16,0,647,
1,1775,3396,16,0,
647,1,32,3397,16,
0,647,1,2105,860,
1,2106,3398,16,0,
647,1,2364,873,1,
2227,954,1,2337,3399,
16,0,647,1,2021,
764,1,2458,922,1,
2459,928,1,2462,935,
1,2136,888,1,2464,
945,1,2029,771,1,
2030,777,1,2031,782,
1,2032,787,1,2033,
792,1,2035,798,1,
2037,803,1,2039,808,
1,1931,906,1,2041,
814,1,2043,820,1,
2045,825,1,1574,845,
1,1958,3400,16,0,
647,1,51,3401,19,
127,1,51,3402,5,
54,1,0,3403,16,
0,125,1,2727,3347,
1,2075,3404,16,0,
125,1,1860,867,1,
2515,3405,16,0,462,
1,1804,3406,16,0,
125,1,10,3407,16,
0,125,1,2757,3326,
1,2738,3319,1,2739,
3408,16,0,125,1,
2413,3409,16,0,125,
1,2198,3410,16,0,
125,1,1657,940,1,
1873,881,1,21,3411,
16,0,125,1,2529,
3412,16,0,125,1,
2030,777,1,1989,962,
1,1990,3413,16,0,
125,1,2459,928,1,
1775,3414,16,0,125,
1,32,3415,16,0,
125,1,2758,3331,1,
2105,860,1,2760,3311,
1,2045,825,1,2686,
3416,16,0,125,1,
2227,954,1,2337,3417,
16,0,125,1,52,
3418,16,0,125,1,
1803,833,1,2458,922,
1,1901,3419,16,0,
125,1,2462,935,1,
2136,888,1,2464,945,
1,2029,771,1,2466,
3341,1,2031,782,1,
2032,787,1,2033,792,
1,2035,798,1,2364,
873,1,2039,808,1,
1931,906,1,2041,814,
1,2021,764,1,2043,
820,1,2699,3353,1,
2037,803,1,1574,845,
1,2759,3336,1,2106,
3420,16,0,125,1,
1958,3421,16,0,125,
1,52,3422,19,124,
1,52,3423,5,53,
1,0,3424,16,0,
122,1,2727,3347,1,
2075,3425,16,0,122,
1,1860,867,1,1804,
3426,16,0,122,1,
10,3427,16,0,122,
1,2757,3326,1,2738,
3319,1,2739,3428,16,
0,122,1,2413,3429,
16,0,122,1,2198,
3430,16,0,122,1,
1657,940,1,1873,881,
1,21,3431,16,0,
122,1,2529,3432,16,
0,122,1,2030,777,
1,1989,962,1,1990,
3433,16,0,122,1,
2459,928,1,1775,3434,
16,0,122,1,32,
3435,16,0,122,1,
2758,3331,1,2105,860,
1,2760,3311,1,2045,
825,1,2686,3436,16,
0,122,1,2227,954,
1,2337,3437,16,0,
122,1,52,3438,16,
0,122,1,1803,833,
1,2458,922,1,1901,
3439,16,0,122,1,
2462,935,1,2136,888,
1,2464,945,1,2029,
771,1,2466,3341,1,
2031,782,1,2032,787,
1,2033,792,1,2035,
798,1,2364,873,1,
2039,808,1,1931,906,
1,2041,814,1,2021,
764,1,2043,820,1,
2699,3353,1,2037,803,
1,1574,845,1,2759,
3336,1,2106,3440,16,
0,122,1,1958,3441,
16,0,122,1,53,
3442,19,121,1,53,
3443,5,53,1,0,
3444,16,0,119,1,
2727,3347,1,2075,3445,
16,0,119,1,1860,
867,1,1804,3446,16,
0,119,1,10,3447,
16,0,119,1,2757,
3326,1,2738,3319,1,
2739,3448,16,0,119,
1,2413,3449,16,0,
119,1,2198,3450,16,
0,119,1,1657,940,
1,1873,881,1,21,
3451,16,0,119,1,
2529,3452,16,0,119,
1,2030,777,1,1989,
962,1,1990,3453,16,
0,119,1,2459,928,
1,1775,3454,16,0,
119,1,32,3455,16,
0,119,1,2758,3331,
1,2105,860,1,2760,
3311,1,2045,825,1,
2686,3456,16,0,119,
1,2227,954,1,2337,
3457,16,0,119,1,
52,3458,16,0,119,
1,1803,833,1,2458,
922,1,1901,3459,16,
0,119,1,2462,935,
1,2136,888,1,2464,
945,1,2029,771,1,
2466,3341,1,2031,782,
1,2032,787,1,2033,
792,1,2035,798,1,
2364,873,1,2039,808,
1,1931,906,1,2041,
814,1,2021,764,1,
2043,820,1,2699,3353,
1,2037,803,1,1574,
845,1,2759,3336,1,
2106,3460,16,0,119,
1,1958,3461,16,0,
119,1,54,3462,19,
118,1,54,3463,5,
53,1,0,3464,16,
0,116,1,2727,3347,
1,2075,3465,16,0,
116,1,1860,867,1,
1804,3466,16,0,116,
1,10,3467,16,0,
116,1,2757,3326,1,
2738,3319,1,2739,3468,
16,0,116,1,2413,
3469,16,0,116,1,
2198,3470,16,0,116,
1,1657,940,1,1873,
881,1,21,3471,16,
0,116,1,2529,3472,
16,0,116,1,2030,
777,1,1989,962,1,
1990,3473,16,0,116,
1,2459,928,1,1775,
3474,16,0,116,1,
32,3475,16,0,116,
1,2758,3331,1,2105,
860,1,2760,3311,1,
2045,825,1,2686,3476,
16,0,116,1,2227,
954,1,2337,3477,16,
0,116,1,52,3478,
16,0,116,1,1803,
833,1,2458,922,1,
1901,3479,16,0,116,
1,2462,935,1,2136,
888,1,2464,945,1,
2029,771,1,2466,3341,
1,2031,782,1,2032,
787,1,2033,792,1,
2035,798,1,2364,873,
1,2039,808,1,1931,
906,1,2041,814,1,
2021,764,1,2043,820,
1,2699,3353,1,2037,
803,1,1574,845,1,
2759,3336,1,2106,3480,
16,0,116,1,1958,
3481,16,0,116,1,
55,3482,19,115,1,
55,3483,5,54,1,
0,3484,16,0,113,
1,2727,3347,1,2075,
3485,16,0,113,1,
1860,867,1,1804,3486,
16,0,113,1,10,
3487,16,0,113,1,
2757,3326,1,2738,3319,
1,2739,3488,16,0,
113,1,2413,3489,16,
0,113,1,2198,3490,
16,0,113,1,1657,
940,1,1873,881,1,
21,3491,16,0,113,
1,2529,3492,16,0,
113,1,2030,777,1,
1989,962,1,1990,3493,
16,0,113,1,2459,
928,1,1775,3494,16,
0,113,1,32,3495,
16,0,113,1,2758,
3331,1,2105,860,1,
2760,3311,1,2045,825,
1,2686,3496,16,0,
113,1,2227,954,1,
2337,3497,16,0,113,
1,52,3498,16,0,
113,1,1803,833,1,
2458,922,1,1901,3499,
16,0,113,1,2462,
935,1,2136,888,1,
2464,945,1,2029,771,
1,2466,3341,1,2031,
782,1,2032,787,1,
2033,792,1,2035,798,
1,2364,873,1,2039,
808,1,1931,906,1,
2041,814,1,2021,764,
1,2043,820,1,2699,
3353,1,2037,803,1,
1574,845,1,2759,3336,
1,2106,3500,16,0,
113,1,1958,3501,16,
0,113,1,2506,3502,
16,0,448,1,56,
3503,19,112,1,56,
3504,5,53,1,0,
3505,16,0,110,1,
2727,3347,1,2075,3506,
16,0,110,1,1860,
867,1,1804,3507,16,
0,110,1,10,3508,
16,0,110,1,2757,
3326,1,2738,3319,1,
2739,3509,16,0,110,
1,2413,3510,16,0,
110,1,2198,3511,16,
0,110,1,1657,940,
1,1873,881,1,21,
3512,16,0,110,1,
2529,3513,16,0,110,
1,2030,777,1,1989,
962,1,1990,3514,16,
0,110,1,2459,928,
1,1775,3515,16,0,
110,1,32,3516,16,
0,110,1,2758,3331,
1,2105,860,1,2760,
3311,1,2045,825,1,
2686,3517,16,0,110,
1,2227,954,1,2337,
3518,16,0,110,1,
52,3519,16,0,110,
1,1803,833,1,2458,
922,1,1901,3520,16,
0,110,1,2462,935,
1,2136,888,1,2464,
945,1,2029,771,1,
2466,3341,1,2031,782,
1,2032,787,1,2033,
792,1,2035,798,1,
2364,873,1,2039,808,
1,1931,906,1,2041,
814,1,2021,764,1,
2043,820,1,2699,3353,
1,2037,803,1,1574,
845,1,2759,3336,1,
2106,3521,16,0,110,
1,1958,3522,16,0,
110,1,57,3523,19,
109,1,57,3524,5,
53,1,0,3525,16,
0,107,1,2727,3347,
1,2075,3526,16,0,
107,1,1860,867,1,
1804,3527,16,0,107,
1,10,3528,16,0,
107,1,2757,3326,1,
2738,3319,1,2739,3529,
16,0,107,1,2413,
3530,16,0,107,1,
2198,3531,16,0,107,
1,1657,940,1,1873,
881,1,21,3532,16,
0,107,1,2529,3533,
16,0,107,1,2030,
777,1,1989,962,1,
1990,3534,16,0,107,
1,2459,928,1,1775,
3535,16,0,107,1,
32,3536,16,0,107,
1,2758,3331,1,2105,
860,1,2760,3311,1,
2045,825,1,2686,3537,
16,0,107,1,2227,
954,1,2337,3538,16,
0,107,1,52,3539,
16,0,107,1,1803,
833,1,2458,922,1,
1901,3540,16,0,107,
1,2462,935,1,2136,
888,1,2464,945,1,
2029,771,1,2466,3341,
1,2031,782,1,2032,
787,1,2033,792,1,
2035,798,1,2364,873,
1,2039,808,1,1931,
906,1,2041,814,1,
2021,764,1,2043,820,
1,2699,3353,1,2037,
803,1,1574,845,1,
2759,3336,1,2106,3541,
16,0,107,1,1958,
3542,16,0,107,1,
58,3543,19,443,1,
58,3544,5,18,1,
2590,1725,1,2591,1730,
1,2593,3545,16,0,
441,1,2632,3546,16,
0,441,1,2522,1673,
1,2588,1715,1,2527,
1680,1,2459,928,1,
2464,945,1,2542,1687,
1,2544,3547,16,0,
441,1,2583,1710,1,
2584,1694,1,2585,1700,
1,2586,1705,1,2513,
1667,1,2470,3548,16,
0,441,1,2589,1720,
1,59,3549,19,440,
1,59,3550,5,18,
1,2590,1725,1,2591,
1730,1,2593,3551,16,
0,438,1,2632,3552,
16,0,438,1,2522,
1673,1,2588,1715,1,
2527,1680,1,2459,928,
1,2464,945,1,2542,
1687,1,2544,3553,16,
0,438,1,2583,1710,
1,2584,1694,1,2585,
1700,1,2586,1705,1,
2513,1667,1,2470,3554,
16,0,438,1,2589,
1720,1,60,3555,19,
437,1,60,3556,5,
18,1,2590,1725,1,
2591,1730,1,2593,3557,
16,0,435,1,2632,
3558,16,0,435,1,
2522,1673,1,2588,1715,
1,2527,1680,1,2459,
928,1,2464,945,1,
2542,1687,1,2544,3559,
16,0,435,1,2583,
1710,1,2584,1694,1,
2585,1700,1,2586,1705,
1,2513,1667,1,2470,
3560,16,0,435,1,
2589,1720,1,61,3561,
19,394,1,61,3562,
5,18,1,2590,1725,
1,2591,1730,1,2593,
3563,16,0,392,1,
2632,3564,16,0,392,
1,2522,1673,1,2588,
1715,1,2527,1680,1,
2459,928,1,2464,945,
1,2542,1687,1,2544,
3565,16,0,392,1,
2583,1710,1,2584,1694,
1,2585,1700,1,2586,
1705,1,2513,1667,1,
2470,3566,16,0,392,
1,2589,1720,1,62,
3567,19,391,1,62,
3568,5,18,1,2590,
1725,1,2591,1730,1,
2593,3569,16,0,389,
1,2632,3570,16,0,
389,1,2522,1673,1,
2588,1715,1,2527,1680,
1,2459,928,1,2464,
945,1,2542,1687,1,
2544,3571,16,0,389,
1,2583,1710,1,2584,
1694,1,2585,1700,1,
2586,1705,1,2513,1667,
1,2470,3572,16,0,
389,1,2589,1720,1,
63,3573,19,388,1,
63,3574,5,18,1,
2590,1725,1,2591,1730,
1,2593,3575,16,0,
386,1,2632,3576,16,
0,386,1,2522,1673,
1,2588,1715,1,2527,
1680,1,2459,928,1,
2464,945,1,2542,1687,
1,2544,3577,16,0,
386,1,2583,1710,1,
2584,1694,1,2585,1700,
1,2586,1705,1,2513,
1667,1,2470,3578,16,
0,386,1,2589,1720,
1,64,3579,19,385,
1,64,3580,5,18,
1,2590,1725,1,2591,
1730,1,2593,3581,16,
0,383,1,2632,3582,
16,0,383,1,2522,
1673,1,2588,1715,1,
2527,1680,1,2459,928,
1,2464,945,1,2542,
1687,1,2544,3583,16,
0,383,1,2583,1710,
1,2584,1694,1,2585,
1700,1,2586,1705,1,
2513,1667,1,2470,3584,
16,0,383,1,2589,
1720,1,65,3585,19,
434,1,65,3586,5,
18,1,2590,1725,1,
2591,1730,1,2593,3587,
16,0,432,1,2632,
3588,16,0,432,1,
2522,1673,1,2588,1715,
1,2527,1680,1,2459,
928,1,2464,945,1,
2542,1687,1,2544,3589,
16,0,432,1,2583,
1710,1,2584,1694,1,
2585,1700,1,2586,1705,
1,2513,1667,1,2470,
3590,16,0,432,1,
2589,1720,1,66,3591,
19,431,1,66,3592,
5,18,1,2590,1725,
1,2591,1730,1,2593,
3593,16,0,429,1,
2632,3594,16,0,429,
1,2522,1673,1,2588,
1715,1,2527,1680,1,
2459,928,1,2464,945,
1,2542,1687,1,2544,
3595,16,0,429,1,
2583,1710,1,2584,1694,
1,2585,1700,1,2586,
1705,1,2513,1667,1,
2470,3596,16,0,429,
1,2589,1720,1,67,
3597,19,428,1,67,
3598,5,18,1,2590,
1725,1,2591,1730,1,
2593,3599,16,0,426,
1,2632,3600,16,0,
426,1,2522,1673,1,
2588,1715,1,2527,1680,
1,2459,928,1,2464,
945,1,2542,1687,1,
2544,3601,16,0,426,
1,2583,1710,1,2584,
1694,1,2585,1700,1,
2586,1705,1,2513,1667,
1,2470,3602,16,0,
426,1,2589,1720,1,
68,3603,19,681,1,
68,3604,5,18,1,
2590,1725,1,2591,1730,
1,2593,3605,16,0,
679,1,2632,3606,16,
0,679,1,2522,1673,
1,2588,1715,1,2527,
1680,1,2459,928,1,
2464,945,1,2542,1687,
1,2544,3607,16,0,
679,1,2583,1710,1,
2584,1694,1,2585,1700,
1,2586,1705,1,2513,
1667,1,2470,3608,16,
0,679,1,2589,1720,
1,69,3609,19,364,
1,69,3610,5,18,
1,2590,1725,1,2591,
1730,1,2593,3611,16,
0,362,1,2632,3612,
16,0,362,1,2522,
1673,1,2588,1715,1,
2527,1680,1,2459,928,
1,2464,945,1,2542,
1687,1,2544,3613,16,
0,362,1,2583,1710,
1,2584,1694,1,2585,
1700,1,2586,1705,1,
2513,1667,1,2470,3614,
16,0,362,1,2589,
1720,1,70,3615,19,
361,1,70,3616,5,
18,1,2590,1725,1,
2591,1730,1,2593,3617,
16,0,359,1,2632,
3618,16,0,359,1,
2522,1673,1,2588,1715,
1,2527,1680,1,2459,
928,1,2464,945,1,
2542,1687,1,2544,3619,
16,0,359,1,2583,
1710,1,2584,1694,1,
2585,1700,1,2586,1705,
1,2513,1667,1,2470,
3620,16,0,359,1,
2589,1720,1,71,3621,
19,358,1,71,3622,
5,18,1,2590,1725,
1,2591,1730,1,2593,
3623,16,0,356,1,
2632,3624,16,0,356,
1,2522,1673,1,2588,
1715,1,2527,1680,1,
2459,928,1,2464,945,
1,2542,1687,1,2544,
3625,16,0,356,1,
2583,1710,1,2584,1694,
1,2585,1700,1,2586,
1705,1,2513,1667,1,
2470,3626,16,0,356,
1,2589,1720,1,72,
3627,19,424,1,72,
3628,5,18,1,2590,
1725,1,2591,1730,1,
2593,3629,16,0,422,
1,2632,3630,16,0,
422,1,2522,1673,1,
2588,1715,1,2527,1680,
1,2459,928,1,2464,
945,1,2542,1687,1,
2544,3631,16,0,422,
1,2583,1710,1,2584,
1694,1,2585,1700,1,
2586,1705,1,2513,1667,
1,2470,3632,16,0,
422,1,2589,1720,1,
73,3633,19,531,1,
73,3634,5,18,1,
2590,1725,1,2591,1730,
1,2593,3635,16,0,
529,1,2632,3636,16,
0,529,1,2522,1673,
1,2588,1715,1,2527,
1680,1,2459,928,1,
2464,945,1,2542,1687,
1,2544,3637,16,0,
529,1,2583,1710,1,
2584,1694,1,2585,1700,
1,2586,1705,1,2513,
1667,1,2470,3638,16,
0,529,1,2589,1720,
1,74,3639,19,420,
1,74,3640,5,18,
1,2590,1725,1,2591,
1730,1,2593,3641,16,
0,418,1,2632,3642,
16,0,418,1,2522,
1673,1,2588,1715,1,
2527,1680,1,2459,928,
1,2464,945,1,2542,
1687,1,2544,3643,16,
0,418,1,2583,1710,
1,2584,1694,1,2585,
1700,1,2586,1705,1,
2513,1667,1,2470,3644,
16,0,418,1,2589,
1720,1,75,3645,19,
515,1,75,3646,5,
18,1,2590,1725,1,
2591,1730,1,2593,3647,
16,0,513,1,2632,
3648,16,0,513,1,
2522,1673,1,2588,1715,
1,2527,1680,1,2459,
928,1,2464,945,1,
2542,1687,1,2544,3649,
16,0,513,1,2583,
1710,1,2584,1694,1,
2585,1700,1,2586,1705,
1,2513,1667,1,2470,
3650,16,0,513,1,
2589,1720,1,76,3651,
19,512,1,76,3652,
5,18,1,2590,1725,
1,2591,1730,1,2593,
3653,16,0,510,1,
2632,3654,16,0,510,
1,2522,1673,1,2588,
1715,1,2527,1680,1,
2459,928,1,2464,945,
1,2542,1687,1,2544,
3655,16,0,510,1,
2583,1710,1,2584,1694,
1,2585,1700,1,2586,
1705,1,2513,1667,1,
2470,3656,16,0,510,
1,2589,1720,1,77,
3657,19,404,1,77,
3658,5,18,1,2590,
1725,1,2591,1730,1,
2593,3659,16,0,402,
1,2632,3660,16,0,
402,1,2522,1673,1,
2588,1715,1,2527,1680,
1,2459,928,1,2464,
945,1,2542,1687,1,
2544,3661,16,0,402,
1,2583,1710,1,2584,
1694,1,2585,1700,1,
2586,1705,1,2513,1667,
1,2470,3662,16,0,
402,1,2589,1720,1,
78,3663,19,401,1,
78,3664,5,18,1,
2590,1725,1,2591,1730,
1,2593,3665,16,0,
399,1,2632,3666,16,
0,399,1,2522,1673,
1,2588,1715,1,2527,
1680,1,2459,928,1,
2464,945,1,2542,1687,
1,2544,3667,16,0,
399,1,2583,1710,1,
2584,1694,1,2585,1700,
1,2586,1705,1,2513,
1667,1,2470,3668,16,
0,399,1,2589,1720,
1,79,3669,19,509,
1,79,3670,5,18,
1,2590,1725,1,2591,
1730,1,2593,3671,16,
0,507,1,2632,3672,
16,0,507,1,2522,
1673,1,2588,1715,1,
2527,1680,1,2459,928,
1,2464,945,1,2542,
1687,1,2544,3673,16,
0,507,1,2583,1710,
1,2584,1694,1,2585,
1700,1,2586,1705,1,
2513,1667,1,2470,3674,
16,0,507,1,2589,
1720,1,80,3675,19,
417,1,80,3676,5,
18,1,2590,1725,1,
2591,1730,1,2593,3677,
16,0,415,1,2632,
3678,16,0,415,1,
2522,1673,1,2588,1715,
1,2527,1680,1,2459,
928,1,2464,945,1,
2542,1687,1,2544,3679,
16,0,415,1,2583,
1710,1,2584,1694,1,
2585,1700,1,2586,1705,
1,2513,1667,1,2470,
3680,16,0,415,1,
2589,1720,1,81,3681,
19,382,1,81,3682,
5,18,1,2590,1725,
1,2591,1730,1,2593,
3683,16,0,380,1,
2632,3684,16,0,380,
1,2522,1673,1,2588,
1715,1,2527,1680,1,
2459,928,1,2464,945,
1,2542,1687,1,2544,
3685,16,0,380,1,
2583,1710,1,2584,1694,
1,2585,1700,1,2586,
1705,1,2513,1667,1,
2470,3686,16,0,380,
1,2589,1720,1,82,
3687,19,524,1,82,
3688,5,18,1,2590,
1725,1,2591,1730,1,
2593,3689,16,0,522,
1,2632,3690,16,0,
522,1,2522,1673,1,
2588,1715,1,2527,1680,
1,2459,928,1,2464,
945,1,2542,1687,1,
2544,3691,16,0,522,
1,2583,1710,1,2584,
1694,1,2585,1700,1,
2586,1705,1,2513,1667,
1,2470,3692,16,0,
522,1,2589,1720,1,
83,3693,19,379,1,
83,3694,5,18,1,
2590,1725,1,2591,1730,
1,2593,3695,16,0,
377,1,2632,3696,16,
0,377,1,2522,1673,
1,2588,1715,1,2527,
1680,1,2459,928,1,
2464,945,1,2542,1687,
1,2544,3697,16,0,
377,1,2583,1710,1,
2584,1694,1,2585,1700,
1,2586,1705,1,2513,
1667,1,2470,3698,16,
0,377,1,2589,1720,
1,84,3699,19,376,
1,84,3700,5,18,
1,2590,1725,1,2591,
1730,1,2593,3701,16,
0,374,1,2632,3702,
16,0,374,1,2522,
1673,1,2588,1715,1,
2527,1680,1,2459,928,
1,2464,945,1,2542,
1687,1,2544,3703,16,
0,374,1,2583,1710,
1,2584,1694,1,2585,
1700,1,2586,1705,1,
2513,1667,1,2470,3704,
16,0,374,1,2589,
1720,1,85,3705,19,
521,1,85,3706,5,
18,1,2590,1725,1,
2591,1730,1,2593,3707,
16,0,519,1,2632,
3708,16,0,519,1,
2522,1673,1,2588,1715,
1,2527,1680,1,2459,
928,1,2464,945,1,
2542,1687,1,2544,3709,
16,0,519,1,2583,
1710,1,2584,1694,1,
2585,1700,1,2586,1705,
1,2513,1667,1,2470,
3710,16,0,519,1,
2589,1720,1,86,3711,
19,518,1,86,3712,
5,18,1,2590,1725,
1,2591,1730,1,2593,
3713,16,0,516,1,
2632,3714,16,0,516,
1,2522,1673,1,2588,
1715,1,2527,1680,1,
2459,928,1,2464,945,
1,2542,1687,1,2544,
3715,16,0,516,1,
2583,1710,1,2584,1694,
1,2585,1700,1,2586,
1705,1,2513,1667,1,
2470,3716,16,0,516,
1,2589,1720,1,87,
3717,19,598,1,87,
3718,5,18,1,2590,
1725,1,2591,1730,1,
2593,3719,16,0,596,
1,2632,3720,16,0,
596,1,2522,1673,1,
2588,1715,1,2527,1680,
1,2459,928,1,2464,
945,1,2542,1687,1,
2544,3721,16,0,596,
1,2583,1710,1,2584,
1694,1,2585,1700,1,
2586,1705,1,2513,1667,
1,2470,3722,16,0,
596,1,2589,1720,1,
88,3723,19,373,1,
88,3724,5,18,1,
2590,1725,1,2591,1730,
1,2593,3725,16,0,
371,1,2632,3726,16,
0,371,1,2522,1673,
1,2588,1715,1,2527,
1680,1,2459,928,1,
2464,945,1,2542,1687,
1,2544,3727,16,0,
371,1,2583,1710,1,
2584,1694,1,2585,1700,
1,2586,1705,1,2513,
1667,1,2470,3728,16,
0,371,1,2589,1720,
1,89,3729,19,367,
1,89,3730,5,18,
1,2590,1725,1,2591,
1730,1,2593,3731,16,
0,365,1,2632,3732,
16,0,365,1,2522,
1673,1,2588,1715,1,
2527,1680,1,2459,928,
1,2464,945,1,2542,
1687,1,2544,3733,16,
0,365,1,2583,1710,
1,2584,1694,1,2585,
1700,1,2586,1705,1,
2513,1667,1,2470,3734,
16,0,365,1,2589,
1720,1,90,3735,19,
370,1,90,3736,5,
18,1,2590,1725,1,
2591,1730,1,2593,3737,
16,0,368,1,2632,
3738,16,0,368,1,
2522,1673,1,2588,1715,
1,2527,1680,1,2459,
928,1,2464,945,1,
2542,1687,1,2544,3739,
16,0,368,1,2583,
1710,1,2584,1694,1,
2585,1700,1,2586,1705,
1,2513,1667,1,2470,
3740,16,0,368,1,
2589,1720,1,91,3741,
19,413,1,91,3742,
5,18,1,2590,1725,
1,2591,1730,1,2593,
3743,16,0,411,1,
2632,3744,16,0,411,
1,2522,1673,1,2588,
1715,1,2527,1680,1,
2459,928,1,2464,945,
1,2542,1687,1,2544,
3745,16,0,411,1,
2583,1710,1,2584,1694,
1,2585,1700,1,2586,
1705,1,2513,1667,1,
2470,3746,16,0,411,
1,2589,1720,1,92,
3747,19,133,1,92,
3748,5,127,1,0,
3749,16,0,631,1,
1,2055,1,2,2061,
1,3,2066,1,4,
2071,1,5,2076,1,
6,2081,1,7,2086,
1,8,3750,16,0,
131,1,1515,3751,16,
0,165,1,2021,764,
1,2022,3752,16,0,
535,1,256,3753,16,
0,173,1,2025,3754,
16,0,539,1,18,
3755,16,0,138,1,
2027,3756,16,0,543,
1,2029,771,1,2030,
777,1,2031,782,1,
2699,3353,1,2033,792,
1,277,3757,16,0,
173,1,2035,798,1,
2037,803,1,2039,808,
1,32,3758,16,0,
165,1,2032,787,1,
2293,3759,16,0,173,
1,2043,820,1,2045,
825,1,41,3760,16,
0,173,1,1297,3761,
16,0,165,1,43,
3762,16,0,173,1,
46,3763,16,0,178,
1,1804,3764,16,0,
165,1,299,3765,16,
0,173,1,52,3766,
16,0,165,1,2727,
3347,1,509,3767,16,
0,173,1,2318,3768,
16,0,165,1,62,
3769,16,0,195,1,
65,3770,16,0,197,
1,2075,3771,16,0,
165,1,1574,845,1,
71,3772,16,0,173,
1,1775,3773,16,0,
165,1,76,3774,16,
0,173,1,2507,3775,
16,0,449,1,2337,
3776,16,0,165,1,
79,3777,16,0,173,
1,1335,3778,16,0,
165,1,322,3779,16,
0,173,1,85,3780,
16,0,173,1,2516,
3781,16,0,463,1,
2760,3311,1,1261,3782,
16,0,165,1,89,
3783,16,0,173,1,
346,3784,16,0,173,
1,97,3785,16,0,
173,1,2041,814,1,
102,3786,16,0,173,
1,1860,867,1,1803,
833,1,2364,873,1,
1113,3787,16,0,158,
1,112,3788,16,0,
173,1,1117,3789,16,
0,165,1,1873,881,
1,1876,3790,16,0,
165,1,372,3791,16,
0,573,1,374,3792,
16,0,575,1,124,
3793,16,0,173,1,
376,3794,16,0,577,
1,378,3795,16,0,
579,1,2136,888,1,
381,3796,16,0,173,
1,525,3797,16,0,
173,1,1834,3798,16,
0,165,1,137,3799,
16,0,173,1,1901,
3800,16,0,165,1,
1153,3801,16,0,165,
1,151,3802,16,0,
173,1,1407,3803,16,
0,165,1,1659,3804,
16,0,165,1,2413,
3805,16,0,165,1,
406,3806,16,0,173,
1,1371,3807,16,0,
165,1,2105,860,1,
2106,3808,16,0,165,
1,166,3809,16,0,
173,1,1622,3810,16,
0,173,1,1931,906,
1,1933,3811,16,0,
165,1,431,3812,16,
0,173,1,1585,3813,
16,0,173,1,182,
3814,16,0,173,1,
1189,3815,16,0,165,
1,1443,3816,16,0,
165,1,1695,3817,16,
0,165,1,2198,3818,
16,0,165,1,2702,
3819,16,0,173,1,
447,3820,16,0,173,
1,2458,922,1,2459,
928,1,1958,3821,16,
0,165,1,2462,935,
1,1657,940,1,2464,
945,1,2466,3341,1,
459,3822,16,0,173,
1,2468,3823,16,0,
354,1,462,3824,16,
0,173,1,199,3825,
16,0,173,1,217,
3826,16,0,173,1,
2227,954,1,1225,3827,
16,0,165,1,1479,
3828,16,0,165,1,
1731,3829,16,0,173,
1,2738,3319,1,2739,
3830,16,0,631,1,
1989,962,1,1990,3831,
16,0,165,1,236,
3832,16,0,173,1,
2757,3326,1,2758,3331,
1,2759,3336,1,1756,
3833,16,0,165,1,
93,3834,19,663,1,
93,3835,5,95,1,
256,3836,16,0,661,
1,1261,3837,16,0,
661,1,509,3838,16,
0,661,1,1515,3839,
16,0,661,1,2021,
764,1,1775,3840,16,
0,661,1,2029,771,
1,2030,777,1,2031,
782,1,2032,787,1,
2033,792,1,277,3841,
16,0,661,1,2035,
798,1,2037,803,1,
2039,808,1,32,3842,
16,0,661,1,2041,
814,1,2293,3843,16,
0,661,1,2043,820,
1,2045,825,1,41,
3844,16,0,661,1,
1297,3845,16,0,661,
1,43,3846,16,0,
661,1,1803,833,1,
1804,3847,16,0,661,
1,299,3848,16,0,
661,1,52,3849,16,
0,661,1,2318,3850,
16,0,661,1,62,
3851,16,0,661,1,
2075,3852,16,0,661,
1,1574,845,1,71,
3853,16,0,661,1,
76,3854,16,0,661,
1,1834,3855,16,0,
661,1,2337,3856,16,
0,661,1,79,3857,
16,0,661,1,1335,
3858,16,0,661,1,
322,3859,16,0,661,
1,85,3860,16,0,
661,1,89,3861,16,
0,661,1,346,3862,
16,0,661,1,2105,
860,1,2106,3863,16,
0,661,1,97,3864,
16,0,661,1,1860,
867,1,2364,873,1,
102,3865,16,0,661,
1,112,3866,16,0,
661,1,1117,3867,16,
0,661,1,1873,881,
1,1876,3868,16,0,
661,1,124,3869,16,
0,661,1,2136,888,
1,381,3870,16,0,
661,1,525,3871,16,
0,661,1,137,3872,
16,0,661,1,1901,
3873,16,0,661,1,
1153,3874,16,0,661,
1,151,3875,16,0,
661,1,1407,3876,16,
0,661,1,1659,3877,
16,0,661,1,2413,
3878,16,0,661,1,
406,3879,16,0,661,
1,1371,3880,16,0,
661,1,166,3881,16,
0,661,1,1622,3882,
16,0,661,1,1931,
906,1,1933,3883,16,
0,661,1,431,3884,
16,0,661,1,1585,
3885,16,0,661,1,
182,3886,16,0,661,
1,1189,3887,16,0,
661,1,1443,3888,16,
0,661,1,1695,3889,
16,0,661,1,2198,
3890,16,0,661,1,
2702,3891,16,0,661,
1,447,3892,16,0,
661,1,2458,922,1,
2459,928,1,1958,3893,
16,0,661,1,2462,
935,1,1657,940,1,
2464,945,1,199,3894,
16,0,661,1,459,
3895,16,0,661,1,
462,3896,16,0,661,
1,217,3897,16,0,
661,1,2227,954,1,
1225,3898,16,0,661,
1,1479,3899,16,0,
661,1,1731,3900,16,
0,661,1,1989,962,
1,1990,3901,16,0,
661,1,236,3902,16,
0,661,1,1756,3903,
16,0,661,1,94,
3904,19,660,1,94,
3905,5,95,1,256,
3906,16,0,658,1,
1261,3907,16,0,658,
1,509,3908,16,0,
658,1,1515,3909,16,
0,658,1,2021,764,
1,1775,3910,16,0,
658,1,2029,771,1,
2030,777,1,2031,782,
1,2032,787,1,2033,
792,1,277,3911,16,
0,658,1,2035,798,
1,2037,803,1,2039,
808,1,32,3912,16,
0,658,1,2041,814,
1,2293,3913,16,0,
658,1,2043,820,1,
2045,825,1,41,3914,
16,0,658,1,1297,
3915,16,0,658,1,
43,3916,16,0,658,
1,1803,833,1,1804,
3917,16,0,658,1,
299,3918,16,0,658,
1,52,3919,16,0,
658,1,2318,3920,16,
0,658,1,62,3921,
16,0,658,1,2075,
3922,16,0,658,1,
1574,845,1,71,3923,
16,0,658,1,76,
3924,16,0,658,1,
1834,3925,16,0,658,
1,2337,3926,16,0,
658,1,79,3927,16,
0,658,1,1335,3928,
16,0,658,1,322,
3929,16,0,658,1,
85,3930,16,0,658,
1,89,3931,16,0,
658,1,346,3932,16,
0,658,1,2105,860,
1,2106,3933,16,0,
658,1,97,3934,16,
0,658,1,1860,867,
1,2364,873,1,102,
3935,16,0,658,1,
112,3936,16,0,658,
1,1117,3937,16,0,
658,1,1873,881,1,
1876,3938,16,0,658,
1,124,3939,16,0,
658,1,2136,888,1,
381,3940,16,0,658,
1,525,3941,16,0,
658,1,137,3942,16,
0,658,1,1901,3943,
16,0,658,1,1153,
3944,16,0,658,1,
151,3945,16,0,658,
1,1407,3946,16,0,
658,1,1659,3947,16,
0,658,1,2413,3948,
16,0,658,1,406,
3949,16,0,658,1,
1371,3950,16,0,658,
1,166,3951,16,0,
658,1,1622,3952,16,
0,658,1,1931,906,
1,1933,3953,16,0,
658,1,431,3954,16,
0,658,1,1585,3955,
16,0,658,1,182,
3956,16,0,658,1,
1189,3957,16,0,658,
1,1443,3958,16,0,
658,1,1695,3959,16,
0,658,1,2198,3960,
16,0,658,1,2702,
3961,16,0,658,1,
447,3962,16,0,658,
1,2458,922,1,2459,
928,1,1958,3963,16,
0,658,1,2462,935,
1,1657,940,1,2464,
945,1,199,3964,16,
0,658,1,459,3965,
16,0,658,1,462,
3966,16,0,658,1,
217,3967,16,0,658,
1,2227,954,1,1225,
3968,16,0,658,1,
1479,3969,16,0,658,
1,1731,3970,16,0,
658,1,1989,962,1,
1990,3971,16,0,658,
1,236,3972,16,0,
658,1,1756,3973,16,
0,658,1,95,3974,
19,657,1,95,3975,
5,95,1,256,3976,
16,0,655,1,1261,
3977,16,0,655,1,
509,3978,16,0,655,
1,1515,3979,16,0,
655,1,2021,764,1,
1775,3980,16,0,655,
1,2029,771,1,2030,
777,1,2031,782,1,
2032,787,1,2033,792,
1,277,3981,16,0,
655,1,2035,798,1,
2037,803,1,2039,808,
1,32,3982,16,0,
655,1,2041,814,1,
2293,3983,16,0,655,
1,2043,820,1,2045,
825,1,41,3984,16,
0,655,1,1297,3985,
16,0,655,1,43,
3986,16,0,655,1,
1803,833,1,1804,3987,
16,0,655,1,299,
3988,16,0,655,1,
52,3989,16,0,655,
1,2318,3990,16,0,
655,1,62,3991,16,
0,655,1,2075,3992,
16,0,655,1,1574,
845,1,71,3993,16,
0,655,1,76,3994,
16,0,655,1,1834,
3995,16,0,655,1,
2337,3996,16,0,655,
1,79,3997,16,0,
655,1,1335,3998,16,
0,655,1,322,3999,
16,0,655,1,85,
4000,16,0,655,1,
89,4001,16,0,655,
1,346,4002,16,0,
655,1,2105,860,1,
2106,4003,16,0,655,
1,97,4004,16,0,
655,1,1860,867,1,
2364,873,1,102,4005,
16,0,655,1,112,
4006,16,0,655,1,
1117,4007,16,0,655,
1,1873,881,1,1876,
4008,16,0,655,1,
124,4009,16,0,655,
1,2136,888,1,381,
4010,16,0,655,1,
525,4011,16,0,655,
1,137,4012,16,0,
655,1,1901,4013,16,
0,655,1,1153,4014,
16,0,655,1,151,
4015,16,0,655,1,
1407,4016,16,0,655,
1,1659,4017,16,0,
655,1,2413,4018,16,
0,655,1,406,4019,
16,0,655,1,1371,
4020,16,0,655,1,
166,4021,16,0,655,
1,1622,4022,16,0,
655,1,1931,906,1,
1933,4023,16,0,655,
1,431,4024,16,0,
655,1,1585,4025,16,
0,655,1,182,4026,
16,0,655,1,1189,
4027,16,0,655,1,
1443,4028,16,0,655,
1,1695,4029,16,0,
655,1,2198,4030,16,
0,655,1,2702,4031,
16,0,655,1,447,
4032,16,0,655,1,
2458,922,1,2459,928,
1,1958,4033,16,0,
655,1,2462,935,1,
1657,940,1,2464,945,
1,199,4034,16,0,
655,1,459,4035,16,
0,655,1,462,4036,
16,0,655,1,217,
4037,16,0,655,1,
2227,954,1,1225,4038,
16,0,655,1,1479,
4039,16,0,655,1,
1731,4040,16,0,655,
1,1989,962,1,1990,
4041,16,0,655,1,
236,4042,16,0,655,
1,1756,4043,16,0,
655,1,96,4044,19,
103,1,96,4045,5,
1,1,0,4046,16,
0,104,1,97,4047,
19,684,1,97,4048,
5,1,1,0,4049,
16,0,682,1,98,
4050,19,285,1,98,
4051,5,2,1,0,
4052,16,0,503,1,
2739,4053,16,0,283,
1,99,4054,19,701,
1,99,4055,5,2,
1,0,4056,16,0,
703,1,2739,4057,16,
0,699,1,100,4058,
19,288,1,100,4059,
5,2,1,0,4060,
16,0,286,1,2739,
4061,16,0,693,1,
101,4062,19,712,1,
101,4063,5,4,1,
0,4064,16,0,713,
1,2739,4065,16,0,
713,1,2680,4066,16,
0,710,1,2750,4067,
16,0,710,1,102,
4068,19,494,1,102,
4069,5,2,1,2470,
4070,16,0,492,1,
2593,4071,16,0,668,
1,103,4072,19,265,
1,103,4073,5,4,
1,2544,4074,16,0,
616,1,2470,4075,16,
0,263,1,2632,4076,
16,0,616,1,2593,
4077,16,0,263,1,
104,4078,19,335,1,
104,4079,5,4,1,
2544,4080,16,0,692,
1,2470,4081,16,0,
333,1,2632,4082,16,
0,692,1,2593,4083,
16,0,333,1,105,
4084,19,332,1,105,
4085,5,4,1,2544,
4086,16,0,691,1,
2470,4087,16,0,330,
1,2632,4088,16,0,
691,1,2593,4089,16,
0,330,1,106,4090,
19,620,1,106,4091,
5,4,1,2544,4092,
16,0,690,1,2470,
4093,16,0,618,1,
2632,4094,16,0,690,
1,2593,4095,16,0,
618,1,107,4096,19,
141,1,107,4097,5,
3,1,2529,4098,16,
0,488,1,2686,4099,
16,0,645,1,10,
4100,16,0,139,1,
108,4101,19,469,1,
108,4102,5,1,1,
2515,4103,16,0,467,
1,109,4104,19,455,
1,109,4105,5,1,
1,2506,4106,16,0,
453,1,110,4107,19,
151,1,110,4108,5,
17,1,0,4109,16,
0,650,1,2739,4110,
16,0,650,1,2075,
4111,16,0,676,1,
2337,4112,16,0,676,
1,2413,4113,16,0,
676,1,10,4114,16,
0,350,1,2529,4115,
16,0,350,1,1901,
4116,16,0,676,1,
2198,4117,16,0,676,
1,21,4118,16,0,
149,1,2106,4119,16,
0,676,1,1804,4120,
16,0,676,1,1990,
4121,16,0,676,1,
32,4122,16,0,676,
1,1958,4123,16,0,
676,1,2686,4124,16,
0,350,1,1775,4125,
16,0,676,1,111,
4126,19,466,1,111,
4127,5,1,1,2515,
4128,16,0,464,1,
112,4129,19,452,1,
112,4130,5,1,1,
2506,4131,16,0,450,
1,113,4132,19,130,
1,113,4133,5,18,
1,0,4134,16,0,
128,1,2739,4135,16,
0,128,1,2075,4136,
16,0,137,1,2337,
4137,16,0,137,1,
2413,4138,16,0,137,
1,10,4139,16,0,
137,1,2198,4140,16,
0,137,1,2529,4141,
16,0,137,1,1901,
4142,16,0,137,1,
52,4143,16,0,193,
1,21,4144,16,0,
137,1,2106,4145,16,
0,137,1,1804,4146,
16,0,137,1,1990,
4147,16,0,137,1,
32,4148,16,0,137,
1,1958,4149,16,0,
137,1,2686,4150,16,
0,137,1,1775,4151,
16,0,137,1,114,
4152,19,282,1,114,
4153,5,4,1,2544,
4154,16,0,280,1,
2470,4155,16,0,280,
1,2632,4156,16,0,
280,1,2593,4157,16,
0,280,1,115,4158,
19,475,1,115,4159,
5,4,1,2544,4160,
16,0,473,1,2470,
4161,16,0,473,1,
2632,4162,16,0,473,
1,2593,4163,16,0,
473,1,116,4164,19,
460,1,116,4165,5,
4,1,2544,4166,16,
0,458,1,2470,4167,
16,0,458,1,2632,
4168,16,0,458,1,
2593,4169,16,0,458,
1,117,4170,19,689,
1,117,4171,5,4,
1,2544,4172,16,0,
687,1,2470,4173,16,
0,687,1,2632,4174,
16,0,687,1,2593,
4175,16,0,687,1,
118,4176,19,225,1,
118,4177,5,17,1,
2075,4178,16,0,544,
1,2520,4179,16,0,
472,1,2337,4180,16,
0,544,1,2413,4181,
16,0,544,1,2525,
4182,16,0,273,1,
2511,4183,16,0,457,
1,1901,4184,16,0,
544,1,2198,4185,16,
0,544,1,2106,4186,
16,0,544,1,2540,
4187,16,0,490,1,
1804,4188,16,0,544,
1,1990,4189,16,0,
544,1,31,4190,16,
0,349,1,32,4191,
16,0,544,1,2697,
4192,16,0,223,1,
1958,4193,16,0,544,
1,1775,4194,16,0,
544,1,119,4195,19,
312,1,119,4196,5,
1,1,32,4197,16,
0,310,1,120,4198,
19,259,1,120,4199,
5,11,1,2075,4200,
16,0,608,1,2337,
4201,16,0,266,1,
2413,4202,16,0,484,
1,1901,4203,16,0,
405,1,2198,4204,16,
0,329,1,2106,4205,
16,0,644,1,1804,
4206,16,0,295,1,
1990,4207,16,0,532,
1,32,4208,16,0,
345,1,1958,4209,16,
0,495,1,1775,4210,
16,0,257,1,121,
4211,19,614,1,121,
4212,5,11,1,2075,
4213,16,0,612,1,
2337,4214,16,0,612,
1,2413,4215,16,0,
612,1,1901,4216,16,
0,612,1,2198,4217,
16,0,612,1,2106,
4218,16,0,612,1,
1804,4219,16,0,612,
1,1990,4220,16,0,
612,1,32,4221,16,
0,612,1,1958,4222,
16,0,612,1,1775,
4223,16,0,612,1,
122,4224,19,673,1,
122,4225,5,11,1,
2075,4226,16,0,671,
1,2337,4227,16,0,
671,1,2413,4228,16,
0,671,1,1901,4229,
16,0,671,1,2198,
4230,16,0,671,1,
2106,4231,16,0,671,
1,1804,4232,16,0,
671,1,1990,4233,16,
0,671,1,32,4234,
16,0,671,1,1958,
4235,16,0,671,1,
1775,4236,16,0,671,
1,123,4237,19,161,
1,123,4238,5,31,
1,1901,4239,16,0,
675,1,1479,4240,16,
0,589,1,2075,4241,
16,0,675,1,1695,
4242,16,0,189,1,
1756,4243,16,0,188,
1,2413,4244,16,0,
675,1,2198,4245,16,
0,675,1,1876,4246,
16,0,696,1,1659,
4247,16,0,188,1,
1443,4248,16,0,560,
1,1117,4249,16,0,
159,1,1990,4250,16,
0,675,1,1189,4251,
16,0,241,1,1775,
4252,16,0,675,1,
32,4253,16,0,675,
1,2106,4254,16,0,
675,1,1515,4255,16,
0,610,1,2337,4256,
16,0,675,1,52,
4257,16,0,627,1,
1804,4258,16,0,675,
1,1261,4259,16,0,
306,1,1153,4260,16,
0,248,1,1225,4261,
16,0,276,1,1335,
4262,16,0,481,1,
1933,4263,16,0,591,
1,1834,4264,16,0,
322,1,1297,4265,16,
0,339,1,1407,4266,
16,0,602,1,2318,
4267,16,0,188,1,
1958,4268,16,0,675,
1,1371,4269,16,0,
470,1,124,4270,19,
569,1,124,4271,5,
11,1,2075,4272,16,
0,567,1,2337,4273,
16,0,567,1,2413,
4274,16,0,567,1,
1901,4275,16,0,567,
1,2198,4276,16,0,
567,1,2106,4277,16,
0,567,1,1804,4278,
16,0,567,1,1990,
4279,16,0,567,1,
32,4280,16,0,567,
1,1958,4281,16,0,
567,1,1775,4282,16,
0,567,1,125,4283,
19,565,1,125,4284,
5,11,1,2075,4285,
16,0,563,1,2337,
4286,16,0,563,1,
2413,4287,16,0,563,
1,1901,4288,16,0,
563,1,2198,4289,16,
0,563,1,2106,4290,
16,0,563,1,1804,
4291,16,0,563,1,
1990,4292,16,0,563,
1,32,4293,16,0,
563,1,1958,4294,16,
0,563,1,1775,4295,
16,0,563,1,126,
4296,19,606,1,126,
4297,5,11,1,2075,
4298,16,0,604,1,
2337,4299,16,0,604,
1,2413,4300,16,0,
604,1,1901,4301,16,
0,604,1,2198,4302,
16,0,604,1,2106,
4303,16,0,604,1,
1804,4304,16,0,604,
1,1990,4305,16,0,
604,1,32,4306,16,
0,604,1,1958,4307,
16,0,604,1,1775,
4308,16,0,604,1,
127,4309,19,559,1,
127,4310,5,11,1,
2075,4311,16,0,557,
1,2337,4312,16,0,
557,1,2413,4313,16,
0,557,1,1901,4314,
16,0,557,1,2198,
4315,16,0,557,1,
2106,4316,16,0,557,
1,1804,4317,16,0,
557,1,1990,4318,16,
0,557,1,32,4319,
16,0,557,1,1958,
4320,16,0,557,1,
1775,4321,16,0,557,
1,128,4322,19,556,
1,128,4323,5,11,
1,2075,4324,16,0,
554,1,2337,4325,16,
0,554,1,2413,4326,
16,0,554,1,1901,
4327,16,0,554,1,
2198,4328,16,0,554,
1,2106,4329,16,0,
554,1,1804,4330,16,
0,554,1,1990,4331,
16,0,554,1,32,
4332,16,0,554,1,
1958,4333,16,0,554,
1,1775,4334,16,0,
554,1,129,4335,19,
553,1,129,4336,5,
11,1,2075,4337,16,
0,551,1,2337,4338,
16,0,551,1,2413,
4339,16,0,551,1,
1901,4340,16,0,551,
1,2198,4341,16,0,
551,1,2106,4342,16,
0,551,1,1804,4343,
16,0,551,1,1990,
4344,16,0,551,1,
32,4345,16,0,551,
1,1958,4346,16,0,
551,1,1775,4347,16,
0,551,1,130,4348,
19,550,1,130,4349,
5,11,1,2075,4350,
16,0,548,1,2337,
4351,16,0,548,1,
2413,4352,16,0,548,
1,1901,4353,16,0,
548,1,2198,4354,16,
0,548,1,2106,4355,
16,0,548,1,1804,
4356,16,0,548,1,
1990,4357,16,0,548,
1,32,4358,16,0,
548,1,1958,4359,16,
0,548,1,1775,4360,
16,0,548,1,131,
4361,19,547,1,131,
4362,5,11,1,2075,
4363,16,0,545,1,
2337,4364,16,0,545,
1,2413,4365,16,0,
545,1,1901,4366,16,
0,545,1,2198,4367,
16,0,545,1,2106,
4368,16,0,545,1,
1804,4369,16,0,545,
1,1990,4370,16,0,
545,1,32,4371,16,
0,545,1,1958,4372,
16,0,545,1,1775,
4373,16,0,545,1,
132,4374,19,147,1,
132,4375,5,3,1,
1756,4376,16,0,294,
1,2318,4377,16,0,
305,1,1659,4378,16,
0,145,1,133,4379,
19,586,1,133,4380,
5,68,1,1901,4381,
16,0,584,1,1479,
4382,16,0,584,1,
112,4383,16,0,584,
1,2293,4384,16,0,
584,1,1804,4385,16,
0,584,1,431,4386,
16,0,584,1,1443,
4387,16,0,584,1,
1756,4388,16,0,584,
1,124,4389,16,0,
584,1,525,4390,16,
0,584,1,236,4391,
16,0,584,1,346,
4392,16,0,584,1,
1876,4393,16,0,584,
1,1659,4394,16,0,
584,1,1225,4395,16,
0,584,1,1117,4396,
16,0,584,1,137,
4397,16,0,584,1,
2318,4398,16,0,584,
1,1775,4399,16,0,
584,1,32,4400,16,
0,584,1,1407,4401,
16,0,584,1,256,
4402,16,0,584,1,
459,4403,16,0,584,
1,406,4404,16,0,
584,1,41,4405,16,
0,584,1,151,4406,
16,0,584,1,43,
4407,16,0,584,1,
1585,4408,16,0,584,
1,1990,4409,16,0,
584,1,2337,4410,16,
0,584,1,509,4411,
16,0,584,1,52,
4412,16,0,584,1,
381,4413,16,0,584,
1,447,4414,16,0,
584,1,166,4415,16,
0,584,1,462,4416,
16,0,584,1,277,
4417,16,0,584,1,
1695,4418,16,0,584,
1,62,4419,16,0,
622,1,1153,4420,16,
0,584,1,2106,4421,
16,0,584,1,1335,
4422,16,0,584,1,
71,4423,16,0,584,
1,182,4424,16,0,
584,1,76,4425,16,
0,584,1,79,4426,
16,0,584,1,1933,
4427,16,0,584,1,
299,4428,16,0,584,
1,85,4429,16,0,
584,1,2702,4430,16,
0,584,1,1515,4431,
16,0,584,1,2198,
4432,16,0,584,1,
89,4433,16,0,584,
1,1834,4434,16,0,
584,1,1622,4435,16,
0,584,1,2413,4436,
16,0,584,1,2075,
4437,16,0,584,1,
1731,4438,16,0,584,
1,97,4439,16,0,
584,1,1297,4440,16,
0,584,1,1189,4441,
16,0,584,1,102,
4442,16,0,584,1,
1261,4443,16,0,584,
1,322,4444,16,0,
584,1,1958,4445,16,
0,584,1,199,4446,
16,0,584,1,1371,
4447,16,0,584,1,
217,4448,16,0,584,
1,134,4449,19,639,
1,134,4450,5,2,
1,459,4451,16,0,
637,1,41,4452,16,
0,708,1,135,4453,
19,643,1,135,4454,
5,3,1,462,4455,
16,0,641,1,459,
4456,16,0,667,1,
41,4457,16,0,667,
1,136,4458,19,4459,
4,36,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,1,136,
4454,1,137,4460,19,
582,1,137,4461,5,
68,1,1901,4462,16,
0,580,1,1479,4463,
16,0,580,1,112,
4464,16,0,580,1,
2293,4465,16,0,580,
1,1804,4466,16,0,
580,1,431,4467,16,
0,580,1,1443,4468,
16,0,580,1,1756,
4469,16,0,580,1,
124,4470,16,0,580,
1,525,4471,16,0,
580,1,236,4472,16,
0,580,1,346,4473,
16,0,580,1,1876,
4474,16,0,580,1,
1659,4475,16,0,580,
1,1225,4476,16,0,
580,1,1117,4477,16,
0,580,1,137,4478,
16,0,580,1,2318,
4479,16,0,580,1,
1775,4480,16,0,580,
1,32,4481,16,0,
580,1,1407,4482,16,
0,580,1,256,4483,
16,0,580,1,459,
4484,16,0,580,1,
406,4485,16,0,580,
1,41,4486,16,0,
580,1,151,4487,16,
0,580,1,43,4488,
16,0,580,1,1585,
4489,16,0,580,1,
1990,4490,16,0,580,
1,2337,4491,16,0,
580,1,509,4492,16,
0,580,1,52,4493,
16,0,580,1,381,
4494,16,0,580,1,
447,4495,16,0,580,
1,166,4496,16,0,
580,1,462,4497,16,
0,580,1,277,4498,
16,0,580,1,1695,
4499,16,0,580,1,
62,4500,16,0,623,
1,1153,4501,16,0,
580,1,2106,4502,16,
0,580,1,1335,4503,
16,0,580,1,71,
4504,16,0,580,1,
182,4505,16,0,580,
1,76,4506,16,0,
580,1,79,4507,16,
0,580,1,1933,4508,
16,0,580,1,299,
4509,16,0,580,1,
85,4510,16,0,580,
1,2702,4511,16,0,
580,1,1515,4512,16,
0,580,1,2198,4513,
16,0,580,1,89,
4514,16,0,580,1,
1834,4515,16,0,580,
1,1622,4516,16,0,
580,1,2413,4517,16,
0,580,1,2075,4518,
16,0,580,1,1731,
4519,16,0,580,1,
97,4520,16,0,580,
1,1297,4521,16,0,
580,1,1189,4522,16,
0,580,1,102,4523,
16,0,580,1,1261,
4524,16,0,580,1,
322,4525,16,0,580,
1,1958,4526,16,0,
580,1,199,4527,16,
0,580,1,1371,4528,
16,0,580,1,217,
4529,16,0,580,1,
138,4530,19,4531,4,
28,86,0,101,0,
99,0,116,0,111,
0,114,0,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,1,
138,4461,1,139,4532,
19,4533,4,32,82,
0,111,0,116,0,
97,0,116,0,105,
0,111,0,110,0,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,1,139,4461,1,
140,4534,19,4535,4,
24,76,0,105,0,
115,0,116,0,67,
0,111,0,110,0,
115,0,116,0,97,
0,110,0,116,0,
1,140,4461,1,141,
4536,19,169,1,141,
4537,5,67,1,1901,
4538,16,0,617,1,
1479,4539,16,0,571,
1,112,4540,16,0,
250,1,2293,4541,16,
0,275,1,1804,4542,
16,0,617,1,431,
4543,16,0,611,1,
1443,4544,16,0,506,
1,1756,4545,16,0,
719,1,124,4546,16,
0,256,1,525,4547,
16,0,315,1,236,
4548,16,0,355,1,
346,4549,16,0,534,
1,1876,4550,16,0,
328,1,1659,4551,16,
0,719,1,1225,4552,
16,0,249,1,1117,
4553,16,0,219,1,
137,4554,16,0,274,
1,2318,4555,16,0,
719,1,1775,4556,16,
0,617,1,32,4557,
16,0,617,1,1407,
4558,16,0,525,1,
256,4559,16,0,409,
1,459,4560,16,0,
167,1,406,4561,16,
0,595,1,41,4562,
16,0,167,1,151,
4563,16,0,293,1,
43,4564,16,0,669,
1,1990,4565,16,0,
617,1,2337,4566,16,
0,617,1,509,4567,
16,0,686,1,52,
4568,16,0,629,1,
381,4569,16,0,588,
1,447,4570,16,0,
315,1,166,4571,16,
0,304,1,462,4572,
16,0,167,1,277,
4573,16,0,456,1,
1695,4574,16,0,271,
1,1261,4575,16,0,
292,1,1153,4576,16,
0,174,1,2106,4577,
16,0,617,1,1335,
4578,16,0,342,1,
71,4579,16,0,203,
1,182,4580,16,0,
315,1,76,4581,16,
0,587,1,79,4582,
16,0,218,1,1933,
4583,16,0,421,1,
299,4584,16,0,483,
1,85,4585,16,0,
502,1,2702,4586,16,
0,231,1,1515,4587,
16,0,594,1,2198,
4588,16,0,617,1,
89,4589,16,0,230,
1,1834,4590,16,0,
303,1,1622,4591,16,
0,685,1,2413,4592,
16,0,617,1,2075,
4593,16,0,617,1,
1731,4594,16,0,251,
1,97,4595,16,0,
425,1,1297,4596,16,
0,344,1,1189,4597,
16,0,217,1,102,
4598,16,0,239,1,
1585,4599,16,0,698,
1,322,4600,16,0,
504,1,1958,4601,16,
0,617,1,199,4602,
16,0,326,1,1371,
4603,16,0,410,1,
217,4604,16,0,341,
1,142,4605,19,4606,
4,36,67,0,111,
0,110,0,115,0,
116,0,97,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,142,
4537,1,143,4607,19,
4608,4,30,73,0,
100,0,101,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,143,
4537,1,144,4609,19,
4610,4,36,73,0,
100,0,101,0,110,
0,116,0,68,0,
111,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
144,4537,1,145,4611,
19,4612,4,44,70,
0,117,0,110,0,
99,0,116,0,105,
0,111,0,110,0,
67,0,97,0,108,
0,108,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,145,
4537,1,146,4613,19,
4614,4,32,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
1,146,4537,1,147,
4615,19,4616,4,30,
85,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
1,147,4537,1,148,
4617,19,4618,4,36,
84,0,121,0,112,
0,101,0,99,0,
97,0,115,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,1,148,4537,1,
149,4619,19,4620,4,
42,80,0,97,0,
114,0,101,0,110,
0,116,0,104,0,
101,0,115,0,105,
0,115,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,149,
4537,1,150,4621,19,
4622,4,56,73,0,
110,0,99,0,114,
0,101,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
150,4537,1,152,4623,
19,729,1,152,4045,
1,153,4624,19,751,
1,153,4045,1,154,
4625,19,3315,1,154,
4048,1,155,4626,19,
3334,1,155,4048,1,
156,4627,19,3339,1,
156,4048,1,157,4628,
19,3329,1,157,4048,
1,158,4629,19,3323,
1,158,4051,1,159,
4630,19,3350,1,159,
4051,1,160,4631,19,
3356,1,160,4055,1,
161,4632,19,3345,1,
161,4055,1,162,4633,
19,746,1,162,4059,
1,163,4634,19,756,
1,163,4059,1,164,
4635,19,735,1,164,
4063,1,165,4636,19,
740,1,165,4063,1,
166,4637,19,1733,1,
166,4069,1,167,4638,
19,1708,1,167,4069,
1,168,4639,19,1728,
1,168,4069,1,169,
4640,19,1703,1,169,
4069,1,170,4641,19,
1723,1,170,4069,1,
171,4642,19,1698,1,
171,4069,1,172,4643,
19,1718,1,172,4069,
1,173,4644,19,1713,
1,173,4069,1,174,
4645,19,1691,1,174,
4073,1,175,4646,19,
1684,1,175,4079,1,
176,4647,19,1677,1,
176,4085,1,177,4648,
19,1671,1,177,4091,
1,178,4649,19,1774,
1,178,4097,1,179,
4650,19,1748,1,179,
4097,1,180,4651,19,
2095,1,180,4102,1,
181,4652,19,2131,1,
181,4105,1,182,4653,
19,1163,1,182,4108,
1,183,4654,19,2110,
1,183,4127,1,184,
4655,19,2125,1,184,
4130,1,185,4656,19,
948,1,185,4177,1,
186,4657,19,932,1,
186,4177,1,187,4658,
19,938,1,187,4196,
1,188,4659,19,926,
1,188,4196,1,189,
4660,19,1191,1,189,
4212,1,190,4661,19,
828,1,190,4199,1,
191,4662,19,943,1,
191,4199,1,192,4663,
19,823,1,192,4199,
1,193,4664,19,848,
1,193,4199,1,194,
4665,19,817,1,194,
4199,1,195,4666,19,
811,1,195,4199,1,
196,4667,19,806,1,
196,4199,1,197,4668,
19,801,1,197,4199,
1,198,4669,19,795,
1,198,4199,1,199,
4670,19,790,1,199,
4199,1,200,4671,19,
785,1,200,4199,1,
201,4672,19,780,1,
201,4199,1,202,4673,
19,775,1,202,4199,
1,203,4674,19,1198,
1,203,4284,1,204,
4675,19,1336,1,204,
4297,1,205,4676,19,
1185,1,205,4310,1,
206,4677,19,1324,1,
206,4310,1,207,4678,
19,965,1,207,4323,
1,208,4679,19,768,
1,208,4323,1,209,
4680,19,863,1,209,
4323,1,210,4681,19,
891,1,210,4323,1,
211,4682,19,910,1,
211,4336,1,212,4683,
19,957,1,212,4336,
1,213,4684,19,871,
1,213,4349,1,214,
4685,19,884,1,214,
4349,1,215,4686,19,
837,1,215,4362,1,
216,4687,19,876,1,
216,4362,1,217,4688,
19,1523,1,217,4375,
1,218,4689,19,1204,
1,218,4375,1,219,
4690,19,1555,1,219,
4375,1,220,4691,19,
1588,1,220,4375,1,
221,4692,19,1448,1,
221,4225,1,222,4693,
19,1512,1,222,4225,
1,223,4694,19,1179,
1,223,4238,1,224,
4695,19,1620,1,224,
4238,1,225,4696,19,
1550,1,225,4238,1,
226,4697,19,1497,1,
226,4238,1,227,4698,
19,1416,1,227,4238,
1,228,4699,19,1346,
1,228,4238,1,229,
4700,19,1356,1,229,
4238,1,230,4701,19,
1174,1,230,4238,1,
231,4702,19,1604,1,
231,4238,1,232,4703,
19,1545,1,232,4238,
1,233,4704,19,1487,
1,233,4238,1,234,
4705,19,1405,1,234,
4238,1,235,4706,19,
1372,1,235,4238,1,
236,4707,19,1157,1,
236,4238,1,237,4708,
19,1507,1,237,4238,
1,238,4709,19,1533,
1,238,4238,1,239,
4710,19,1480,1,239,
4238,1,240,4711,19,
1502,1,240,4238,1,
241,4712,19,1312,1,
241,4238,1,242,4713,
19,1216,1,242,4238,
1,243,4714,19,1146,
1,243,4238,1,244,
4715,19,1578,1,244,
4238,1,245,4716,19,
1528,1,245,4238,1,
246,4717,19,1475,1,
246,4238,1,247,4718,
19,1341,1,247,4271,
1,248,4719,19,1319,
1,248,4271,1,249,
4720,19,1609,1,249,
4461,1,250,4721,19,
1632,1,250,4461,1,
251,4722,19,1599,1,
251,4461,1,252,4723,
19,1594,1,252,4461,
1,253,4724,19,1615,
1,253,4461,1,254,
4725,19,1561,1,254,
4461,1,255,4726,19,
1266,1,255,4461,1,
256,4727,19,1437,1,
256,4537,1,257,4728,
19,1227,1,257,4537,
1,258,4729,19,1234,
1,258,4537,1,259,
4730,19,1255,1,259,
4537,1,260,4731,19,
1250,1,260,4537,1,
261,4732,19,1245,1,
261,4537,1,262,4733,
19,1240,1,262,4537,
1,263,4734,19,1426,
1,263,4537,1,264,
4735,19,1454,1,264,
4537,1,265,4736,19,
1431,1,265,4537,1,
266,4737,19,1421,1,
266,4537,1,267,4738,
19,1411,1,267,4537,
1,268,4739,19,1394,
1,268,4537,1,269,
4740,19,1351,1,269,
4537,1,270,4741,19,
1260,1,270,4537,1,
271,4742,19,1221,1,
271,4537,1,272,4743,
19,1169,1,272,4537,
1,273,4744,19,1627,
1,273,4537,1,274,
4745,19,1583,1,274,
4537,1,275,4746,19,
1573,1,275,4537,1,
276,4747,19,1568,1,
276,4537,1,277,4748,
19,1518,1,277,4537,
1,278,4749,19,1492,
1,278,4537,1,279,
4750,19,1464,1,279,
4537,1,280,4751,19,
1459,1,280,4537,1,
281,4752,19,1400,1,
281,4537,1,282,4753,
19,1380,1,282,4537,
1,283,4754,19,1442,
1,283,4537,1,284,
4755,19,1539,1,284,
4537,1,285,4756,19,
1470,1,285,4537,1,
286,4757,19,1387,1,
286,4537,1,287,4758,
19,1367,1,287,4537,
1,288,4759,19,1330,
1,288,4537,1,289,
4760,19,1307,1,289,
4537,1,290,4761,19,
1152,1,290,4537,1,
291,4762,19,1642,1,
291,4537,1,292,4763,
19,1272,1,292,4537,
1,293,4764,19,1277,
1,293,4537,1,294,
4765,19,1297,1,294,
4537,1,295,4766,19,
1287,1,295,4537,1,
296,4767,19,1292,1,
296,4537,1,297,4768,
19,1282,1,297,4537,
1,298,4769,19,1637,
1,298,4537,1,299,
4770,19,1302,1,299,
4537,1,300,4771,19,
1362,1,300,4380,1,
301,4772,19,1787,1,
301,4450,1,302,4773,
19,1780,1,302,4450,
1,303,4774,19,1758,
1,303,4454,1,304,
4775,19,2089,1,304,
4133,1,305,4776,19,
2084,1,305,4133,1,
306,4777,19,2079,1,
306,4133,1,307,4778,
19,2074,1,307,4133,
1,308,4779,19,2069,
1,308,4133,1,309,
4780,19,2064,1,309,
4133,1,310,4781,19,
2059,1,310,4133,1,
311,4782,19,2047,1,
311,4153,1,312,4783,
19,2042,1,312,4153,
1,313,4784,19,2037,
1,313,4153,1,314,
4785,19,2032,1,314,
4153,1,315,4786,19,
2027,1,315,4153,1,
316,4787,19,2022,1,
316,4153,1,317,4788,
19,2017,1,317,4153,
1,318,4789,19,2012,
1,318,4153,1,319,
4790,19,2007,1,319,
4153,1,320,4791,19,
1840,1,320,4153,1,
321,4792,19,2001,1,
321,4153,1,322,4793,
19,1996,1,322,4153,
1,323,4794,19,1991,
1,323,4153,1,324,
4795,19,1832,1,324,
4159,1,325,4796,19,
1986,1,325,4159,1,
326,4797,19,1981,1,
326,4159,1,327,4798,
19,1976,1,327,4159,
1,328,4799,19,1971,
1,328,4159,1,329,
4800,19,1966,1,329,
4159,1,330,4801,19,
1961,1,330,4159,1,
331,4802,19,1825,1,
331,4159,1,332,4803,
19,1955,1,332,4165,
1,333,4804,19,1950,
1,333,4165,1,334,
4805,19,1945,1,334,
4165,1,335,4806,19,
1818,1,335,4165,1,
336,4807,19,1939,1,
336,4165,1,337,4808,
19,1870,1,337,4165,
1,338,4809,19,1934,
1,338,4165,1,339,
4810,19,1929,1,339,
4165,1,340,4811,19,
1924,1,340,4165,1,
341,4812,19,1919,1,
341,4165,1,342,4813,
19,1914,1,342,4171,
1,343,4814,19,1909,
1,343,4171,1,344,
4815,19,1904,1,344,
4171,1,345,4816,19,
4817,4,50,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,76,0,105,0,
115,0,116,0,95,
0,51,0,1,345,
4097,1,346,4818,19,
4819,4,28,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,76,
0,105,0,115,0,
116,0,95,0,51,
0,1,346,4450,1,
347,4820,19,4821,4,
50,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,76,
0,105,0,115,0,
116,0,95,0,52,
0,1,347,4097,1,
348,4822,19,4823,4,
50,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,76,
0,105,0,115,0,
116,0,95,0,53,
0,1,348,4097,1,
349,4824,19,4825,4,
28,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,76,0,105,
0,115,0,116,0,
95,0,52,0,1,
349,4450,2,0,0};
new Sfactory(this,"ExpressionArgument_1",new SCreator(ExpressionArgument_1_factory));
new Sfactory(this,"VectorArgStateEvent",new SCreator(VectorArgStateEvent_factory));
new Sfactory(this,"SimpleAssignment_8",new SCreator(SimpleAssignment_8_factory));
new Sfactory(this,"SimpleAssignment_9",new SCreator(SimpleAssignment_9_factory));
new Sfactory(this,"StatementList_1",new SCreator(StatementList_1_factory));
new Sfactory(this,"StatementList_2",new SCreator(StatementList_2_factory));
new Sfactory(this,"StateChange_1",new SCreator(StateChange_1_factory));
new Sfactory(this,"EmptyStatement",new SCreator(EmptyStatement_factory));
new Sfactory(this,"Declaration",new SCreator(Declaration_factory));
new Sfactory(this,"IdentExpression",new SCreator(IdentExpression_factory));
new Sfactory(this,"error",new SCreator(error_factory));
new Sfactory(this,"BinaryExpression_2",new SCreator(BinaryExpression_2_factory));
new Sfactory(this,"State_2",new SCreator(State_2_factory));
new Sfactory(this,"BinaryExpression_4",new SCreator(BinaryExpression_4_factory));
new Sfactory(this,"BinaryExpression_5",new SCreator(BinaryExpression_5_factory));
new Sfactory(this,"ReturnStatement_2",new SCreator(ReturnStatement_2_factory));
new Sfactory(this,"SimpleAssignment_19",new SCreator(SimpleAssignment_19_factory));
new Sfactory(this,"BinaryExpression_9",new SCreator(BinaryExpression_9_factory));
new Sfactory(this,"VectorConstant_1",new SCreator(VectorConstant_1_factory));
new Sfactory(this,"ParenthesisExpression",new SCreator(ParenthesisExpression_factory));
new Sfactory(this,"StatementList",new SCreator(StatementList_factory));
new Sfactory(this,"UnaryExpression",new SCreator(UnaryExpression_factory));
new Sfactory(this,"IdentDotExpression_1",new SCreator(IdentDotExpression_1_factory));
new Sfactory(this,"ArgumentList_4",new SCreator(ArgumentList_4_factory));
new Sfactory(this,"Typename",new SCreator(Typename_factory));
new Sfactory(this,"IfStatement_1",new SCreator(IfStatement_1_factory));
new Sfactory(this,"RotationConstant_1",new SCreator(RotationConstant_1_factory));
new Sfactory(this,"Assignment",new SCreator(Assignment_factory));
new Sfactory(this,"CompoundStatement_1",new SCreator(CompoundStatement_1_factory));
new Sfactory(this,"CompoundStatement_2",new SCreator(CompoundStatement_2_factory));
new Sfactory(this,"BinaryExpression_8",new SCreator(BinaryExpression_8_factory));
new Sfactory(this,"VectorArgEvent",new SCreator(VectorArgEvent_factory));
new Sfactory(this,"ReturnStatement_1",new SCreator(ReturnStatement_1_factory));
new Sfactory(this,"IdentDotExpression",new SCreator(IdentDotExpression_factory));
new Sfactory(this,"Argument",new SCreator(Argument_factory));
new Sfactory(this,"VectorDeclaration_1",new SCreator(VectorDeclaration_1_factory));
new Sfactory(this,"GlobalDefinitions_3",new SCreator(GlobalDefinitions_3_factory));
new Sfactory(this,"GlobalDefinitions_4",new SCreator(GlobalDefinitions_4_factory));
new Sfactory(this,"Event_1",new SCreator(Event_1_factory));
new Sfactory(this,"ListConstant",new SCreator(ListConstant_factory));
new Sfactory(this,"Event_3",new SCreator(Event_3_factory));
new Sfactory(this,"Event_4",new SCreator(Event_4_factory));
new Sfactory(this,"Event_5",new SCreator(Event_5_factory));
new Sfactory(this,"SimpleAssignment_5",new SCreator(SimpleAssignment_5_factory));
new Sfactory(this,"Typename_1",new SCreator(Typename_1_factory));
new Sfactory(this,"VoidArgStateEvent_1",new SCreator(VoidArgStateEvent_1_factory));
new Sfactory(this,"Typename_3",new SCreator(Typename_3_factory));
new Sfactory(this,"Typename_4",new SCreator(Typename_4_factory));
new Sfactory(this,"Typename_5",new SCreator(Typename_5_factory));
new Sfactory(this,"Typename_6",new SCreator(Typename_6_factory));
new Sfactory(this,"Typename_7",new SCreator(Typename_7_factory));
new Sfactory(this,"ArgumentDeclarationList",new SCreator(ArgumentDeclarationList_factory));
new Sfactory(this,"ConstantExpression",new SCreator(ConstantExpression_factory));
new Sfactory(this,"LSLProgramRoot_1",new SCreator(LSLProgramRoot_1_factory));
new Sfactory(this,"LSLProgramRoot_2",new SCreator(LSLProgramRoot_2_factory));
new Sfactory(this,"States_1",new SCreator(States_1_factory));
new Sfactory(this,"States_2",new SCreator(States_2_factory));
new Sfactory(this,"FunctionCallExpression_1",new SCreator(FunctionCallExpression_1_factory));
new Sfactory(this,"ForLoopStatement",new SCreator(ForLoopStatement_factory));
new Sfactory(this,"IntArgStateEvent_1",new SCreator(IntArgStateEvent_1_factory));
new Sfactory(this,"IntArgEvent_6",new SCreator(IntArgEvent_6_factory));
new Sfactory(this,"IntArgEvent_9",new SCreator(IntArgEvent_9_factory));
new Sfactory(this,"DoWhileStatement_1",new SCreator(DoWhileStatement_1_factory));
new Sfactory(this,"DoWhileStatement_2",new SCreator(DoWhileStatement_2_factory));
new Sfactory(this,"ForLoopStatement_4",new SCreator(ForLoopStatement_4_factory));
new Sfactory(this,"SimpleAssignment_11",new SCreator(SimpleAssignment_11_factory));
new Sfactory(this,"SimpleAssignment_12",new SCreator(SimpleAssignment_12_factory));
new Sfactory(this,"SimpleAssignment_13",new SCreator(SimpleAssignment_13_factory));
new Sfactory(this,"JumpLabel",new SCreator(JumpLabel_factory));
new Sfactory(this,"SimpleAssignment_15",new SCreator(SimpleAssignment_15_factory));
new Sfactory(this,"SimpleAssignment_17",new SCreator(SimpleAssignment_17_factory));
new Sfactory(this,"SimpleAssignment_18",new SCreator(SimpleAssignment_18_factory));
new Sfactory(this,"JumpStatement_1",new SCreator(JumpStatement_1_factory));
new Sfactory(this,"GlobalDefinitions",new SCreator(GlobalDefinitions_factory));
new Sfactory(this,"ConstantExpression_1",new SCreator(ConstantExpression_1_factory));
new Sfactory(this,"VoidArgEvent_4",new SCreator(VoidArgEvent_4_factory));
new Sfactory(this,"FunctionCall_1",new SCreator(FunctionCall_1_factory));
new Sfactory(this,"VoidArgEvent_6",new SCreator(VoidArgEvent_6_factory));
new Sfactory(this,"Assignment_2",new SCreator(Assignment_2_factory));
new Sfactory(this,"TypecastExpression_1",new SCreator(TypecastExpression_1_factory));
new Sfactory(this,"SimpleAssignment_22",new SCreator(SimpleAssignment_22_factory));
new Sfactory(this,"SimpleAssignment_23",new SCreator(SimpleAssignment_23_factory));
new Sfactory(this,"TypecastExpression_9",new SCreator(TypecastExpression_9_factory));
new Sfactory(this,"VoidArgEvent_2",new SCreator(VoidArgEvent_2_factory));
new Sfactory(this,"VoidArgEvent_3",new SCreator(VoidArgEvent_3_factory));
new Sfactory(this,"ArgumentDeclarationList_1",new SCreator(ArgumentDeclarationList_1_factory));
new Sfactory(this,"ArgumentDeclarationList_2",new SCreator(ArgumentDeclarationList_2_factory));
new Sfactory(this,"GlobalDefinitions_1",new SCreator(GlobalDefinitions_1_factory));
new Sfactory(this,"GlobalDefinitions_2",new SCreator(GlobalDefinitions_2_factory));
new Sfactory(this,"IncrementDecrementExpression",new SCreator(IncrementDecrementExpression_factory));
new Sfactory(this,"GlobalVariableDeclaration",new SCreator(GlobalVariableDeclaration_factory));
new Sfactory(this,"IntArgumentDeclarationList_1",new SCreator(IntArgumentDeclarationList_1_factory));
new Sfactory(this,"IntDeclaration_1",new SCreator(IntDeclaration_1_factory));
new Sfactory(this,"ArgumentDeclarationList_5",new SCreator(ArgumentDeclarationList_5_factory));
new Sfactory(this,"Event_11",new SCreator(Event_11_factory));
new Sfactory(this,"VectorArgumentDeclarationList_1",new SCreator(VectorArgumentDeclarationList_1_factory));
new Sfactory(this,"TypecastExpression_2",new SCreator(TypecastExpression_2_factory));
new Sfactory(this,"TypecastExpression_3",new SCreator(TypecastExpression_3_factory));
new Sfactory(this,"TypecastExpression_4",new SCreator(TypecastExpression_4_factory));
new Sfactory(this,"TypecastExpression_5",new SCreator(TypecastExpression_5_factory));
new Sfactory(this,"TypecastExpression_8",new SCreator(TypecastExpression_8_factory));
new Sfactory(this,"Constant_1",new SCreator(Constant_1_factory));
new Sfactory(this,"Expression",new SCreator(Expression_factory));
new Sfactory(this,"Constant_3",new SCreator(Constant_3_factory));
new Sfactory(this,"Constant_4",new SCreator(Constant_4_factory));
new Sfactory(this,"BinaryExpression_1",new SCreator(BinaryExpression_1_factory));
new Sfactory(this,"BinaryExpression_3",new SCreator(BinaryExpression_3_factory));
new Sfactory(this,"IfStatement_2",new SCreator(IfStatement_2_factory));
new Sfactory(this,"IfStatement_3",new SCreator(IfStatement_3_factory));
new Sfactory(this,"IfStatement_4",new SCreator(IfStatement_4_factory));
new Sfactory(this,"Event_2",new SCreator(Event_2_factory));
new Sfactory(this,"JumpLabel_1",new SCreator(JumpLabel_1_factory));
new Sfactory(this,"RotationConstant",new SCreator(RotationConstant_factory));
new Sfactory(this,"Statement_12",new SCreator(Statement_12_factory));
new Sfactory(this,"Statement_13",new SCreator(Statement_13_factory));
new Sfactory(this,"UnaryExpression_1",new SCreator(UnaryExpression_1_factory));
new Sfactory(this,"UnaryExpression_2",new SCreator(UnaryExpression_2_factory));
new Sfactory(this,"UnaryExpression_3",new SCreator(UnaryExpression_3_factory));
new Sfactory(this,"ArgumentList_1",new SCreator(ArgumentList_1_factory));
new Sfactory(this,"ArgumentList_2",new SCreator(ArgumentList_2_factory));
new Sfactory(this,"ArgumentList_3",new SCreator(ArgumentList_3_factory));
new Sfactory(this,"Constant",new SCreator(Constant_factory));
new Sfactory(this,"State",new SCreator(State_factory));
new Sfactory(this,"Event_13",new SCreator(Event_13_factory));
new Sfactory(this,"LSLProgramRoot",new SCreator(LSLProgramRoot_factory));
new Sfactory(this,"StateChange",new SCreator(StateChange_factory));
new Sfactory(this,"IncrementDecrementExpression_2",new SCreator(IncrementDecrementExpression_2_factory));
new Sfactory(this,"GlobalVariableDeclaration_1",new SCreator(GlobalVariableDeclaration_1_factory));
new Sfactory(this,"GlobalVariableDeclaration_2",new SCreator(GlobalVariableDeclaration_2_factory));
new Sfactory(this,"IncrementDecrementExpression_5",new SCreator(IncrementDecrementExpression_5_factory));
new Sfactory(this,"ReturnStatement",new SCreator(ReturnStatement_factory));
new Sfactory(this,"IncrementDecrementExpression_7",new SCreator(IncrementDecrementExpression_7_factory));
new Sfactory(this,"IncrementDecrementExpression_8",new SCreator(IncrementDecrementExpression_8_factory));
new Sfactory(this,"Assignment_1",new SCreator(Assignment_1_factory));
new Sfactory(this,"ArgumentDeclarationList_3",new SCreator(ArgumentDeclarationList_3_factory));
new Sfactory(this,"IntArgEvent_10",new SCreator(IntArgEvent_10_factory));
new Sfactory(this,"CompoundStatement",new SCreator(CompoundStatement_factory));
new Sfactory(this,"IntArgumentDeclarationList",new SCreator(IntArgumentDeclarationList_factory));
new Sfactory(this,"SimpleAssignment_3",new SCreator(SimpleAssignment_3_factory));
new Sfactory(this,"SimpleAssignment_4",new SCreator(SimpleAssignment_4_factory));
new Sfactory(this,"Statement_1",new SCreator(Statement_1_factory));
new Sfactory(this,"Statement_2",new SCreator(Statement_2_factory));
new Sfactory(this,"Statement_4",new SCreator(Statement_4_factory));
new Sfactory(this,"Statement_5",new SCreator(Statement_5_factory));
new Sfactory(this,"Statement_6",new SCreator(Statement_6_factory));
new Sfactory(this,"Statement_8",new SCreator(Statement_8_factory));
new Sfactory(this,"Statement_9",new SCreator(Statement_9_factory));
new Sfactory(this,"ExpressionArgument",new SCreator(ExpressionArgument_factory));
new Sfactory(this,"GlobalFunctionDefinition",new SCreator(GlobalFunctionDefinition_factory));
new Sfactory(this,"State_1",new SCreator(State_1_factory));
new Sfactory(this,"DoWhileStatement",new SCreator(DoWhileStatement_factory));
new Sfactory(this,"ParenthesisExpression_1",new SCreator(ParenthesisExpression_1_factory));
new Sfactory(this,"ParenthesisExpression_2",new SCreator(ParenthesisExpression_2_factory));
new Sfactory(this,"StateBody",new SCreator(StateBody_factory));
new Sfactory(this,"Event_7",new SCreator(Event_7_factory));
new Sfactory(this,"Event_8",new SCreator(Event_8_factory));
new Sfactory(this,"IncrementDecrementExpression_1",new SCreator(IncrementDecrementExpression_1_factory));
new Sfactory(this,"Typename_2",new SCreator(Typename_2_factory));
new Sfactory(this,"IncrementDecrementExpression_3",new SCreator(IncrementDecrementExpression_3_factory));
new Sfactory(this,"IncrementDecrementExpression_4",new SCreator(IncrementDecrementExpression_4_factory));
new Sfactory(this,"IncrementDecrementExpression_6",new SCreator(IncrementDecrementExpression_6_factory));
new Sfactory(this,"StateEvent",new SCreator(StateEvent_factory));
new Sfactory(this,"IntArgEvent_3",new SCreator(IntArgEvent_3_factory));
new Sfactory(this,"IntArgEvent_4",new SCreator(IntArgEvent_4_factory));
new Sfactory(this,"IntArgEvent_5",new SCreator(IntArgEvent_5_factory));
new Sfactory(this,"Statement_3",new SCreator(Statement_3_factory));
new Sfactory(this,"IntArgEvent_7",new SCreator(IntArgEvent_7_factory));
new Sfactory(this,"IntArgEvent_8",new SCreator(IntArgEvent_8_factory));
new Sfactory(this,"SimpleAssignment_10",new SCreator(SimpleAssignment_10_factory));
new Sfactory(this,"Statement_7",new SCreator(Statement_7_factory));
new Sfactory(this,"VectorArgEvent_2",new SCreator(VectorArgEvent_2_factory));
new Sfactory(this,"Event",new SCreator(Event_factory));
new Sfactory(this,"SimpleAssignment_14",new SCreator(SimpleAssignment_14_factory));
new Sfactory(this,"SimpleAssignment_16",new SCreator(SimpleAssignment_16_factory));
new Sfactory(this,"Statement_10",new SCreator(Statement_10_factory));
new Sfactory(this,"Statement_11",new SCreator(Statement_11_factory));
new Sfactory(this,"SimpleAssignment",new SCreator(SimpleAssignment_factory));
new Sfactory(this,"TypecastExpression",new SCreator(TypecastExpression_factory));
new Sfactory(this,"VectorArgStateEvent_1",new SCreator(VectorArgStateEvent_1_factory));
new Sfactory(this,"SimpleAssignment_20",new SCreator(SimpleAssignment_20_factory));
new Sfactory(this,"SimpleAssignment_21",new SCreator(SimpleAssignment_21_factory));
new Sfactory(this,"SimpleAssignment_24",new SCreator(SimpleAssignment_24_factory));
new Sfactory(this,"SimpleAssignment_1",new SCreator(SimpleAssignment_1_factory));
new Sfactory(this,"SimpleAssignment_2",new SCreator(SimpleAssignment_2_factory));
new Sfactory(this,"BinaryExpression",new SCreator(BinaryExpression_factory));
new Sfactory(this,"FunctionCallExpression",new SCreator(FunctionCallExpression_factory));
new Sfactory(this,"SimpleAssignment_6",new SCreator(SimpleAssignment_6_factory));
new Sfactory(this,"StateBody_1",new SCreator(StateBody_1_factory));
new Sfactory(this,"StateBody_2",new SCreator(StateBody_2_factory));
new Sfactory(this,"StateBody_3",new SCreator(StateBody_3_factory));
new Sfactory(this,"StateBody_4",new SCreator(StateBody_4_factory));
new Sfactory(this,"StateBody_5",new SCreator(StateBody_5_factory));
new Sfactory(this,"StateBody_6",new SCreator(StateBody_6_factory));
new Sfactory(this,"StateBody_7",new SCreator(StateBody_7_factory));
new Sfactory(this,"StateBody_8",new SCreator(StateBody_8_factory));
new Sfactory(this,"Event_9",new SCreator(Event_9_factory));
new Sfactory(this,"Statement",new SCreator(Statement_factory));
new Sfactory(this,"JumpStatement",new SCreator(JumpStatement_factory));
new Sfactory(this,"BinaryExpression_11",new SCreator(BinaryExpression_11_factory));
new Sfactory(this,"IntArgEvent",new SCreator(IntArgEvent_factory));
new Sfactory(this,"BinaryExpression_13",new SCreator(BinaryExpression_13_factory));
new Sfactory(this,"BinaryExpression_14",new SCreator(BinaryExpression_14_factory));
new Sfactory(this,"BinaryExpression_15",new SCreator(BinaryExpression_15_factory));
new Sfactory(this,"BinaryExpression_16",new SCreator(BinaryExpression_16_factory));
new Sfactory(this,"BinaryExpression_6",new SCreator(BinaryExpression_6_factory));
new Sfactory(this,"BinaryExpression_7",new SCreator(BinaryExpression_7_factory));
new Sfactory(this,"ArgumentList",new SCreator(ArgumentList_factory));
new Sfactory(this,"VectorDeclaration",new SCreator(VectorDeclaration_factory));
new Sfactory(this,"Event_10",new SCreator(Event_10_factory));
new Sfactory(this,"GlobalFunctionDefinition_2",new SCreator(GlobalFunctionDefinition_2_factory));
new Sfactory(this,"Event_12",new SCreator(Event_12_factory));
new Sfactory(this,"StateChange_2",new SCreator(StateChange_2_factory));
new Sfactory(this,"VoidArgEvent_1",new SCreator(VoidArgEvent_1_factory));
new Sfactory(this,"BinaryExpression_10",new SCreator(BinaryExpression_10_factory));
new Sfactory(this,"VoidArgEvent_5",new SCreator(VoidArgEvent_5_factory));
new Sfactory(this,"BinaryExpression_12",new SCreator(BinaryExpression_12_factory));
new Sfactory(this,"VoidArgEvent_7",new SCreator(VoidArgEvent_7_factory));
new Sfactory(this,"VoidArgEvent_8",new SCreator(VoidArgEvent_8_factory));
new Sfactory(this,"BinaryExpression_17",new SCreator(BinaryExpression_17_factory));
new Sfactory(this,"StateEvent_1",new SCreator(StateEvent_1_factory));
new Sfactory(this,"VectorConstant",new SCreator(VectorConstant_factory));
new Sfactory(this,"VectorArgEvent_1",new SCreator(VectorArgEvent_1_factory));
new Sfactory(this,"IntDeclaration",new SCreator(IntDeclaration_factory));
new Sfactory(this,"VectorArgEvent_3",new SCreator(VectorArgEvent_3_factory));
new Sfactory(this,"IntArgStateEvent",new SCreator(IntArgStateEvent_factory));
new Sfactory(this,"TypecastExpression_6",new SCreator(TypecastExpression_6_factory));
new Sfactory(this,"TypecastExpression_7",new SCreator(TypecastExpression_7_factory));
new Sfactory(this,"FunctionCall",new SCreator(FunctionCall_factory));
new Sfactory(this,"ListConstant_1",new SCreator(ListConstant_1_factory));
new Sfactory(this,"BinaryExpression_18",new SCreator(BinaryExpression_18_factory));
new Sfactory(this,"Event_6",new SCreator(Event_6_factory));
new Sfactory(this,"Declaration_1",new SCreator(Declaration_1_factory));
new Sfactory(this,"EmptyStatement_1",new SCreator(EmptyStatement_1_factory));
new Sfactory(this,"SimpleAssignment_7",new SCreator(SimpleAssignment_7_factory));
new Sfactory(this,"ForLoop",new SCreator(ForLoop_factory));
new Sfactory(this,"ForLoop_2",new SCreator(ForLoop_2_factory));
new Sfactory(this,"GlobalFunctionDefinition_1",new SCreator(GlobalFunctionDefinition_1_factory));
new Sfactory(this,"IfStatement",new SCreator(IfStatement_factory));
new Sfactory(this,"ForLoopStatement_1",new SCreator(ForLoopStatement_1_factory));
new Sfactory(this,"ForLoopStatement_2",new SCreator(ForLoopStatement_2_factory));
new Sfactory(this,"ForLoopStatement_3",new SCreator(ForLoopStatement_3_factory));
new Sfactory(this,"ArgumentDeclarationList_4",new SCreator(ArgumentDeclarationList_4_factory));
new Sfactory(this,"IntArgEvent_1",new SCreator(IntArgEvent_1_factory));
new Sfactory(this,"IntArgEvent_2",new SCreator(IntArgEvent_2_factory));
new Sfactory(this,"WhileStatement",new SCreator(WhileStatement_factory));
new Sfactory(this,"ForLoop_1",new SCreator(ForLoop_1_factory));
new Sfactory(this,"Constant_2",new SCreator(Constant_2_factory));
new Sfactory(this,"VoidArgEvent",new SCreator(VoidArgEvent_factory));
new Sfactory(this,"WhileStatement_1",new SCreator(WhileStatement_1_factory));
new Sfactory(this,"WhileStatement_2",new SCreator(WhileStatement_2_factory));
new Sfactory(this,"IdentExpression_1",new SCreator(IdentExpression_1_factory));
new Sfactory(this,"VectorArgumentDeclarationList",new SCreator(VectorArgumentDeclarationList_factory));
new Sfactory(this,"States",new SCreator(States_factory));
new Sfactory(this,"VoidArgStateEvent",new SCreator(VoidArgStateEvent_factory));
}
public static object ExpressionArgument_1_factory(Parser yyp) { return new ExpressionArgument_1(yyp); }
public static object VectorArgStateEvent_factory(Parser yyp) { return new VectorArgStateEvent(yyp); }
public static object SimpleAssignment_8_factory(Parser yyp) { return new SimpleAssignment_8(yyp); }
public static object SimpleAssignment_9_factory(Parser yyp) { return new SimpleAssignment_9(yyp); }
public static object StatementList_1_factory(Parser yyp) { return new StatementList_1(yyp); }
public static object StatementList_2_factory(Parser yyp) { return new StatementList_2(yyp); }
public static object StateChange_1_factory(Parser yyp) { return new StateChange_1(yyp); }
public static object EmptyStatement_factory(Parser yyp) { return new EmptyStatement(yyp); }
public static object Declaration_factory(Parser yyp) { return new Declaration(yyp); }
public static object IdentExpression_factory(Parser yyp) { return new IdentExpression(yyp); }
public static object error_factory(Parser yyp) { return new error(yyp); }
public static object BinaryExpression_2_factory(Parser yyp) { return new BinaryExpression_2(yyp); }
public static object State_2_factory(Parser yyp) { return new State_2(yyp); }
public static object BinaryExpression_4_factory(Parser yyp) { return new BinaryExpression_4(yyp); }
public static object BinaryExpression_5_factory(Parser yyp) { return new BinaryExpression_5(yyp); }
public static object ReturnStatement_2_factory(Parser yyp) { return new ReturnStatement_2(yyp); }
public static object SimpleAssignment_19_factory(Parser yyp) { return new SimpleAssignment_19(yyp); }
public static object BinaryExpression_9_factory(Parser yyp) { return new BinaryExpression_9(yyp); }
public static object VectorConstant_1_factory(Parser yyp) { return new VectorConstant_1(yyp); }
public static object ParenthesisExpression_factory(Parser yyp) { return new ParenthesisExpression(yyp); }
public static object StatementList_factory(Parser yyp) { return new StatementList(yyp); }
public static object UnaryExpression_factory(Parser yyp) { return new UnaryExpression(yyp); }
public static object IdentDotExpression_1_factory(Parser yyp) { return new IdentDotExpression_1(yyp); }
public static object ArgumentList_4_factory(Parser yyp) { return new ArgumentList_4(yyp); }
public static object Typename_factory(Parser yyp) { return new Typename(yyp); }
public static object IfStatement_1_factory(Parser yyp) { return new IfStatement_1(yyp); }
public static object RotationConstant_1_factory(Parser yyp) { return new RotationConstant_1(yyp); }
public static object Assignment_factory(Parser yyp) { return new Assignment(yyp); }
public static object CompoundStatement_1_factory(Parser yyp) { return new CompoundStatement_1(yyp); }
public static object CompoundStatement_2_factory(Parser yyp) { return new CompoundStatement_2(yyp); }
public static object BinaryExpression_8_factory(Parser yyp) { return new BinaryExpression_8(yyp); }
public static object VectorArgEvent_factory(Parser yyp) { return new VectorArgEvent(yyp); }
public static object ReturnStatement_1_factory(Parser yyp) { return new ReturnStatement_1(yyp); }
public static object IdentDotExpression_factory(Parser yyp) { return new IdentDotExpression(yyp); }
public static object Argument_factory(Parser yyp) { return new Argument(yyp); }
public static object VectorDeclaration_1_factory(Parser yyp) { return new VectorDeclaration_1(yyp); }
public static object GlobalDefinitions_3_factory(Parser yyp) { return new GlobalDefinitions_3(yyp); }
public static object GlobalDefinitions_4_factory(Parser yyp) { return new GlobalDefinitions_4(yyp); }
public static object Event_1_factory(Parser yyp) { return new Event_1(yyp); }
public static object ListConstant_factory(Parser yyp) { return new ListConstant(yyp); }
public static object Event_3_factory(Parser yyp) { return new Event_3(yyp); }
public static object Event_4_factory(Parser yyp) { return new Event_4(yyp); }
public static object Event_5_factory(Parser yyp) { return new Event_5(yyp); }
public static object SimpleAssignment_5_factory(Parser yyp) { return new SimpleAssignment_5(yyp); }
public static object Typename_1_factory(Parser yyp) { return new Typename_1(yyp); }
public static object VoidArgStateEvent_1_factory(Parser yyp) { return new VoidArgStateEvent_1(yyp); }
public static object Typename_3_factory(Parser yyp) { return new Typename_3(yyp); }
public static object Typename_4_factory(Parser yyp) { return new Typename_4(yyp); }
public static object Typename_5_factory(Parser yyp) { return new Typename_5(yyp); }
public static object Typename_6_factory(Parser yyp) { return new Typename_6(yyp); }
public static object Typename_7_factory(Parser yyp) { return new Typename_7(yyp); }
public static object ArgumentDeclarationList_factory(Parser yyp) { return new ArgumentDeclarationList(yyp); }
public static object ConstantExpression_factory(Parser yyp) { return new ConstantExpression(yyp); }
public static object LSLProgramRoot_1_factory(Parser yyp) { return new LSLProgramRoot_1(yyp); }
public static object LSLProgramRoot_2_factory(Parser yyp) { return new LSLProgramRoot_2(yyp); }
public static object States_1_factory(Parser yyp) { return new States_1(yyp); }
public static object States_2_factory(Parser yyp) { return new States_2(yyp); }
public static object FunctionCallExpression_1_factory(Parser yyp) { return new FunctionCallExpression_1(yyp); }
public static object ForLoopStatement_factory(Parser yyp) { return new ForLoopStatement(yyp); }
public static object IntArgStateEvent_1_factory(Parser yyp) { return new IntArgStateEvent_1(yyp); }
public static object IntArgEvent_6_factory(Parser yyp) { return new IntArgEvent_6(yyp); }
public static object IntArgEvent_9_factory(Parser yyp) { return new IntArgEvent_9(yyp); }
public static object DoWhileStatement_1_factory(Parser yyp) { return new DoWhileStatement_1(yyp); }
public static object DoWhileStatement_2_factory(Parser yyp) { return new DoWhileStatement_2(yyp); }
public static object ForLoopStatement_4_factory(Parser yyp) { return new ForLoopStatement_4(yyp); }
public static object SimpleAssignment_11_factory(Parser yyp) { return new SimpleAssignment_11(yyp); }
public static object SimpleAssignment_12_factory(Parser yyp) { return new SimpleAssignment_12(yyp); }
public static object SimpleAssignment_13_factory(Parser yyp) { return new SimpleAssignment_13(yyp); }
public static object JumpLabel_factory(Parser yyp) { return new JumpLabel(yyp); }
public static object SimpleAssignment_15_factory(Parser yyp) { return new SimpleAssignment_15(yyp); }
public static object SimpleAssignment_17_factory(Parser yyp) { return new SimpleAssignment_17(yyp); }
public static object SimpleAssignment_18_factory(Parser yyp) { return new SimpleAssignment_18(yyp); }
public static object JumpStatement_1_factory(Parser yyp) { return new JumpStatement_1(yyp); }
public static object GlobalDefinitions_factory(Parser yyp) { return new GlobalDefinitions(yyp); }
public static object ConstantExpression_1_factory(Parser yyp) { return new ConstantExpression_1(yyp); }
public static object VoidArgEvent_4_factory(Parser yyp) { return new VoidArgEvent_4(yyp); }
public static object FunctionCall_1_factory(Parser yyp) { return new FunctionCall_1(yyp); }
public static object VoidArgEvent_6_factory(Parser yyp) { return new VoidArgEvent_6(yyp); }
public static object Assignment_2_factory(Parser yyp) { return new Assignment_2(yyp); }
public static object TypecastExpression_1_factory(Parser yyp) { return new TypecastExpression_1(yyp); }
public static object SimpleAssignment_22_factory(Parser yyp) { return new SimpleAssignment_22(yyp); }
public static object SimpleAssignment_23_factory(Parser yyp) { return new SimpleAssignment_23(yyp); }
public static object TypecastExpression_9_factory(Parser yyp) { return new TypecastExpression_9(yyp); }
public static object VoidArgEvent_2_factory(Parser yyp) { return new VoidArgEvent_2(yyp); }
public static object VoidArgEvent_3_factory(Parser yyp) { return new VoidArgEvent_3(yyp); }
public static object ArgumentDeclarationList_1_factory(Parser yyp) { return new ArgumentDeclarationList_1(yyp); }
public static object ArgumentDeclarationList_2_factory(Parser yyp) { return new ArgumentDeclarationList_2(yyp); }
public static object GlobalDefinitions_1_factory(Parser yyp) { return new GlobalDefinitions_1(yyp); }
public static object GlobalDefinitions_2_factory(Parser yyp) { return new GlobalDefinitions_2(yyp); }
public static object IncrementDecrementExpression_factory(Parser yyp) { return new IncrementDecrementExpression(yyp); }
public static object GlobalVariableDeclaration_factory(Parser yyp) { return new GlobalVariableDeclaration(yyp); }
public static object IntArgumentDeclarationList_1_factory(Parser yyp) { return new IntArgumentDeclarationList_1(yyp); }
public static object IntDeclaration_1_factory(Parser yyp) { return new IntDeclaration_1(yyp); }
public static object ArgumentDeclarationList_5_factory(Parser yyp) { return new ArgumentDeclarationList_5(yyp); }
public static object Event_11_factory(Parser yyp) { return new Event_11(yyp); }
public static object VectorArgumentDeclarationList_1_factory(Parser yyp) { return new VectorArgumentDeclarationList_1(yyp); }
public static object TypecastExpression_2_factory(Parser yyp) { return new TypecastExpression_2(yyp); }
public static object TypecastExpression_3_factory(Parser yyp) { return new TypecastExpression_3(yyp); }
public static object TypecastExpression_4_factory(Parser yyp) { return new TypecastExpression_4(yyp); }
public static object TypecastExpression_5_factory(Parser yyp) { return new TypecastExpression_5(yyp); }
public static object TypecastExpression_8_factory(Parser yyp) { return new TypecastExpression_8(yyp); }
public static object Constant_1_factory(Parser yyp) { return new Constant_1(yyp); }
public static object Expression_factory(Parser yyp) { return new Expression(yyp); }
public static object Constant_3_factory(Parser yyp) { return new Constant_3(yyp); }
public static object Constant_4_factory(Parser yyp) { return new Constant_4(yyp); }
public static object BinaryExpression_1_factory(Parser yyp) { return new BinaryExpression_1(yyp); }
public static object BinaryExpression_3_factory(Parser yyp) { return new BinaryExpression_3(yyp); }
public static object IfStatement_2_factory(Parser yyp) { return new IfStatement_2(yyp); }
public static object IfStatement_3_factory(Parser yyp) { return new IfStatement_3(yyp); }
public static object IfStatement_4_factory(Parser yyp) { return new IfStatement_4(yyp); }
public static object Event_2_factory(Parser yyp) { return new Event_2(yyp); }
public static object JumpLabel_1_factory(Parser yyp) { return new JumpLabel_1(yyp); }
public static object RotationConstant_factory(Parser yyp) { return new RotationConstant(yyp); }
public static object Statement_12_factory(Parser yyp) { return new Statement_12(yyp); }
public static object Statement_13_factory(Parser yyp) { return new Statement_13(yyp); }
public static object UnaryExpression_1_factory(Parser yyp) { return new UnaryExpression_1(yyp); }
public static object UnaryExpression_2_factory(Parser yyp) { return new UnaryExpression_2(yyp); }
public static object UnaryExpression_3_factory(Parser yyp) { return new UnaryExpression_3(yyp); }
public static object ArgumentList_1_factory(Parser yyp) { return new ArgumentList_1(yyp); }
public static object ArgumentList_2_factory(Parser yyp) { return new ArgumentList_2(yyp); }
public static object ArgumentList_3_factory(Parser yyp) { return new ArgumentList_3(yyp); }
public static object Constant_factory(Parser yyp) { return new Constant(yyp); }
public static object State_factory(Parser yyp) { return new State(yyp); }
public static object Event_13_factory(Parser yyp) { return new Event_13(yyp); }
public static object LSLProgramRoot_factory(Parser yyp) { return new LSLProgramRoot(yyp); }
public static object StateChange_factory(Parser yyp) { return new StateChange(yyp); }
public static object IncrementDecrementExpression_2_factory(Parser yyp) { return new IncrementDecrementExpression_2(yyp); }
public static object GlobalVariableDeclaration_1_factory(Parser yyp) { return new GlobalVariableDeclaration_1(yyp); }
public static object GlobalVariableDeclaration_2_factory(Parser yyp) { return new GlobalVariableDeclaration_2(yyp); }
public static object IncrementDecrementExpression_5_factory(Parser yyp) { return new IncrementDecrementExpression_5(yyp); }
public static object ReturnStatement_factory(Parser yyp) { return new ReturnStatement(yyp); }
public static object IncrementDecrementExpression_7_factory(Parser yyp) { return new IncrementDecrementExpression_7(yyp); }
public static object IncrementDecrementExpression_8_factory(Parser yyp) { return new IncrementDecrementExpression_8(yyp); }
public static object Assignment_1_factory(Parser yyp) { return new Assignment_1(yyp); }
public static object ArgumentDeclarationList_3_factory(Parser yyp) { return new ArgumentDeclarationList_3(yyp); }
public static object IntArgEvent_10_factory(Parser yyp) { return new IntArgEvent_10(yyp); }
public static object CompoundStatement_factory(Parser yyp) { return new CompoundStatement(yyp); }
public static object IntArgumentDeclarationList_factory(Parser yyp) { return new IntArgumentDeclarationList(yyp); }
public static object SimpleAssignment_3_factory(Parser yyp) { return new SimpleAssignment_3(yyp); }
public static object SimpleAssignment_4_factory(Parser yyp) { return new SimpleAssignment_4(yyp); }
public static object Statement_1_factory(Parser yyp) { return new Statement_1(yyp); }
public static object Statement_2_factory(Parser yyp) { return new Statement_2(yyp); }
public static object Statement_4_factory(Parser yyp) { return new Statement_4(yyp); }
public static object Statement_5_factory(Parser yyp) { return new Statement_5(yyp); }
public static object Statement_6_factory(Parser yyp) { return new Statement_6(yyp); }
public static object Statement_8_factory(Parser yyp) { return new Statement_8(yyp); }
public static object Statement_9_factory(Parser yyp) { return new Statement_9(yyp); }
public static object ExpressionArgument_factory(Parser yyp) { return new ExpressionArgument(yyp); }
public static object GlobalFunctionDefinition_factory(Parser yyp) { return new GlobalFunctionDefinition(yyp); }
public static object State_1_factory(Parser yyp) { return new State_1(yyp); }
public static object DoWhileStatement_factory(Parser yyp) { return new DoWhileStatement(yyp); }
public static object ParenthesisExpression_1_factory(Parser yyp) { return new ParenthesisExpression_1(yyp); }
public static object ParenthesisExpression_2_factory(Parser yyp) { return new ParenthesisExpression_2(yyp); }
public static object StateBody_factory(Parser yyp) { return new StateBody(yyp); }
public static object Event_7_factory(Parser yyp) { return new Event_7(yyp); }
public static object Event_8_factory(Parser yyp) { return new Event_8(yyp); }
public static object IncrementDecrementExpression_1_factory(Parser yyp) { return new IncrementDecrementExpression_1(yyp); }
public static object Typename_2_factory(Parser yyp) { return new Typename_2(yyp); }
public static object IncrementDecrementExpression_3_factory(Parser yyp) { return new IncrementDecrementExpression_3(yyp); }
public static object IncrementDecrementExpression_4_factory(Parser yyp) { return new IncrementDecrementExpression_4(yyp); }
public static object IncrementDecrementExpression_6_factory(Parser yyp) { return new IncrementDecrementExpression_6(yyp); }
public static object StateEvent_factory(Parser yyp) { return new StateEvent(yyp); }
public static object IntArgEvent_3_factory(Parser yyp) { return new IntArgEvent_3(yyp); }
public static object IntArgEvent_4_factory(Parser yyp) { return new IntArgEvent_4(yyp); }
public static object IntArgEvent_5_factory(Parser yyp) { return new IntArgEvent_5(yyp); }
public static object Statement_3_factory(Parser yyp) { return new Statement_3(yyp); }
public static object IntArgEvent_7_factory(Parser yyp) { return new IntArgEvent_7(yyp); }
public static object IntArgEvent_8_factory(Parser yyp) { return new IntArgEvent_8(yyp); }
public static object SimpleAssignment_10_factory(Parser yyp) { return new SimpleAssignment_10(yyp); }
public static object Statement_7_factory(Parser yyp) { return new Statement_7(yyp); }
public static object VectorArgEvent_2_factory(Parser yyp) { return new VectorArgEvent_2(yyp); }
public static object Event_factory(Parser yyp) { return new Event(yyp); }
public static object SimpleAssignment_14_factory(Parser yyp) { return new SimpleAssignment_14(yyp); }
public static object SimpleAssignment_16_factory(Parser yyp) { return new SimpleAssignment_16(yyp); }
public static object Statement_10_factory(Parser yyp) { return new Statement_10(yyp); }
public static object Statement_11_factory(Parser yyp) { return new Statement_11(yyp); }
public static object SimpleAssignment_factory(Parser yyp) { return new SimpleAssignment(yyp); }
public static object TypecastExpression_factory(Parser yyp) { return new TypecastExpression(yyp); }
public static object VectorArgStateEvent_1_factory(Parser yyp) { return new VectorArgStateEvent_1(yyp); }
public static object SimpleAssignment_20_factory(Parser yyp) { return new SimpleAssignment_20(yyp); }
public static object SimpleAssignment_21_factory(Parser yyp) { return new SimpleAssignment_21(yyp); }
public static object SimpleAssignment_24_factory(Parser yyp) { return new SimpleAssignment_24(yyp); }
public static object SimpleAssignment_1_factory(Parser yyp) { return new SimpleAssignment_1(yyp); }
public static object SimpleAssignment_2_factory(Parser yyp) { return new SimpleAssignment_2(yyp); }
public static object BinaryExpression_factory(Parser yyp) { return new BinaryExpression(yyp); }
public static object FunctionCallExpression_factory(Parser yyp) { return new FunctionCallExpression(yyp); }
public static object SimpleAssignment_6_factory(Parser yyp) { return new SimpleAssignment_6(yyp); }
public static object StateBody_1_factory(Parser yyp) { return new StateBody_1(yyp); }
public static object StateBody_2_factory(Parser yyp) { return new StateBody_2(yyp); }
public static object StateBody_3_factory(Parser yyp) { return new StateBody_3(yyp); }
public static object StateBody_4_factory(Parser yyp) { return new StateBody_4(yyp); }
public static object StateBody_5_factory(Parser yyp) { return new StateBody_5(yyp); }
public static object StateBody_6_factory(Parser yyp) { return new StateBody_6(yyp); }
public static object StateBody_7_factory(Parser yyp) { return new StateBody_7(yyp); }
public static object StateBody_8_factory(Parser yyp) { return new StateBody_8(yyp); }
public static object Event_9_factory(Parser yyp) { return new Event_9(yyp); }
public static object Statement_factory(Parser yyp) { return new Statement(yyp); }
public static object JumpStatement_factory(Parser yyp) { return new JumpStatement(yyp); }
public static object BinaryExpression_11_factory(Parser yyp) { return new BinaryExpression_11(yyp); }
public static object IntArgEvent_factory(Parser yyp) { return new IntArgEvent(yyp); }
public static object BinaryExpression_13_factory(Parser yyp) { return new BinaryExpression_13(yyp); }
public static object BinaryExpression_14_factory(Parser yyp) { return new BinaryExpression_14(yyp); }
public static object BinaryExpression_15_factory(Parser yyp) { return new BinaryExpression_15(yyp); }
public static object BinaryExpression_16_factory(Parser yyp) { return new BinaryExpression_16(yyp); }
public static object BinaryExpression_6_factory(Parser yyp) { return new BinaryExpression_6(yyp); }
public static object BinaryExpression_7_factory(Parser yyp) { return new BinaryExpression_7(yyp); }
public static object ArgumentList_factory(Parser yyp) { return new ArgumentList(yyp); }
public static object VectorDeclaration_factory(Parser yyp) { return new VectorDeclaration(yyp); }
public static object Event_10_factory(Parser yyp) { return new Event_10(yyp); }
public static object GlobalFunctionDefinition_2_factory(Parser yyp) { return new GlobalFunctionDefinition_2(yyp); }
public static object Event_12_factory(Parser yyp) { return new Event_12(yyp); }
public static object StateChange_2_factory(Parser yyp) { return new StateChange_2(yyp); }
public static object VoidArgEvent_1_factory(Parser yyp) { return new VoidArgEvent_1(yyp); }
public static object BinaryExpression_10_factory(Parser yyp) { return new BinaryExpression_10(yyp); }
public static object VoidArgEvent_5_factory(Parser yyp) { return new VoidArgEvent_5(yyp); }
public static object BinaryExpression_12_factory(Parser yyp) { return new BinaryExpression_12(yyp); }
public static object VoidArgEvent_7_factory(Parser yyp) { return new VoidArgEvent_7(yyp); }
public static object VoidArgEvent_8_factory(Parser yyp) { return new VoidArgEvent_8(yyp); }
public static object BinaryExpression_17_factory(Parser yyp) { return new BinaryExpression_17(yyp); }
public static object StateEvent_1_factory(Parser yyp) { return new StateEvent_1(yyp); }
public static object VectorConstant_factory(Parser yyp) { return new VectorConstant(yyp); }
public static object VectorArgEvent_1_factory(Parser yyp) { return new VectorArgEvent_1(yyp); }
public static object IntDeclaration_factory(Parser yyp) { return new IntDeclaration(yyp); }
public static object VectorArgEvent_3_factory(Parser yyp) { return new VectorArgEvent_3(yyp); }
public static object IntArgStateEvent_factory(Parser yyp) { return new IntArgStateEvent(yyp); }
public static object TypecastExpression_6_factory(Parser yyp) { return new TypecastExpression_6(yyp); }
public static object TypecastExpression_7_factory(Parser yyp) { return new TypecastExpression_7(yyp); }
public static object FunctionCall_factory(Parser yyp) { return new FunctionCall(yyp); }
public static object ListConstant_1_factory(Parser yyp) { return new ListConstant_1(yyp); }
public static object BinaryExpression_18_factory(Parser yyp) { return new BinaryExpression_18(yyp); }
public static object Event_6_factory(Parser yyp) { return new Event_6(yyp); }
public static object Declaration_1_factory(Parser yyp) { return new Declaration_1(yyp); }
public static object EmptyStatement_1_factory(Parser yyp) { return new EmptyStatement_1(yyp); }
public static object SimpleAssignment_7_factory(Parser yyp) { return new SimpleAssignment_7(yyp); }
public static object ForLoop_factory(Parser yyp) { return new ForLoop(yyp); }
public static object ForLoop_2_factory(Parser yyp) { return new ForLoop_2(yyp); }
public static object GlobalFunctionDefinition_1_factory(Parser yyp) { return new GlobalFunctionDefinition_1(yyp); }
public static object IfStatement_factory(Parser yyp) { return new IfStatement(yyp); }
public static object ForLoopStatement_1_factory(Parser yyp) { return new ForLoopStatement_1(yyp); }
public static object ForLoopStatement_2_factory(Parser yyp) { return new ForLoopStatement_2(yyp); }
public static object ForLoopStatement_3_factory(Parser yyp) { return new ForLoopStatement_3(yyp); }
public static object ArgumentDeclarationList_4_factory(Parser yyp) { return new ArgumentDeclarationList_4(yyp); }
public static object IntArgEvent_1_factory(Parser yyp) { return new IntArgEvent_1(yyp); }
public static object IntArgEvent_2_factory(Parser yyp) { return new IntArgEvent_2(yyp); }
public static object WhileStatement_factory(Parser yyp) { return new WhileStatement(yyp); }
public static object ForLoop_1_factory(Parser yyp) { return new ForLoop_1(yyp); }
public static object Constant_2_factory(Parser yyp) { return new Constant_2(yyp); }
public static object VoidArgEvent_factory(Parser yyp) { return new VoidArgEvent(yyp); }
public static object WhileStatement_1_factory(Parser yyp) { return new WhileStatement_1(yyp); }
public static object WhileStatement_2_factory(Parser yyp) { return new WhileStatement_2(yyp); }
public static object IdentExpression_1_factory(Parser yyp) { return new IdentExpression_1(yyp); }
public static object VectorArgumentDeclarationList_factory(Parser yyp) { return new VectorArgumentDeclarationList(yyp); }
public static object States_factory(Parser yyp) { return new States(yyp); }
public static object VoidArgStateEvent_factory(Parser yyp) { return new VoidArgStateEvent(yyp); }
}
public class LSLSyntax
: Parser {
public LSLSyntax
():base(new yyLSLSyntax
(),new LSLTokens()) {}
public LSLSyntax
(YyParser syms):base(syms,new LSLTokens()) {}
public LSLSyntax
(YyParser syms,ErrorHandler erh):base(syms,new LSLTokens(erh)) {}

 }
}
